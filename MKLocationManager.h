/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <MKLocationProvider>, CLLocation, NSBundle, GEOLocationShifter, GEOLocation, _MKWiFiObserver, CLHeading, <MKLocationRecorder>, NSHashTable, NSString, NSMutableArray, NSTimer;

@interface MKLocationManager : NSObject <_MKWiFiObserverDelegate, MKLocationProviderDelegate> {
    <MKLocationProvider> *_locationProvider;
    NSHashTable *_locationObservers;
    NSHashTable *_locationListeners;
    NSHashTable *_headingObservers;
    CLLocation *_lastLocation;
    double _lastLocationUpdateTime;
    BOOL _isLastLocationStale;
    BOOL _lastLocationPushed;
    BOOL _trackingLocation;
    BOOL _trackingHeading;
    <MKLocationRecorder> *_locationRecorder;
    double _applicationResumeTime;
    double _applicationSuspendTime;
    double _headingUpdateTime;
    double _locationAccuracyUpdateTime;
    BOOL _allowUpdateCoalescing;
    NSTimer *_coalesceTimer;
    double _lastLocationReportTime;
    GEOLocationShifter *_locationShifter;
    CLHeading *_throttledHeading;
    CLHeading *_heading;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _networkActivity;

    BOOL _enabled;
    BOOL _useCourseForHeading;
    BOOL _logStartStopLocationUpdates;
    double _lastVehicleHeading;
    double _lastVehicleSpeed;
    double _lastVehicleHeadingUpdateTime;
    double _lastVehicleSpeedUpdateTime;
    int _consecutiveOutOfCourseCount;
    double _navCourse;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _locationCorrector;

    double _minimumLocationUpdateInterval;
    struct __SCPreferences { } *_airplaneModePrefs;
    BOOL _airplaneModeEnabledIsValid;
    BOOL _airplaneModeEnabled;
    BOOL _continuedAfterBecomingInactive;
    BOOL _suspended;
    NSMutableArray *_recentLocationUpdateIntervals;
    _MKWiFiObserver *_wifiObserver;
    BOOL _hasCustomDesiredAccuracy;
    BOOL _continuesWhileInactive;
}

@property(retain) <MKLocationProvider> * locationProvider;
@property(copy) id locationCorrector;
@property BOOL logStartStopLocationUpdates;
@property(getter=isEnabled) BOOL enabled;
@property(getter=isLocationServicesAuthorizationNeeded,readonly) BOOL locationServicesAuthorizationNeeded;
@property(readonly) BOOL isLocationServicesAvailable;
@property(readonly) BOOL isLocationServicesPossiblyAvailable;
@property(readonly) BOOL isLocationServicesEnabled;
@property(readonly) BOOL isLocationServicesApproved;
@property(readonly) BOOL isLocationServicesDenied;
@property(readonly) BOOL isLocationServicesRestricted;
@property(readonly) BOOL isHeadingServicesAvailable;
@property(readonly) BOOL isAirplaneModeBlockingLocation;
@property(readonly) BOOL isWiFiEnabled;
@property(getter=isLocationServicesPreferencesDialogEnabled) BOOL locationServicesPreferencesDialogEnabled;
@property(readonly) double headingUpdateTimeInterval;
@property(readonly) GEOLocation * currentLocation;
@property(readonly) GEOLocation * gridSnappedCurrentLocation;
@property(readonly) GEOLocation * courseCorrectedLocation;
@property int headingOrientation;
@property(copy) id authorizationRequestBlock;
@property(readonly) BOOL locationShiftEnabled;
@property(readonly) BOOL hasLocation;
@property(readonly) CLLocation * lastLocation;
@property(readonly) BOOL isLastLocationStale;
@property double desiredAccuracy;
@property double distanceFilter;
@property BOOL matchInfoEnabled;
@property int activityType;
@property(readonly) double expectedGpsUpdateInterval;
@property(retain) NSBundle * effectiveBundle;
@property(copy) NSString * effectiveBundleIdentifier;
@property BOOL allowUpdateCoalescing;
@property BOOL useCourseForHeading;
@property(readonly) CLHeading * heading;
@property(retain) CLHeading * throttledHeading;
@property(readonly) double currentVehicleHeading;
@property(readonly) double currentVehicleSpeed;
@property(readonly) double vehicleHeadingOrCourse;
@property(copy) id networkActivity;
@property(retain) <MKLocationRecorder> * locationRecorder;
@property(readonly) double navigationCourse;
@property double minimumLocationUpdateInterval;
@property BOOL continuesWhileInactive;
@property(getter=wasLastLocationPushed,readonly) BOOL lastLocationPushed;
@property(readonly) int lastLocationSource;

+ (void)setCanMonitorWiFiStatus:(BOOL)arg1;
+ (id)sharedLocationManager;

- (void)setActivityType:(int)arg1;
- (id)heading;
- (BOOL)hasLocation;
- (void)setHeadingOrientation:(int)arg1;
- (void)setDesiredAccuracy:(double)arg1;
- (void)setDistanceFilter:(double)arg1;
- (BOOL)locationShiftEnabled;
- (void)setHeading:(id)arg1;
- (void).cxx_destruct;
- (int)activityType;
- (void)reset;
- (id)effectiveBundle;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (id)lastLocation;
- (void)setLastLocation:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)setMinimumLocationUpdateInterval:(double)arg1;
- (double)minimumLocationUpdateInterval;
- (void)setLogStartStopLocationUpdates:(BOOL)arg1;
- (BOOL)logStartStopLocationUpdates;
- (BOOL)allowUpdateCoalescing;
- (BOOL)wasLastLocationPushed;
- (id)locationCorrector;
- (double)navigationCourse;
- (void)setUseCourseForHeading:(BOOL)arg1;
- (void)setNetworkActivity:(id)arg1;
- (id)networkActivity;
- (void)stopVehicleHeadingUpdate;
- (void)startVehicleHeadingUpdate;
- (void)stopVehicleSpeedUpdate;
- (void)startVehicleSpeedUpdate;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(id)arg2;
- (id)singleLocationUpdateWithHandler:(id)arg1;
- (void)listenForLocationUpdates:(id)arg1;
- (void)pushLocation:(id)arg1;
- (void)setAllowUpdateCoalescing:(BOOL)arg1;
- (void)_reportHeadingFailureWithError:(id)arg1;
- (void)setContinuesWhileInactive:(BOOL)arg1;
- (id)throttledHeading;
- (double)vehicleHeadingOrCourse;
- (id)courseCorrectedLocation;
- (id)gridSnappedCurrentLocation;
- (void)_airplaneModeChanged;
- (BOOL)isLocationServicesAuthorizationNeeded;
- (void)setLocationCorrector:(id)arg1;
- (void)wiFiObserverDidChangeEnabled:(id)arg1;
- (void)_setTrackingHeading:(BOOL)arg1;
- (void)_startLocationUpdateWithObserver:(id)arg1 desiredAccuracy:(double)arg2;
- (BOOL)isLocationServicesPossiblyAvailable:(id*)arg1;
- (void)_setTrackingLocation:(BOOL)arg1;
- (void)_reportLocationFailureWithError:(id)arg1;
- (id)locationRecorder;
- (void)dampenGPSLocationAccuracy:(id*)arg1 oldLocationSource:(int)arg2;
- (BOOL)shouldStopCoalescingLocation:(id)arg1;
- (void)_startCoalescingUpdates:(int)arg1;
- (BOOL)shouldStartCoalescingLocation:(id)arg1;
- (BOOL)_shouldAllowLocationUpdateInterval:(double)arg1;
- (void)_locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;
- (void)_reportLocationSuccess;
- (void)_stopCoalescingUpdates;
- (void)setCoalesceTimer:(id)arg1;
- (void)reportCoalescedUpdated;
- (int)lastLocationSource;
- (BOOL)shouldCoalesceUpdates;
- (BOOL)isLocationServicesEnabled;
- (BOOL)isLocationServicesPossiblyAvailable;
- (void)_reportLocationReset;
- (void)_reportLocationStatus:(SEL)arg1;
- (BOOL)continuesWhileInactive;
- (void)_suspend;
- (void)resetAfterResumeIfNecessary;
- (BOOL)_isTimeToResetOnResume;
- (void)_reportHeadingSuccess;
- (BOOL)isLastLocationStale;
- (void)_syncLocationProviderWithTracking;
- (BOOL)isLocationServicesAvailable;
- (BOOL)isLocationServicesRestricted;
- (BOOL)isLocationServicesDenied;
- (BOOL)isAirplaneModeBlockingLocation;
- (BOOL)isLocationServicesApproved;
- (id)locationProvider;
- (void)setLocationRecorder:(id)arg1;
- (void)_refreshAirplaneMode;
- (void)_useCoreLocationProvider;
- (void)setLocationProvider:(id)arg1;
- (void)setAuthorizationRequestBlock:(id)arg1;
- (id)authorizationRequestBlock;
- (BOOL)matchInfoEnabled;
- (void)setEffectiveBundleIdentifier:(id)arg1;
- (id)effectiveBundleIdentifier;
- (void)setEffectiveBundle:(id)arg1;
- (void)locationProvider:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationProvider:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationProviderDidResumeLocationUpdates:(id)arg1;
- (void)locationProviderDidPauseLocationUpdates:(id)arg1;
- (BOOL)locationProviderShouldPauseLocationUpdates:(id)arg1;
- (void)locationProviderDidChangeAuthorizationStatus:(id)arg1;
- (void)locationProvider:(id)arg1 didReceiveError:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2;
- (void)dismissHeadingCalibrationDisplay;
- (int)headingOrientation;
- (void)setMatchInfoEnabled:(BOOL)arg1;
- (BOOL)isLocationServicesPreferencesDialogEnabled;
- (double)desiredAccuracy;
- (void)setLocationServicesPreferencesDialogEnabled:(BOOL)arg1;
- (void)setThrottledHeading:(id)arg1;
- (double)headingUpdateTimeInterval;
- (void)startHeadingUpdateWithObserver:(id)arg1;
- (double)expectedGpsUpdateInterval;
- (double)currentVehicleSpeed;
- (double)currentVehicleHeading;
- (BOOL)useCourseForHeading;
- (void)startLocationUpdateWithObserver:(id)arg1;
- (BOOL)isHeadingServicesAvailable;
- (void)stopLocationUpdateWithObserver:(id)arg1;
- (void)stopHeadingUpdateWithObserver:(id)arg1;
- (BOOL)isWiFiEnabled;
- (double)distanceFilter;
- (id)currentLocation;

@end
