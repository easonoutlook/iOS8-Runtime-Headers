/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices
 */

@class <VSSpeechSynthesizerDelegate>, VSSpeechConnection, VSKeepAlive, NSObject<OS_dispatch_queue>, NSString;

@interface VSSpeechSynthesizer : NSObject <VSSpeechConnectionDelegate> {
    VSKeepAlive *_keepAlive;
    VSKeepAlive *_inactiveKeepAlive;
    int _footprint;
    BOOL _useCustomVoice;
    int _gender;
    BOOL _useSharedSession;
    BOOL _audioSessionIDIsValid;
    unsigned int _audioSessionID;
    unsigned int _audioQueueFlags;
    NSObject<OS_dispatch_queue> *_queue;
    VSSpeechConnection *_speechConnection;
    struct { 
        unsigned int delegateStart : 1; 
        unsigned int delegateFinish : 1; 
        unsigned int delegateFinishWithPhonemesSpoken : 1; 
        unsigned int delegatePause : 1; 
        unsigned int delegateContinue : 1; 
        unsigned int delegateWillSpeak : 1; 
        unsigned int delegateStartWithRequest : 1; 
        unsigned int delegateFinishWithRequest : 1; 
        unsigned int delegateFinishWithPhonemesSpokenWithRequest : 1; 
        unsigned int delegatePauseWithRequest : 1; 
        unsigned int delegateContinueWithRequest : 1; 
        unsigned int delegateWillSpeakWithRequest : 1; 
        unsigned int willUseInput : 1; 
    } _synthesizerFlags;
    <VSSpeechSynthesizerDelegate> *_delegate;
    float _rate;
    float _pitch;
    float _volume;
    NSString *_voice;
}

@property <VSSpeechSynthesizerDelegate> * delegate;
@property float rate;
@property float pitch;
@property float volume;
@property(retain) NSString * voice;

+ (void)getVoiceInfoForLanguageCode:(id)arg1 footprint:(int)arg2 gender:(int)arg3 custom:(BOOL)arg4 reply:(id)arg5;
+ (void)getAutoDownloadedVoiceAssets:(id)arg1;
+ (void)setAutoDownloadedVoiceAssets:(id)arg1;
+ (void)downloadVoiceAsset:(id)arg1 progress:(id)arg2 completion:(id)arg3;
+ (void)getLocalVoiceAssets:(id)arg1;
+ (void)getAllVoiceAssets:(id)arg1;
+ (id)availableLanguageCodes;
+ (void)getLogToFile:(id)arg1;
+ (void)setLogToFile:(BOOL)arg1;
+ (id)availableVoices;
+ (BOOL)isSystemSpeaking;
+ (id)availableFootprintsForVoice:(id)arg1 languageCode:(id)arg2;
+ (id)availableVoicesForLanguageCode:(id)arg1;
+ (void)initialize;

- (void)setVoice:(id)arg1;
- (void)setRate:(float)arg1;
- (BOOL)continueSpeakingRequest:(id)arg1 withError:(id*)arg2;
- (BOOL)pauseSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(BOOL)arg3 error:(id*)arg4;
- (BOOL)pauseSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 error:(id*)arg3;
- (BOOL)stopSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(BOOL)arg3 error:(id*)arg4;
- (BOOL)stopSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 error:(id*)arg3;
- (BOOL)startSpeakingString:(id)arg1 toURL:(id)arg2 request:(id*)arg3 error:(id*)arg4;
- (BOOL)startSpeakingString:(id)arg1 request:(id*)arg2 error:(id*)arg3;
- (void)useAudioQueueFlags:(unsigned int)arg1;
- (void)useSharedAudioSession:(BOOL)arg1;
- (float)maximumRate;
- (float)minimumRate;
- (BOOL)continueSpeakingWithError:(id*)arg1;
- (BOOL)pauseSpeakingAtNextBoundary:(int)arg1 error:(id*)arg2;
- (BOOL)startSpeakingString:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (BOOL)startSpeakingString:(id)arg1 error:(id*)arg2;
- (void)connection:(id)arg1 speechRequest:(id)arg2 willSpeakMark:(int)arg3 inRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
- (void)connection:(id)arg1 speechRequest:(id)arg2 didStopAtEnd:(BOOL)arg3 phonemesSpoken:(id)arg4 error:(id)arg5;
- (void)connection:(id)arg1 speechRequestDidContinue:(id)arg2;
- (void)connection:(id)arg1 speechRequestDidPause:(id)arg2;
- (void)connection:(id)arg1 speechRequestDidStart:(id)arg2;
- (BOOL)_continueSpeakingRequest:(id)arg1 withError:(id*)arg2;
- (BOOL)_pauseSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(BOOL)arg3 error:(id*)arg4;
- (BOOL)pauseSpeakingAtNextBoundary:(int)arg1 synchronously:(BOOL)arg2 error:(id*)arg3;
- (BOOL)startSpeakingString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4;
- (void)setMaintainPersistentConnection:(BOOL)arg1;
- (BOOL)_stopSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(BOOL)arg3 error:(id*)arg4;
- (BOOL)_startSpeakingString:(id)arg1 orAttributedString:(id)arg2 toURL:(id)arg3 withLanguageCode:(id)arg4 request:(id*)arg5 error:(id*)arg6;
- (BOOL)useCustomVoice;
- (BOOL)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 error:(id*)arg3;
- (BOOL)startSpeakingAttributedString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4;
- (id)initForInputFeedback;
- (BOOL)stopSpeakingAtNextBoundary:(int)arg1 error:(id*)arg2;
- (void)setPitch:(float)arg1;
- (int)footprint;
- (float)pitch;
- (float)rate;
- (void)setVolume:(float)arg1;
- (float)volume;
- (BOOL)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 request:(id*)arg3 error:(id*)arg4;
- (BOOL)stopSpeakingAtNextBoundary:(int)arg1 synchronously:(BOOL)arg2 error:(id*)arg3;
- (void)useSpecificAudioSession:(unsigned int)arg1;
- (void)setFootprint:(int)arg1;
- (void)setUseCustomVoice:(BOOL)arg1;
- (void)setMaintainInactivePersistentConnection:(BOOL)arg1;
- (void).cxx_destruct;
- (void)_setDelegate:(id)arg1;
- (id)delegate;
- (void)setGender:(int)arg1;
- (int)gender;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)init;
- (BOOL)isSpeaking;
- (id)speechString;
- (id)voice;

@end
