/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSDKnob, TSDInteractiveCanvasController, TSDRep, TSDAutoscroll;

@interface TSDKnobTracker : NSObject <TSDLayoutManipulatingTracker> {
    TSDRep *mRep;
    TSDKnob *mKnob;
    struct CGPoint { 
        float x; 
        float y; 
    } mCurrentPosition;
    struct CGPoint { 
        float x; 
        float y; 
    } mKnobOffset;
    BOOL mDidBegin;
    BOOL mDidDrag;
    BOOL mDragEnding;
    BOOL mEndedOperationDueToESC;
    BOOL mIsInspectorDrivenTracking;
    TSDAutoscroll *mAutoscroll;
}

@property(readonly) TSDInteractiveCanvasController * icc;
@property(retain) TSDRep * rep;
@property(retain) TSDKnob * knob;
@property(readonly) BOOL didBegin;
@property BOOL didDrag;
@property BOOL dragEnding;
@property(readonly) double delay;
@property struct CGPoint { float x1; float x2; } currentPosition;
@property(readonly) BOOL endedOperationDueToESC;
@property BOOL isInspectorDrivenTracking;
@property(readonly) struct CGPoint { float x1; float x2; } knobOffset;
@property(retain) TSDAutoscroll * autoscroll;


- (id)knob;
- (struct CGPoint { float x1; float x2; })currentPosition;
- (double)delay;
- (void)autoscrollWillNotStart;
- (void)dealloc;
- (BOOL)didBegin;
- (void)setCurrentPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setAutoscroll:(id)arg1;
- (id)autoscroll;
- (struct CGPoint { float x1; float x2; })knobOffset;
- (BOOL)endedOperationDueToESC;
- (void)setDragEnding:(BOOL)arg1;
- (int)allowedAutoscrollDirections;
- (float)unscaledStartAutoscrollThreshold;
- (void)updateAfterAutoscroll:(id)arg1;
- (void)i_setKnobOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)willEndMovingKnobDueToESC;
- (BOOL)shouldEndMovingKnobOnESC;
- (BOOL)shouldUseKnobOffset;
- (BOOL)allowHUDToDisplay;
- (id)icc;
- (void)setDidDrag:(BOOL)arg1;
- (void)i_resetCurrentPositionToKnobPositionIfAppropriate;
- (void)setRep:(id)arg1;
- (void)setKnob:(id)arg1;
- (BOOL)didDrag;
- (struct CGPoint { float x1; float x2; })convertKnobPositionToUnscaledCanvas:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformInRootForStandardKnobs;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })currentBoundsForStandardKnobs;
- (unsigned long long)enabledKnobMask;
- (BOOL)operationShouldBeDynamic;
- (BOOL)supportsAlignmentGuides;
- (void)commitChangesForReps:(id)arg1;
- (void)setIsInspectorDrivenTracking:(BOOL)arg1;
- (BOOL)isInspectorDrivenTracking;
- (BOOL)shouldHideOtherKnobs;
- (void)moveKnobToRepPosition:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)shouldHideSelectionHighlight;
- (BOOL)shouldOpenCommandGroupToCommitChangesForReps:(id)arg1;
- (BOOL)wantsAutoscroll;
- (void)moveKnobToCanvasPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)changeDynamicLayoutsForReps:(id)arg1;
- (void)endMovingKnob;
- (BOOL)dragEnding;
- (void)beginMovingKnob;
- (id)rep;
- (id)initWithRep:(id)arg1 knob:(id)arg2;

@end
