/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/MultipeerConnectivity.framework/MultipeerConnectivity
 */

@class NSArray, <MCSessionDelegate>, MCPeerID, <MCSessionPrivateDelegate>, NSObject<OS_dispatch_queue>, NSMutableDictionary;

@interface MCSession : NSObject  {
    <MCSessionDelegate> *_delegate;
    <MCSessionPrivateDelegate> *_privateDelegate;
    MCPeerID *_myPeerID;
    NSArray *_securityIdentity;
    int _encryptionPreference;
    struct OpaqueGCKSession { } *_gckSession;
    struct OpaqueAGPSession { } *_agpSession;
    unsigned int _gckPID;
    NSMutableDictionary *_peerIDMap;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSMutableDictionary *_peerStates;
    NSMutableDictionary *_connectionPendingPeerEvents;
    NSObject<OS_dispatch_queue> *_callbackQueue;
}

@property <MCSessionPrivateDelegate> * privateDelegate;
@property <MCSessionDelegate> * delegate;
@property(readonly) MCPeerID * myPeerID;
@property(readonly) NSArray * securityIdentity;
@property(readonly) int encryptionPreference;
@property(readonly) NSArray * connectedPeers;
@property struct OpaqueGCKSession { }* gckSession;
@property struct OpaqueAGPSession { }* agpSession;
@property unsigned int gckPID;
@property(retain) NSMutableDictionary * peerIDMap;
@property(retain) NSObject<OS_dispatch_queue> * syncQueue;
@property <MCSessionPrivateDelegate> * privateDelegate;
@property(retain) NSMutableDictionary * peerStates;
@property(retain) NSMutableDictionary * connectionPendingPeerEvents;
@property(retain) NSObject<OS_dispatch_queue> * callbackQueue;

+ (id)stringForMCSessionSendDataMode:(int)arg1;
+ (id)stringForSessionState:(int)arg1;

- (void)setSyncQueue:(id)arg1;
- (id)syncQueue;
- (void)setPrivateDelegate:(id)arg1;
- (id)privateDelegate;
- (unsigned int)gckPID;
- (struct OpaqueGCKSession { }*)gckSession;
- (void)setCallbackQueue:(id)arg1;
- (id)callbackQueue;
- (void)disconnect;
- (id)delegate;
- (void)peerDidDeclineInvitation:(id)arg1;
- (void)setConnectionPendingPeerEvents:(id)arg1;
- (id)connectionPendingPeerEvents;
- (void)setPeerStates:(id)arg1;
- (void)setPeerIDMap:(id)arg1;
- (id)peerIDMap;
- (void)setGckPID:(unsigned int)arg1;
- (void)setAgpSession:(struct OpaqueAGPSession { }*)arg1;
- (void)setGckSession:(struct OpaqueGCKSession { }*)arg1;
- (id)startStreamWithName:(id)arg1 toPeer:(id)arg2 error:(id*)arg3;
- (id)sendResourceAtURL:(id)arg1 withName:(id)arg2 toPeer:(id)arg3 withCompletionHandler:(id)arg4;
- (BOOL)sendData:(id)arg1 toPeers:(id)arg2 withMode:(int)arg3 error:(id*)arg4;
- (void)cancelConnectPeer:(id)arg1;
- (void)connectPeer:(id)arg1 withNearbyConnectionData:(id)arg2;
- (void)nearbyConnectionDataForPeer:(id)arg1 withCompletionHandler:(id)arg2;
- (void)cancelOutgoingStream:(id)arg1 toPeer:(id)arg2;
- (void)syncSendData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3;
- (void)syncConnectPeer:(id)arg1 withConnectionData:(id)arg2;
- (BOOL)isEncryptionPreferenceCompatible:(int)arg1;
- (void)syncGetConnectionDataForPeerState:(id)arg1 completionHandler:(id)arg2;
- (id)initWithPeer:(id)arg1 securityIdentity:(id)arg2 encryptionPreference:(int)arg3;
- (void)cancelIncomingStream:(id)arg1 fromPeer:(id)arg2;
- (void)syncSendXDataStreamOpenResponseToPID:(unsigned int)arg1 withRequestID:(unsigned int)arg2 streamID:(unsigned int)arg3;
- (void)syncHandleXDataDataPacket:(char *)arg1 packetSize:(int)arg2 forPeer:(id)arg3 state:(id)arg4;
- (void)syncCloseStreamsForPeer:(id)arg1;
- (void)syncPeer:(id)arg1 changeStateTo:(int)arg2 shouldForceCallback:(BOOL)arg3;
- (void)syncHandleNetworkEvent:(struct { int x1; char *x2; int x3; unsigned int x4; }*)arg1 pid:(unsigned int)arg2 freeEventWhenDone:(BOOL*)arg3;
- (void)startConnectionWithIndirectPID:(unsigned int)arg1;
- (void)syncSendXDataPeerIDPushToPID:(unsigned int)arg1;
- (void)syncCancelOutgoingStream:(id)arg1 toPeer:(id)arg2;
- (void)syncCancelIncomingStream:(id)arg1 fromPeer:(id)arg2;
- (void)syncSendXDataStreamCloseFromReceiverToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;
- (void)syncSendXDataConnectionBlobPushToPID:(unsigned int)arg1 connectionBlob:(id)arg2;
- (void)syncCloseIncomingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 reason:(int)arg5 removeObserver:(BOOL)arg6;
- (id)connectedPeers;
- (id)stringForEncryptionPreference:(int)arg1;
- (id)securityIdentity;
- (id)myPeerID;
- (int)encryptionPreference;
- (struct OpaqueAGPSession { }*)agpSession;
- (void)syncStartStreamWithName:(id)arg1 toPeer:(id)arg2 mcFD:(int)arg3 isResource:(BOOL)arg4;
- (void)syncCloseOutgoingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 removeObserver:(BOOL)arg5;
- (void)syncSendXDataStreamCloseFromSenderToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;
- (id)initWithPeer:(id)arg1;
- (id)description;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)peerStates;

@end
