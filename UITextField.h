/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSLayoutConstraint, NSDictionary, UITextFieldLabel, UIImageView, UITextRange, NSString, <UITextFieldDelegate>, UITextFieldBackgroundView, NSAttributedString, UITextInteractionAssistant, UILabel, UITextFieldAtomBackgroundView, UITextPosition, MPUTextContainerContentSizeUpdater, UITextInputTraits, <UITextInputDelegate>, _UICascadingTextStorage, UIButton, UIFont, <UITextInputTokenizer>, UIImage, UIColor, UITextFieldBorderView, _UIBaselineLayoutStrut, UIView;

@interface UITextField : UIControl <UIKeyboardInput, _UILayoutBaselineUpdating, UITextInputTraits_Private, UIPopoverControllerDelegate, UITextInput, NSCoding, ABText, MPUAutoupdatingTextContainer> {
    _UICascadingTextStorage *_textStorage;
    int _borderStyle;
    float _minimumFontSize;
    id _delegate;
    UIImage *_background;
    UIImage *_disabledBackground;
    int _clearButtonMode;
    UIView *_leftView;
    int _leftViewMode;
    UIView *_rightView;
    int _rightViewMode;
    UITextInputTraits *_traits;
    UITextInputTraits *_nonAtomTraits;
    float _fullFontSize;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _padding;
    struct _NSRange { 
        unsigned int location; 
        unsigned int length; 
    } _selectionRangeWhenNotEditing;
    int _scrollXOffset;
    int _scrollYOffset;
    float _progress;
    UIButton *_clearButton;
    struct CGSize { 
        float width; 
        float height; 
    } _clearButtonOffset;
    struct CGSize { 
        float width; 
        float height; 
    } _leftViewOffset;
    struct CGSize { 
        float width; 
        float height; 
    } _rightViewOffset;
    UITextFieldBorderView *_backgroundView;
    UITextFieldBorderView *_disabledBackgroundView;
    UITextFieldBackgroundView *_systemBackgroundView;
    UITextFieldLabel *_displayLabel;
    UITextFieldLabel *_placeholderLabel;
    UITextFieldLabel *_suffixLabel;
    UITextFieldLabel *_prefixLabel;
    UIImageView *_iconView;
    UILabel *_label;
    float _labelOffset;
    UITextInteractionAssistant *_interactionAssistant;
    UIView *_inputView;
    UIView *_inputAccessoryView;
    UITextFieldAtomBackgroundView *_atomBackgroundView;
    struct { 
        unsigned int verticallyCenterText : 1; 
        unsigned int isAnimating : 4; 
        unsigned int inactiveHasDimAppearance : 1; 
        unsigned int becomesFirstResponderOnClearButtonTap : 1; 
        unsigned int clearsPlaceholderOnBeginEditing : 1; 
        unsigned int adjustsFontSizeToFitWidth : 1; 
        unsigned int fieldEditorAttached : 1; 
        unsigned int canBecomeFirstResponder : 1; 
        unsigned int shouldSuppressShouldBeginEditing : 1; 
        unsigned int inResignFirstResponder : 1; 
        unsigned int undoDisabled : 1; 
        unsigned int explicitAlignment : 1; 
        unsigned int implementsCustomDrawing : 1; 
        unsigned int needsClearing : 1; 
        unsigned int suppressContentChangedNotification : 1; 
        unsigned int allowsEditingTextAttributes : 1; 
        unsigned int usesAttributedText : 1; 
        unsigned int backgroundViewState : 2; 
        unsigned int clearingBehavior : 2; 
    } _textFieldFlags;
    BOOL _deferringBecomeFirstResponder;
    BOOL _avoidBecomeFirstResponder;
    BOOL _setSelectionRangeAfterFieldEditorIsAttached;
    NSLayoutConstraint *_baselineLayoutConstraint;
    _UIBaselineLayoutStrut *_baselineLayoutLabel;
}

@property(setter=MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:) BOOL MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
@property(retain) UIFont * font;
@property(copy) NSAttributedString * attributedText;
@property(readonly) MPUTextContainerContentSizeUpdater * MPU_contentSizeUpdater;
@property(copy) NSString * ab_text;
@property(copy) NSDictionary * ab_textAttributes;
@property(copy) NSString * text;
@property(copy) NSAttributedString * attributedText;
@property(retain) UIColor * textColor;
@property(retain) UIFont * font;
@property int textAlignment;
@property int borderStyle;
@property(copy) NSDictionary * defaultTextAttributes;
@property(copy) NSString * placeholder;
@property(copy) NSAttributedString * attributedPlaceholder;
@property BOOL clearsOnBeginEditing;
@property BOOL adjustsFontSizeToFitWidth;
@property float minimumFontSize;
@property <UITextFieldDelegate> * delegate;
@property(retain) UIImage * background;
@property(retain) UIImage * disabledBackground;
@property(getter=isEditing,readonly) BOOL editing;
@property BOOL allowsEditingTextAttributes;
@property(copy) NSDictionary * typingAttributes;
@property int clearButtonMode;
@property(retain) UIView * leftView;
@property int leftViewMode;
@property(retain) UIView * rightView;
@property int rightViewMode;
@property(retain) UIView * inputView;
@property(retain) UIView * inputAccessoryView;
@property BOOL clearsOnInsertion;
@property(setter=_setBaselineLayoutConstraint:,retain) NSLayoutConstraint * _baselineLayoutConstraint;
@property(setter=_setBaselineLayoutLabel:,retain) _UIBaselineLayoutStrut * _baselineLayoutLabel;
@property int autocapitalizationType;
@property int autocorrectionType;
@property int spellCheckingType;
@property int keyboardType;
@property int keyboardAppearance;
@property int returnKeyType;
@property BOOL enablesReturnKeyAutomatically;
@property(getter=isSecureTextEntry) BOOL secureTextEntry;
@property struct __CFCharacterSet { }* textTrimmingSet;
@property(retain) UIColor * insertionPointColor;
@property(retain) UIColor * selectionBarColor;
@property(retain) UIColor * selectionHighlightColor;
@property(retain) UIImage * selectionDragDotImage;
@property unsigned int insertionPointWidth;
@property int textLoupeVisibility;
@property int textSelectionBehavior;
@property id textSuggestionDelegate;
@property BOOL isSingleLineDocument;
@property BOOL contentsIsSingleValue;
@property BOOL acceptsEmoji;
@property BOOL forceEnableDictation;
@property int emptyContentReturnKeyType;
@property BOOL returnKeyGoesToNextResponder;
@property BOOL acceptsFloatingKeyboard;
@property BOOL acceptsSplitKeyboard;
@property BOOL displaySecureTextUsingPlainText;
@property BOOL learnsCorrections;
@property int shortcutConversionType;
@property BOOL suppressReturnKeyStyling;
@property BOOL useInterfaceLanguageForLocalization;
@property BOOL deferBecomingResponder;
@property BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property(copy) NSString * autocorrectionContext;
@property(copy) NSString * responseContext;
@property(copy) UITextRange * selectedTextRange;
@property(readonly) UITextRange * markedTextRange;
@property(copy) NSDictionary * markedTextStyle;
@property(readonly) UITextPosition * beginningOfDocument;
@property(readonly) UITextPosition * endOfDocument;
@property <UITextInputDelegate> * inputDelegate;
@property(readonly) <UITextInputTokenizer> * tokenizer;
@property(readonly) UIView * textInputView;
@property int selectionAffinity;

+ (BOOL)_isCompatibilityTextField;
+ (BOOL)_isDisplayingShortcutViewController;

- (void)_setPasscodeStyleAlpha:(float)arg1;
- (id)disabledBackground;
- (void)_setBaselineLayoutLabel:(id)arg1;
- (id)_baselineLayoutLabel;
- (id)_baselineLayoutConstraint;
- (void)_setBackgroundStrokeWidth:(float)arg1;
- (void)_setBackgroundFillColor:(id)arg1;
- (void)_setBackgroundStrokeColor:(id)arg1;
- (id)selectedAttributedText;
- (void)setLabelOffset:(float)arg1;
- (void)setBecomesFirstResponderOnClearButtonTap:(BOOL)arg1;
- (void)_resetSelectionUI;
- (void)_clearSelectionUI;
- (void)setInactiveHasDimAppearance:(BOOL)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRect;
- (void)setClearButtonStyle:(int)arg1;
- (void)setTextAutorresizesToFit:(BOOL)arg1;
- (void)setAutoresizesTextToFit:(BOOL)arg1;
- (id)_dictationInterpretations;
- (void)fieldEditorDidChangeSelection:(id)arg1;
- (void)setClearsPlaceholderOnBeginEditing:(BOOL)arg1;
- (void)_setPrefix:(id)arg1;
- (void)_updateSuffix:(id)arg1;
- (id)attributedPlaceholder;
- (void)setAttributedPlaceholder:(id)arg1;
- (id)defaultTextAttributes;
- (void)setDefaultTextAttributes:(id)arg1;
- (id)_textLabelView;
- (void)_setSystemBackgroundViewActive:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })_rightViewOffset;
- (struct CGPoint { float x1; float x2; })_scrollOffset;
- (id)actualFont;
- (BOOL)_isShowingPrefix;
- (void)_createInteractionAssistant;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })adjustedCaretRectForCaretRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isUndoEnabled;
- (BOOL)_implementsCustomDrawing;
- (void)drawBorder:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_endedEditing;
- (void)_applicationResuming:(id)arg1;
- (void)drawPrefixInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawSuffixInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawPlaceholderInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)finishedSettingPlaceholder;
- (void)createPlaceholderIfNecessary;
- (void)_invalidateBaselineLayoutConstraints;
- (void)_setAttributedText:(id)arg1 onFieldEditorAndSetCaretSelectionAfterText:(BOOL)arg2;
- (void)finishedSettingTextOrAttributedText;
- (BOOL)_textNeedsSanitizing:(id)arg1;
- (id)_attributedText;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })borderRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_updateForPasscodeAppearance;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_prefixFrame;
- (BOOL)clearsPlaceholderOnBeginEditing;
- (void)_updateAutosizeStyleIfNeeded;
- (void)_updateAtomBackground;
- (void)_updatePlaceholderPosition;
- (BOOL)_isShowingPlaceholder;
- (void)_setUpBaselineLayoutConstraints;
- (float)_baselineLayoutConstraintConstant;
- (float)_marginTop;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_baselineLeftViewRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (int)rightViewMode;
- (int)leftViewMode;
- (BOOL)_showsClearButtonWhenEmpty;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_atomBackgroundViewFrame;
- (BOOL)_showsAtomBackground;
- (BOOL)_hasContent;
- (int)borderStyle;
- (BOOL)_heightShouldBeMini;
- (void)setFont:(id)arg1 fullFontSize:(float)arg2;
- (BOOL)_showsRightView;
- (BOOL)_showsClearButton:(BOOL)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })clearButtonRect;
- (void)_updateAtomTextColor;
- (id)_copyFont:(id)arg1 newSize:(float)arg2 maxSize:(float)arg3;
- (float)actualMinimumFontSize;
- (void)_syncTypingAttributesWithDefaultAttribute:(id)arg1;
- (id)customOverlayContainer;
- (void)setSelectionRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)_initialScrollDidFinish:(id)arg1;
- (void)scrollTextFieldToVisible;
- (BOOL)_shouldEndEditing;
- (id)clearButton;
- (int)clearButtonMode;
- (void)_createBaselineLayoutLabelIfNecessary;
- (struct CGSize { float x1; float x2; })_textSizeUsingFullFontSize:(BOOL)arg1;
- (void)_sizeChanged:(BOOL)arg1;
- (void)_setNeedsStyleRecalc;
- (void)_stopObservingFieldEditorScroll;
- (BOOL)clearsOnBeginEditing;
- (void)_updateTextLabel;
- (id)createPlaceholderLabelWithFont:(id)arg1 andTextAlignment:(int)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_frameForLabel:(id)arg1 inTextRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (id)createTextLabelWithTextColor:(id)arg1;
- (void)_setBaselineLayoutConstraint:(id)arg1;
- (void)setAtomStyle:(int)arg1;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forLabel:(id)arg2;
- (BOOL)_inPopover;
- (void)_selectionMayChange:(id)arg1;
- (struct CGSize { float x1; float x2; })_textSize;
- (void)_updateBaselineInformationDependentOnBounds;
- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass;
- (id)_placeholderView;
- (void)setClearsOnBeginEditing:(BOOL)arg1;
- (float)paddingBottom;
- (void)setPaddingRight:(float)arg1;
- (void)setPaddingBottom:(float)arg1;
- (unsigned int)offsetInMarkedTextForSelection:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_setSuffix:(id)arg1 withColor:(id)arg2;
- (id)_textInputViewForAddingGestureRecognizers;
- (BOOL)_useGesturesForEditableContent;
- (void)setClearingBehavior:(int)arg1;
- (void)setDrawsAsAtom:(BOOL)arg1;
- (int)clearingBehavior;
- (id)_text;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)isAccessibilityElementByDefault;
- (Class)_systemBackgroundViewClass;
- (Class)_placeholderLabelClass;
- (int)_suffixLabelTextAlignment;
- (void)_clearBackgroundViews;
- (void)_updateBackgroundViewsAnimated:(BOOL)arg1;
- (float)paddingRight;
- (int)_currentTextAlignment;
- (BOOL)_showsLeftView;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_suffixFrame;
- (BOOL)_hasSuffixField;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_availableTextRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forEditing:(BOOL)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })clearButtonRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })_clearButtonSize;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })placeholderRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)_fieldEditorAttached;
- (BOOL)_showsClearButtonWhenNonEmpty:(BOOL)arg1;
- (float)paddingLeft;
- (id)_clearButtonImageForState:(unsigned int)arg1;
- (void)_updateButtons;
- (id)_clearButton;
- (void)setPaddingLeft:(float)arg1;
- (void)_setEnabled:(BOOL)arg1 animated:(BOOL)arg2;
- (id)searchText;
- (void)setClearButtonMode:(int)arg1;
- (void)setDisabledBackground:(id)arg1;
- (void)setLeftViewMode:(int)arg1;
- (id)_placeholderLabel;
- (void)_activateSelectionView;
- (void)__resumeBecomeFirstResponder;
- (id)_systemBackgroundView;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })leftViewRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)_partsShouldBeMini;
- (void)_setRightViewOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)setRightViewMode:(int)arg1;
- (void)setPaddingTop:(float)arg1;
- (float)paddingTop;
- (void)setClearButtonOffset:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })clearButtonOffset;
- (void)_setLeftViewOffset:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })_leftViewOffset;
- (id)placeholder;
- (void)setBackground:(id)arg1;
- (id)background;
- (void)setTextCentersHorizontally:(BOOL)arg1;
- (void)setTextCentersVertically:(BOOL)arg1;
- (void)setUndoEnabled:(BOOL)arg1;
- (void)_clearButtonClicked:(id)arg1;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)setContinuousSpellCheckingEnabled:(BOOL)arg1;
- (id)rightView;
- (id)leftView;
- (void)setRightView:(id)arg1;
- (void)setLeftView:(id)arg1;
- (BOOL)_shouldSendContentChangedNotificationsIfOnlyMarkedTextChanged;
- (void)setPaddingTop:(float)arg1 paddingLeft:(float)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_availableTextRectExcludingButtonsForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)_placeholderColor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rightViewRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })iconRect;
- (void)setBorderStyle:(int)arg1;
- (void)setIcon:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (float)shadowBlur;
- (void)setShadowBlur:(float)arg1;
- (float)minimumFontSize;
- (void)setMinimumFontSize:(float)arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (id)automaticallySelectedOverlay;
- (id)documentFragmentForPasteboardItemAtIndex:(int)arg1;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)_reanalyze:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_promptForReplace:(id)arg1;
- (void)select:(id)arg1;
- (id)selectedText;
- (void)disableClearsOnInsertion;
- (BOOL)clearsOnInsertion;
- (struct CGPoint { float x1; float x2; })constrainedPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)hasSelection;
- (void)_showTextStyleOptions:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleBoldface:(id)arg1;
- (void)_addShortcut:(id)arg1;
- (void)_define:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)replace:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (void)layoutTilesNow;
- (void)setClearsOnInsertion:(BOOL)arg1;
- (void)selectAll:(id)arg1;
- (void)setInputAccessoryView:(id)arg1;
- (void)setInputView:(id)arg1;
- (id)_proxyTextInput;
- (id)webView;
- (BOOL)allowsEditingTextAttributes;
- (void)setAllowsEditingTextAttributes:(BOOL)arg1;
- (void)setLabel:(id)arg1;
- (id)viewForBaselineLayout;
- (void)setAttributes:(id)arg1 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (BOOL)_requiresKeyboardResetOnReload;
- (id)inputAccessoryView;
- (id)inputView;
- (BOOL)canResignFirstResponder;
- (void)_resignFirstResponder;
- (void)_becomeFirstResponder;
- (void)setAnimating:(BOOL)arg1;
- (void)setPlaceholder:(id)arg1;
- (id)_inputController;
- (BOOL)hasMarkedText;
- (unsigned int)characterOffsetAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })selectionRange;
- (void)selectAll;
- (void)startAutoscroll:(struct CGPoint { float x1; float x2; })arg1;
- (void)setKeyboardAppearance:(int)arg1;
- (id)textStylingAtPosition:(id)arg1 inDirection:(int)arg2;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)setSecureTextEntry:(BOOL)arg1;
- (void)endSelectionChange;
- (void)beginSelectionChange;
- (id)metadataDictionariesForDictationResults;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(BOOL)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (id)insertDictationResultPlaceholder;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)characterRangeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1 withinRange:(id)arg2;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)selectionRectsForRange:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (void)setBaseWritingDirection:(int)arg1 forRange:(id)arg2;
- (int)baseWritingDirectionForPosition:(id)arg1 inDirection:(int)arg2;
- (id)tokenizer;
- (void)setInputDelegate:(id)arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(int)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(int)arg2;
- (int)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (int)comparePosition:(id)arg1 toPosition:(id)arg2;
- (id)positionFromPosition:(id)arg1 inDirection:(int)arg2 offset:(int)arg3;
- (id)positionFromPosition:(id)arg1 offset:(int)arg2;
- (void)unmarkText;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (id)markedTextStyle;
- (id)markedTextRange;
- (id)selectedTextRange;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)deleteBackward;
- (void)insertText:(id)arg1;
- (float)_passcodeStyleAlpha;
- (void)clearText;
- (BOOL)hasText;
- (int)atomStyle;
- (BOOL)drawsAsAtom;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 animated:(BOOL)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)setSelectedTextRange:(id)arg1;
- (id)inputDelegate;
- (id)textInRange:(id)arg1;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)endOfDocument;
- (id)beginningOfDocument;
- (id)typingAttributes;
- (int)textAlignment;
- (void)attachFieldEditor:(id)arg1;
- (void)willAttachFieldEditor:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })editRect;
- (void)takeTraitsFrom:(id)arg1;
- (void)setTypingAttributes:(id)arg1;
- (void)willDetachFieldEditor:(id)arg1;
- (id)textInputView;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })editingRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)cancelAutoscroll;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionClipRect;
- (id)textColor;
- (id)textInputTraits;
- (void)selectAllFromFieldEditor:(id)arg1;
- (void)_sanitizeText:(id)arg1;
- (BOOL)fieldEditor:(id)arg1 shouldInsertText:(id)arg2 replacingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (struct _NSRange { unsigned int x1; unsigned int x2; })fieldEditor:(id)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 toCharacterRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (void)fieldEditorDidChange:(id)arg1;
- (void)keyboardInputChangedSelection:(id)arg1;
- (BOOL)keyboardInputChanged:(id)arg1;
- (BOOL)keyboardInputShouldDelete:(id)arg1;
- (BOOL)keyboardInput:(id)arg1 shouldReplaceTextInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 replacementText:(id)arg3;
- (BOOL)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(BOOL)arg3;
- (id)selectionView;
- (id)interactionAssistant;
- (BOOL)_isPasscodeStyle;
- (struct CGPoint { float x1; float x2; })_originForTextFieldLabel:(id)arg1;
- (BOOL)_shouldObscureInput;
- (id)_fieldEditor;
- (id)textLabel;
- (BOOL)isEditing;
- (id)font;
- (BOOL)adjustsFontSizeToFitWidth;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (void)_updateLabel;
- (id)attributedText;
- (void)setContentVerticalAlignment:(int)arg1;
- (id)shadowColor;
- (void)setAttributedText:(id)arg1;
- (struct CGSize { float x1; float x2; })shadowOffset;
- (void)setProgress:(float)arg1;
- (id)_scriptingInfo;
- (void)willMoveToWindow:(id)arg1;
- (void)tintColorDidChange;
- (BOOL)canBecomeFirstResponder;
- (BOOL)_canDrawContent;
- (void)_encodeBackgroundColorWithCoder:(id)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)_windowBecameKey;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)setShadowColor:(id)arg1;
- (void)setText:(id)arg1;
- (id)text;
- (void)setTextAlignment:(int)arg1;
- (void)setFont:(id)arg1;
- (void)setTextColor:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_responderSelectionRectForWindow:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_responderExternalTouchRectForWindow:(id)arg1;
- (BOOL)isEditable;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)_physicalButtonsCancelled:(id)arg1 withEvent:(id)arg2;
- (void)_physicalButtonsEnded:(id)arg1 withEvent:(id)arg2;
- (BOOL)becomeFirstResponder;
- (void)decreaseSize:(id)arg1;
- (void)increaseSize:(id)arg1;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (id)methodSignatureForSelector:(SEL)arg1;
- (BOOL)resignFirstResponder;
- (id)undoManager;
- (void)_physicalButtonsBegan:(id)arg1 withEvent:(id)arg2;
- (BOOL)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)_backgroundView;
- (id)delegate;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (void)layoutSubviews;
- (struct CGSize { float x1; float x2; })_intrinsicSizeWithinSize:(struct CGSize { float x1; float x2; })arg1;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (void)_populateArchivedSubviews:(id)arg1;
- (id)backgroundColor;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)ab_textAttributes;
- (id)ab_text;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;
- (BOOL)isReallyFirstResponder;
- (void)configureFromScriptTextField:(id)arg1;
- (id)MPU_contentSizeUpdater;
- (void)MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:(BOOL)arg1;
- (BOOL)MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
- (void)rc_resignFirstResponderWithoutDismissingKeyboardForDuration:(double)arg1 completionBlock:(id)arg2;
- (void)rc_copyKeyboardSettingsFromTextField:(id)arg1;

@end
