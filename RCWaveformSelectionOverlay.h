/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
 */

@class RCOverlayBarLayer, NSMutableDictionary, <RCWaveformSelectionOverlayDelegate>, RCUIConfiguration, CALayer, RCTextLayer;

@interface RCWaveformSelectionOverlay : UIView  {
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _selectionAreaInsets;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _selectionRect;
    RCOverlayBarLayer *_beginTimeSelection;
    RCOverlayBarLayer *_endTimeSelection;
    CALayer *_middleSelectionOverlay;
    RCOverlayBarLayer *_currentTimeBar;
    RCTextLayer *_beginTimeLayer;
    RCTextLayer *_endTimeLayer;
    BOOL _beginTimeLayerOffsetForThumb;
    BOOL _endTimeLayerOffsetForThumb;
    NSMutableDictionary *_trackedTouches;
    double _requestedAnimatedLayoutDuration;
    BOOL _requestedNonAnimatedLayout;
    BOOL _sublayersCreated;
    BOOL _editingEnabled;
    BOOL _displayingSelectionTimes;
    <RCWaveformSelectionOverlayDelegate> *_delegate;
    RCUIConfiguration *_UIConfiguration;
    double _selectedTimeRangeMinimumDuration;
    double _selectedTimeRangeMaximumDuration;
    double _assetCurrentTime;
    double _assetDuration;
    double _trackedAssetCurrentTime;
    struct { 
        double beginTime; 
        double endTime; 
    } _selectedTimeRange;
}

@property <RCWaveformSelectionOverlayDelegate> * delegate;
@property(readonly) struct { double x1; double x2; } selectedTimeRange;
@property double selectedTimeRangeMinimumDuration;
@property double selectedTimeRangeMaximumDuration;
@property double assetCurrentTime;
@property double assetDuration;
@property(copy) RCUIConfiguration * UIConfiguration;
@property(readonly) float currentTimeIndicatorCoordinate;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } selectionRect;
@property(getter=isEditingEnabled) BOOL editingEnabled;
@property(getter=isDisplayingSelectionTimes) BOOL displayingSelectionTimes;
@property(readonly) int beginTimeIndicatorSelectionAffinity;
@property(readonly) int endTimeIndicatorSelectionAffinity;
@property double trackedAssetCurrentTime;


- (double)trackedAssetCurrentTime;
- (BOOL)isEditingEnabled;
- (double)assetDuration;
- (double)selectedTimeRangeMaximumDuration;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_middleTimeRectWithFont:(id)arg1;
- (float)_minimumOverlayWidth;
- (BOOL)_drawsSelectionForWidth:(float)arg1;
- (BOOL)_shouldOffsetSelectionBarTypeForThumb:(int)arg1;
- (BOOL)__shouldDisplayEndTimeText;
- (BOOL)__shouldDisplayBeginTimeText;
- (float)_minimumOverlaySelectionWidth;
- (void)_updateSelectedTimeRangeForTrackedTouchesAnimated:(BOOL)arg1;
- (BOOL)_beginTrackingSelectionBar:(id)arg1 selectionBarType:(int)arg2 withTouch:(id)arg3;
- (void)_clearStaleTouches;
- (void)setTrackedAssetCurrentTime:(double)arg1;
- (id)_hitSelectionForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_alternateEndTimeRectWithSizedTextLayer:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_endTimeRectWithSizedTextLayer:(id)arg1 isOffsetForThumb:(BOOL*)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_alternateBeginTimeRectWithSizedTextLayer:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_beginTimeRectWithSizedTextLayer:(id)arg1 isOffsetForThumb:(BOOL*)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionHighlightBounds;
- (float)_effectiveSelectionWidth;
- (void)_createSublayersIfNeeded;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionBoundsIncludingKnobs;
- (BOOL)_shouldDisplayEndTimeText;
- (BOOL)_shouldDisplayBeginTimeText;
- (void)setDisplayingSelectionTimes:(BOOL)arg1;
- (id)_touchTrackingInfoForSelectionBarTye:(int)arg1;
- (void)setSelectionRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionRectForSelectedTimeRange:(struct { double x1; double x2; })arg1;
- (void)_setWantsAnimatedLayoutDuration:(double)arg1;
- (void)_autoUpdateIsDisplayingSelectionTimes;
- (void)_clearSublayers;
- (void)setAssetCurrentTime:(double)arg1;
- (void)reloadSelectionOffsets;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1 withAnimationDuration:(double)arg2;
- (double)selectedTimeRangeMinimumDuration;
- (int)endTimeIndicatorSelectionAffinity;
- (int)beginTimeIndicatorSelectionAffinity;
- (BOOL)isDisplayingSelectionTimes;
- (double)assetCurrentTime;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1;
- (void)setSelectedTimeRangeMinimumDuration:(double)arg1;
- (id)initWithDelegate:(id)arg1 height:(float)arg2 selectionAreaInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg3;
- (void)setEditingEnabled:(BOOL)arg1;
- (void)setSelectedTimeRangeMaximumDuration:(double)arg1;
- (void)setAssetDuration:(double)arg1;
- (id)UIConfiguration;
- (void)setUIConfiguration:(id)arg1;
- (float)currentTimeIndicatorCoordinate;
- (struct { double x1; double x2; })selectedTimeRange;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })selectionRect;
- (void).cxx_destruct;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (id)delegate;
- (void)layoutSubviews;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;

@end
