/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@interface TSTTileIDKeyDict : TSPContainedObject  {
    struct hash_map<unsigned long, SFUtility::ObjcSharedPtr<NSObject>, TSTIntHasher, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, SFUtility::ObjcSharedPtr<NSObject> > > > { struct __hash_table<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, TSTIntHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *> > > { struct __hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> *> { struct __hash_node<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, TSTIntHasher, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned long, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::equal_to<unsigned long>, true> > { float x_4_2_1; } x_1_1_4; } x1; } *mMap;
}


- (void)removeAllTiles;
- (id)initWithOwner:(id)arg1;
- (int)count;
- (void)dealloc;
- (void)makeTilesPerformSelector:(SEL)arg1;
- (void)applyFunction:(int (*)())arg1 withState:(void*)arg2;
- (void)removeTileForID:(struct { unsigned short x1; unsigned short x2; })arg1;
- (void)setTile:(id)arg1 forID:(struct { unsigned short x1; unsigned short x2; })arg2;
- (id)tileForID:(struct { unsigned short x1; unsigned short x2; })arg1;
- (id)initWithArchive:(const struct TileStorage { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct RepeatedPtrField<TST::TileStorage_Tile> { void **x_3_1_1; int x_3_1_2; int x_3_1_3; int x_3_1_4; } x3; int x4; unsigned int x5[1]; }*)arg1 unarchiver:(id)arg2 owner:(id)arg3;
- (void)saveToArchive:(struct TileStorage { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct RepeatedPtrField<TST::TileStorage_Tile> { void **x_3_1_1; int x_3_1_2; int x_3_1_3; int x_3_1_4; } x3; int x4; unsigned int x5[1]; }*)arg1 archiver:(id)arg2;

@end
