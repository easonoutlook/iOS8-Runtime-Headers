/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSTLayout, TSTLayoutSpaceBundle, TSTCoordinateArray, TSTMasterLayout;

@interface TSTLayoutSpace : NSObject  {
    TSTLayoutSpaceBundle *mBundle;
    int mLayoutSpaceType;
    BOOL mInvalidTableOffset;
    unsigned char mInvalidColumnIndex;
    unsigned short mInvalidRowIndex;
    struct { 
        struct { 
            unsigned int column; 
            unsigned int row; 
        } topLeft; 
        struct { 
            unsigned int column; 
            unsigned int row; 
        } bottomRight; 
    } mGridRange;
    BOOL mHeaderColumnsRepeat;
    BOOL mHeaderRowsRepeat;
    float mViewScale;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mTransformToCanvas;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mTransformFromCanvas;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mTransformToDevice;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mTransformFromDevice;
    BOOL mDrawBlackAndWhite;
    BOOL mDrawPreventAntialias;
    struct CGPoint { 
        float x; 
        float y; 
    } mTableOffset;
    TSTCoordinateArray *mHeaderRowColumnCoordinates;
    TSTCoordinateArray *mBodyColumnCoordinates;
    TSTCoordinateArray *mHeaderColumnRowCoordinates;
    TSTCoordinateArray *mBodyRowCoordinates;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mCachedFrame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mCachedAlignedFrame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mCachedStrokeFrame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mCachedAlignedStrokeFrame;
    BOOL mLayoutDirectionIsLeftToRight;
    struct _opaque_pthread_rwlock_t { 
        long __sig; 
        BOOL __opaque[124]; 
    } mLock;
}

@property(readonly) TSTLayoutSpaceBundle * bundle;
@property(readonly) int layoutSpaceType;
@property(readonly) TSTLayout * layout;
@property(readonly) TSTMasterLayout * masterLayout;
@property(readonly) BOOL layoutDirectionIsLeftToRight;
@property(readonly) BOOL isMain;
@property(readonly) BOOL isFrozen;
@property(readonly) BOOL isRepeat;
@property(readonly) BOOL isColumns;
@property(readonly) BOOL isRows;
@property(readonly) BOOL isCorner;
@property BOOL headerColumnsRepeat;
@property BOOL headerRowsRepeat;
@property float viewScale;
@property struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } transformToCanvas;
@property struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } transformFromCanvas;
@property struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } transformToDevice;
@property struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } transformFromDevice;
@property BOOL drawBlackAndWhite;
@property BOOL drawPreventAntialias;
@property struct CGPoint { float x1; float x2; } tableOffset;


- (void)setViewScale:(float)arg1;
- (BOOL)isRepeat;
- (int)validate:(id)arg1;
- (id).cxx_construct;
- (id)bundle;
- (id)layout;
- (BOOL)isFrozen;
- (void)unlock;
- (BOOL)isCorner;
- (id)description;
- (void)dealloc;
- (void)setDrawPreventAntialias:(BOOL)arg1;
- (void)setDrawBlackAndWhite:(BOOL)arg1;
- (void)setTransformFromDevice:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformFromDevice;
- (void)setTransformToDevice:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setTransformFromCanvas:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformFromCanvas;
- (void)drawStrokesInGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 clearStrokes:(BOOL)arg2 context:(struct CGContext { }*)arg3;
- (void)invalidateTableOffset;
- (BOOL)isRows;
- (BOOL)isColumns;
- (void)p_drawStrokeForGridRow:(unsigned int)arg1 strokeRect:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 clearStroke:(BOOL)arg3 shadowType:(int)arg4 context:(struct CGContext { }*)arg5;
- (void)p_drawStrokeForGridColumn:(unsigned int)arg1 strokeRect:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 clearStroke:(BOOL)arg3 shadowType:(int)arg4 context:(struct CGContext { }*)arg5;
- (BOOL)drawBlackAndWhite;
- (BOOL)drawPreventAntialias;
- (BOOL)isMain;
- (void)setTableOffset:(struct CGPoint { float x1; float x2; })arg1;
- (int)validateTableOffset:(id)arg1;
- (int)validateCoordinateCache:(id)arg1;
- (void)validateCachedFrames;
- (void)lockForWrite;
- (id)initWithLayoutSpaceBundle:(id)arg1 type:(int)arg2;
- (void)setHeaderColumnsRepeat:(BOOL)arg1;
- (void)setHeaderRowsRepeat:(BOOL)arg1;
- (BOOL)layoutDirectionIsLeftToRight;
- (int)layoutSpaceType;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformToDevice;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformToCanvas;
- (void)setTransformToCanvas:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)lockForRead;
- (BOOL)headerColumnsRepeat;
- (BOOL)headerRowsRepeat;
- (void)invalidateCoordinatesAfterRow:(unsigned short)arg1;
- (void)invalidateCoordinatesAfterColumn:(unsigned char)arg1;
- (void)invalidateCoordinates;
- (struct CGPoint { float x1; float x2; })tableOffset;
- (BOOL)p_getLayoutDirectionLeftToRight;
- (id)masterLayout;
- (float)viewScale;

@end
