/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit
 */

@class CAMTimelapseState, NSObject<OS_dispatch_queue>, CAMTimelapseMovieWriter, NSMutableArray;

@interface CAMTimelapseBackendController : NSObject <CAMNebulaDaemonProtocol> {
    BOOL __writingMovie;
    BOOL __capturing;
    NSMutableArray *__sessionContexts;
    NSObject<OS_dispatch_queue> *__workQueue;
    CAMTimelapseMovieWriter *__movieWriter;
    CAMTimelapseState *__currentState;
}

@property(readonly) NSMutableArray * _sessionContexts;
@property(readonly) NSObject<OS_dispatch_queue> * _workQueue;
@property(readonly) BOOL _writingMovie;
@property(readonly) CAMTimelapseMovieWriter * _movieWriter;
@property(setter=_setCurrentState:,retain) CAMTimelapseState * _currentState;
@property(getter=_isCapturing,setter=_setCapturing:) BOOL _capturing;

+ (id)sharedInstance;

- (BOOL)_isCapturing;
- (id)_currentState;
- (id)_movieWriter;
- (BOOL)_writingMovie;
- (id)_workQueue;
- (id)_sessionContexts;
- (void)handleClientDisconnection;
- (void)handleClientConnection:(id)arg1;
- (void)updatePendingWorkFromDiskForceEndLastSession:(BOOL)arg1;
- (void)stopNebulaWithUUID:(id)arg1;
- (void)finishCaptureForNebulaWithUUID:(id)arg1;
- (void)updateNebulaWithUUID:(id)arg1;
- (void)resumeNebulaWithUUID:(id)arg1;
- (void)startNebulaWithUUID:(id)arg1;
- (void)_dispatchToMainQueueWithBlock:(id)arg1;
- (void)_notifyAssetsdOfIncomingMovieAtPath:(id)arg1 duration:(double)arg2 state:(id)arg3;
- (void)_movieWrittenToFilePath:(id)arg1 duration:(double)arg2 state:(id)arg3;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })_frameTransformForState:(id)arg1;
- (void)_writeMovieForSessionContext:(id)arg1;
- (BOOL)_deleteItemAtPath:(id)arg1;
- (void)_updatePendingWorkFromDiskForceEndLastSession:(BOOL)arg1;
- (void)_dispatchToWorkQueueWithBlock:(id)arg1;
- (void)_performPendingWork;
- (void)_updateSessionContext:(id)arg1 withState:(id)arg2;
- (id)_getOrCreateSessionContextForTimelapseUUID:(id)arg1;
- (void)_setCapturing:(BOOL)arg1;
- (void)_setCurrentState:(id)arg1;
- (void).cxx_destruct;
- (id)init;

@end
