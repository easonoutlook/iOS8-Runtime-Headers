/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class VKTrafficTile;

@interface VKRoadTile : VKVectorTile  {
    VKTrafficTile *_trafficTile;
    struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer> > { 
        struct __compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer> > { 
            struct RoadLayer {} *__first_; 
        } __ptr_; 
    } _roadLayer;
    struct unique_ptr<vk::BorderLayer, std::__1::default_delete<vk::BorderLayer> > { 
        struct __compressed_pair<vk::BorderLayer *, std::__1::default_delete<vk::BorderLayer> > { 
            struct BorderLayer {} *__first_; 
        } __ptr_; 
    } _borderLayer;
}

@property(retain) VKTrafficTile * trafficTile;
@property(readonly) /* Warning: unhandled struct encoding: '{RoadLayer=^^?{vector<vk::RoadBatch *' */ struct * roadLayer; /* unknown property attribute:  std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[4^{RenderState}]{shared_ptr<ggl::Tile::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}[4{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I} */
@property(readonly) struct * borderLayer; /* unknown property attribute:  std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::Tile::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}[2{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I} */


- (void)addRoadRibbonTo:(struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > >, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::hash<vk::RoadBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::equal_to<vk::RoadBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 styleQuery:(struct shared_ptr<md::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5 startCap:(bool)arg6 endCap:(bool)arg7;
- (void)addBorderRibbonTo:(struct unordered_map<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > >, std::__1::hash<vk::BorderBatchKey>, std::__1::equal_to<vk::BorderBatchKey>, std::__1::allocator<std::__1::pair<const vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, std::__1::__unordered_map_hasher<vk::BorderBatchKey, std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, std::__1::hash<vk::BorderBatchKey>, true>, std::__1::__unordered_map_equal<vk::BorderBatchKey, std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, std::__1::equal_to<vk::BorderBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::BorderBatchKey, std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, std::__1::hash<vk::BorderBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::BorderBatchKey, std::__1::__hash_value_type<vk::BorderBatchKey, std::__1::vector<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::BorderRibbon, std::__1::default_delete<vk::BorderRibbon> > > > >, std::__1::equal_to<vk::BorderBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 styleQuery:(struct shared_ptr<md::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg2 numPoints:(unsigned long)arg3 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg4;
- (void)buildGglMeshesWithDevice:(struct Device { int (**x1)(); int x2; }*)arg1;
- (void)setTrafficTile:(id)arg1;
- (id)trafficTile;
- (struct BorderLayer { int (**x1)(); struct vector<vk::BorderBatch *, std::__1::allocator<vk::BorderBatch *> > { struct BorderBatch {} **x_2_1_1; struct BorderBatch {} **x_2_1_2; struct __compressed_pair<vk::BorderBatch **, std::__1::allocator<vk::BorderBatch *> > { struct BorderBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[2]; struct shared_ptr<ggl::Tile::ViewUniformData> { struct ViewUniformData {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[2]; unsigned int x7; }*)borderLayer;
- (struct RoadLayer { int (**x1)(); struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *> > { struct RoadBatch {} **x_2_1_1; struct RoadBatch {} **x_2_1_2; struct __compressed_pair<vk::RoadBatch **, std::__1::allocator<vk::RoadBatch *> > { struct RoadBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[4]; struct shared_ptr<ggl::Tile::ViewUniformData> { struct ViewUniformData {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[4]; unsigned int x7; }*)roadLayer;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(float)arg5 device:(struct Device { int (**x1)(); int x2; }*)arg6;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)dealloc;

@end
