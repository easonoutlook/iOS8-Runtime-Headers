/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class TIKeyboardTouchEvent, UITextInputArrowKeyHistory, TIKeyboardLayout, UIResponder<UIWKInteractionViewProtocol>, UIAutocorrectInlinePrompt, <UIKeyboardTypology>, UIKeyboardAutocorrectionController, TIKeyboardInputManagerState, UIResponder<UITextInput>, UITextInputTraits, UIResponder, UIResponder<UIKeyInput>, _UIActionWhenIdle, UIResponder<UITextInputPrivate>, NSString, <UIKeyboardImplGeometryDelegate>, NSObject<UIKeyboardRecording><UIApplicationEventRecording>, UIAlertView, UIKeyboardScheduledTask, <UIKeyboardRecording><UIApplicationEventRecording>, UIPhysicalKeyboardEvent, UIKeyboardLayout, <UIKeyboardCandidateList>, UIView, UIDelayedAction, TIKeyboardState, <UIKeyInput>, NSMutableArray, <UIKeyboardInput>, TIKeyboardInputManagerStub, UIKeyboardTaskQueue, TIKeyboardCandidateResultSet, NSMutableDictionary, NSDictionary;

@interface UIKeyboardImpl : UIView <_UIIVCResponseDelegateImpl, UIKeyboardCandidateListDelegate> {
    <UIKeyInput> *m_delegate;
    UIKeyboardTaskQueue *m_taskQueue;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id m_externalTask;

    TIKeyboardState *m_keyboardState;
    TIKeyboardInputManagerState *m_inputManagerState;
    UIView *m_languageIndicator;
    NSString *m_previousInputString;
    UIKeyboardAutocorrectionController *m_autocorrectionController;
    UIAutocorrectInlinePrompt *m_autocorrectPrompt;
    TIKeyboardCandidateResultSet *m_candidateResultSet;
    <UIKeyboardCandidateList> *m_candidateList;
    UIView *m_markedTextOverlay;
    <UIKeyboardImplGeometryDelegate> *m_geometryDelegate;
    NSObject<UIKeyboardRecording><UIApplicationEventRecording> *m_recorder;
    UIKeyboardLayout *m_layout;
    NSMutableDictionary *m_keyedLayouts;
    UIKeyboardScheduledTask *m_autoDeleteTask;
    unsigned int m_autoDeleteCount;
    double m_autoDeleteLastDelete;
    double m_autoDeleteInterval;
    unsigned long m_autoDeleteShiftCharacter;
    UIDelayedAction *m_longPressAction;
    int m_orientation;
    int m_originalOrientation;
    struct CGPoint { 
        float x; 
        float y; 
    } m_inputPoint;
    int m_changeCount;
    double m_changeTime;
    id m_changedDelegate;
    struct __CFRunLoopObserver { } *m_observer;
    unsigned int m_textInputChangingCount;
    BOOL m_textInputChangingText;
    BOOL m_textInputChangingDirection;
    BOOL m_textInputChangesIgnored;
    BOOL m_insideKeyInputDelegateCall;
    UITextInputTraits *m_defaultTraits;
    UITextInputTraits *m_traits;
    int m_returnKeyState;
    int m_currentDirection;
    BOOL m_autoDeleteOK;
    BOOL m_autocapitalizationPreference;
    BOOL m_autocorrectionPreference;
    BOOL m_autoshift;
    BOOL m_caretShowingNow;
    BOOL m_changeNotificationDisabled;
    BOOL m_correctionLearningAllowed;
    BOOL m_delegateIsSMSTextView;
    BOOL m_delegateRequiresKeyEvents;
    BOOL m_doubleSpacePeriodWasAppliedInCurrentContext;
    BOOL m_doubleSpacePeriodPreference;
    BOOL m_hardwareKeyboardAttached;
    BOOL m_inDealloc;
    BOOL m_initializationDone;
    BOOL m_performanceLoggingEnabled;
    BOOL m_selecting;
    BOOL m_shift;
    BOOL m_shiftLocked;
    BOOL m_shiftLockedEnabled;
    BOOL m_settingShift;
    BOOL m_suggestionsShownForCurrentDeletion;
    BOOL m_originalShouldSkipCandidateSelection;
    BOOL m_updatingPreferences;
    BOOL m_changingGeometryWithSameOrientation;
    BOOL m_suppressGeometryChangeNotifications;
    BOOL m_acceptingCandidate;
    BOOL m_didAutomaticallyInsertSpace;
    BOOL m_userChangedSelection;
    BOOL m_shouldChargeKeys;
    BOOL m_longPress;
    BOOL m_replacingWord;
    BOOL m_shiftNeedsUpdate;
    BOOL m_shiftPreventAutoshift;
    BOOL m_shiftHeldDownNeedsUpdated;
    BOOL m_delegateAdoptsTextInput;
    BOOL m_delegateAdoptsTextInputPrivate;
    BOOL m_delegateAdoptsKeyboardInput;
    BOOL m_delegateAdoptsWKInteraction;
    BOOL m_clientVariantSupportEnabled;
    BOOL m_clientVariantSupportEnabledEver;
    NSMutableArray *m_keyplaneNamesPreviousDelegate;
    NSMutableArray *m_keyplaneNamesCurrentDelegate;
    UITextInputArrowKeyHistory *m_arrowKeyHistory;
    BOOL m_preRotateShift;
    BOOL m_preRotateShiftLocked;
    BOOL m_showInputModeIndicator;
    BOOL m_suppressUpdateCandidateView;
    BOOL m_shouldUpdateCacheOnInputModesChange;
    BOOL m_shouldSetInputModeInNextRun;
    BOOL m_rivenCenterFilled;
    float m_splitProgress;
    BOOL m_needsCandidates;
    BOOL m_shouldSkipCandidateGeneration;
    BOOL m_updateLayoutOnShowKeyboard;
    BOOL m_receivedCandidatesInCurrentInputMode;
    int _currentAlertReason;
    BOOL m_scrolling;
    BOOL m_hasInputOnAcceptCandidate;
    BOOL m_maximizing;
    unsigned int m_previousSpaceKeyBehavior;
    unsigned int m_previousReturnKeyBehavior;
    BOOL m_usesCandidateSelection;
    BOOL m_swipeAcceptCandidate;
    BOOL m_candidateBarWasShown;
    BOOL m_settingInputMode;
    BOOL m_showsCandidateBar;
    BOOL m_showsCandidateInline;
    BOOL committingCandidate;
    BOOL geometryIsChanging;
    BOOL m_hardwareKeyboardIsSeen;
    BOOL m_softwareKeyboardShownByTouch;
    BOOL _handlingKeyCommandFromHardwareKeyboard;
    TIKeyboardTouchEvent *m_touchEventWaitingForKeyInputEvent;
    _UIActionWhenIdle *m_delayedCandidateRequest;
    _UIActionWhenIdle *m_deferredDidSetDelegateAction;
    UIPhysicalKeyboardEvent *m_hardwareRepeatEvent;
    UIKeyboardScheduledTask *m_hardwareRepeatTask;
    <UIKeyboardTypology> *typologyRecorder;
    UIAlertView *keyboardAlertView;
    NSDictionary *_candidateRequestInfo;
    UIKeyboardScheduledTask *_autocorrectPromptTask;
}

@property(retain) id changedDelegate;
@property BOOL showInputModeIndicator;
@property BOOL shouldSetInputModeInNextRun;
@property BOOL showsCandidateBar;
@property(readonly) BOOL shouldShowCandidateBar;
@property BOOL receivedCandidatesInCurrentInputMode;
@property BOOL showsCandidateInline;
@property BOOL geometryIsChanging;
@property BOOL shouldSkipCandidateSelection;
@property(readonly) UIKeyboardTaskQueue * taskQueue;
@property(readonly) BOOL centerFilled;
@property BOOL rivenSplitLock;
@property(readonly) unsigned int minimumTouchesForTranslation;
@property(readonly) BOOL splitTransitionInProgress;
@property(retain) <UIKeyboardRecording><UIApplicationEventRecording> * recorder;
@property(retain) <UIKeyboardTypology> * typologyRecorder;
@property(getter=isInHardwareKeyboardMode) BOOL inHardwareKeyboardMode;
@property(retain) UIResponder<UIKeyInput> * delegate;
@property <UIKeyboardImplGeometryDelegate> * geometryDelegate;
@property(readonly) UIResponder<UITextInput> * inputDelegate;
@property(readonly) UIResponder<UITextInputPrivate> * privateInputDelegate;
@property(readonly) <UIKeyboardInput> * legacyInputDelegate;
@property(readonly) UIResponder<UIWKInteractionViewProtocol> * asynchronousInputDelegate;
@property(retain) TIKeyboardLayout * layoutForKeyHitTest;
@property(readonly) UIResponder * delegateAsResponder;
@property(retain) UITextInputArrowKeyHistory * arrowKeyHistory;
@property(readonly) TIKeyboardInputManagerStub * inputManager;
@property(retain) TIKeyboardInputManagerState * inputManagerState;
@property(copy) id externalTask;
@property(readonly) UIKeyboardAutocorrectionController * autocorrectionController;
@property(retain) TIKeyboardTouchEvent * touchEventWaitingForKeyInputEvent;
@property(retain) NSDictionary * candidateRequestInfo;
@property(retain) _UIActionWhenIdle * delayedCandidateRequest;
@property(retain) UIKeyboardScheduledTask * autocorrectPromptTask;
@property(retain) _UIActionWhenIdle * deferredDidSetDelegateAction;
@property(retain) id changedDelegate;
@property(retain) UIPhysicalKeyboardEvent * hardwareRepeatEvent;
@property(retain) UIKeyboardScheduledTask * hardwareRepeatTask;
@property(retain) UIAlertView * keyboardAlertView;
@property BOOL committingCandidate;
@property BOOL hardwareKeyboardIsSeen;
@property BOOL softwareKeyboardShownByTouch;
@property BOOL handlingKeyCommandFromHardwareKeyboard;

+ (void)_clearHardwareKeyboardMinimizationPreference;
+ (void)setParentTestForProfiling:(id)arg1;
+ (int)interfaceOrientationForSize:(struct CGSize { float x1; float x2; })arg1;
+ (struct CGPoint { float x1; float x2; })persistentDictationWindowOffset;
+ (void)setPersistentDictationWindowOffset:(struct CGPoint { float x1; float x2; })arg1;
+ (void)setPersistentDictationTargetZone:(int)arg1;
+ (int)persistentDictationTargetZone;
+ (void)setPersistentOffset:(struct CGPoint { float x1; float x2; })arg1;
+ (void)setPersistentSplitProgress:(float)arg1;
+ (BOOL)rivenTranslationPreference;
+ (BOOL)rivenInstalled;
+ (float)additionalInstanceHeightLoading;
+ (id)normalizedInputModesFromPreference;
+ (void)hardwareKeyboardAvailabilityChanged;
+ (void)sendPerformanceNotification:(id)arg1;
+ (float)additionalInstanceHeight;
+ (struct CGPoint { float x1; float x2; })persistentOffset;
+ (BOOL)rivenPreference;
+ (void)refreshRivenStateWithTraits:(id)arg1 isKeyboard:(BOOL)arg2;
+ (float)persistentSplitProgress;
+ (BOOL)supportsSplit;
+ (void)suppressSetPersistentOffset:(BOOL)arg1;
+ (void)markElapsed:(id)arg1;
+ (float)splitProgress;
+ (void)markPerformance:(id)arg1;
+ (float)additionalInstanceHeightLoadingForInterfaceOrientation:(int)arg1;
+ (float)additionalInstanceHeightForInterfaceOrientation:(int)arg1;
+ (struct CGSize { float x1; float x2; })keyboardSizeForInterfaceOrientation:(int)arg1;
+ (id)keyboardScreen;
+ (Class)layoutClassForCurrentInputMode;
+ (Class)layoutClassForInputMode:(id)arg1 keyboardType:(int)arg2;
+ (struct CGSize { float x1; float x2; })_defaultSizeForInterfaceOrientation:(int)arg1;
+ (struct CGSize { float x1; float x2; })defaultSizeForInterfaceOrientation:(int)arg1;
+ (BOOL)isSplit;
+ (struct CGSize { float x1; float x2; })sizeForInterfaceOrientation:(int)arg1;
+ (void)releaseSharedInstance;
+ (void)applicationWillSuspend:(id)arg1;
+ (void)applicationWillEnterForeground:(id)arg1;
+ (void)applicationDidEnterBackground:(id)arg1;
+ (void)applicationWillResignActive:(id)arg1;
+ (void)applicationDidReceiveMemoryWarning:(id)arg1;
+ (id)activeInstance;
+ (id)sharedInstance;

- (BOOL)keyboardRecordingEnabled;
- (BOOL)_needsCandidates;
- (int)_positionInCandidateList:(id)arg1;
- (BOOL)_hasCandidates;
- (id)_getAutocorrection;
- (void)_setAutocorrects:(BOOL)arg1;
- (id)_getLocalizedInputMode;
- (void)moveCursorRightShifted:(BOOL)arg1;
- (void)moveCursorLeftShifted:(BOOL)arg1;
- (void)acceptAutocorrectionAndEndComposition;
- (void)setTextInputChangesIgnored:(BOOL)arg1;
- (BOOL)_shouldMinimizeForHardwareKeyboard;
- (BOOL)keyboardDrawsOpaque;
- (void)clearExcessKeyboardMemory;
- (void)finishSplitTransitionWithProgress:(float)arg1;
- (void)setSplit:(BOOL)arg1 animated:(BOOL)arg2;
- (void)launchTypologyApplication;
- (void)composeTypologyRadar;
- (id)_getCurrentKeyplaneName;
- (id)_getCurrentKeyboardName;
- (BOOL)isAutoDeleteActive;
- (void)testAutocorrectionPromptWithCorrection:(id)arg1;
- (int)textInputChangingCount;
- (BOOL)_isShowingCandidateUIWithAvailableCandidates;
- (void)updateFromTextInputTraits;
- (BOOL)hasAutoRepeat;
- (void)_setShiftLockedEnabled:(BOOL)arg1;
- (void)_setInputManager:(id)arg1;
- (void)timeElapsed:(unsigned int)arg1 message:(id)arg2;
- (void)timeMark:(unsigned int)arg1;
- (void)timeMark:(unsigned int)arg1 message:(id)arg2;
- (void)setReceivedCandidatesInCurrentInputMode:(BOOL)arg1;
- (BOOL)receivedCandidatesInCurrentInputMode;
- (void)setShouldSetInputModeInNextRun:(BOOL)arg1;
- (BOOL)shouldSetInputModeInNextRun;
- (void)setShowInputModeIndicator:(BOOL)arg1;
- (void)setGeometryDelegate:(id)arg1;
- (id)geometryDelegate;
- (BOOL)caretVisible;
- (void)startCaretBlinkIfNeeded;
- (void)showKeyboardIfNeeded;
- (BOOL)isLongPress;
- (void)touchLongPressTimer;
- (void)startAutoDeleteTimer;
- (id)generateAutocorrectionReplacements:(id)arg1;
- (void)generateCandidatesFromReplacements;
- (BOOL)returnKeyEnabled;
- (void)responseContextDidChange;
- (void)setShowsCandidateInline:(BOOL)arg1;
- (BOOL)displaysCandidates;
- (void)replaceText:(id)arg1;
- (void)addInputObject:(id)arg1;
- (void)acceptCurrentCandidateIfSelected;
- (void)acceptCandidateAtIndex:(unsigned int)arg1;
- (void)deleteFromInput;
- (void)updateLayoutAndSetShift;
- (void)addInputString:(id)arg1 fromVariantKey:(BOOL)arg2;
- (void)addInputString:(id)arg1;
- (void)handleClear;
- (void)handleDelete;
- (void)setInputPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)keyDeactivated;
- (void)keyActivated;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (void)forceShiftUpdate;
- (BOOL)shiftLockedEnabled;
- (BOOL)isAutoShifted;
- (void)setShiftLockedForced:(BOOL)arg1;
- (void)toggleShift;
- (void)recomputeActiveInputModes;
- (void)removeAllDynamicDictionaries;
- (void)performHitTestForTouchEvent:(id)arg1 executionContextPassingNSNumber:(id)arg2;
- (void)skipHitTestForTouchEvent:(id)arg1 delayed:(BOOL)arg2;
- (void)generateAutocorrectionWithExecutionContext:(id)arg1;
- (id)markedTextOverlay;
- (void)handleObserverCallback;
- (void)setChangeNotificationDisabled:(BOOL)arg1;
- (BOOL)changeNotificationDisabled;
- (void)enable;
- (void)setDefaultTextInputTraits:(id)arg1;
- (BOOL)autocorrectSpellingEnabled;
- (void)setCorrectionLearningAllowed:(BOOL)arg1;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)prepareLayoutForInterfaceOrientation:(int)arg1;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (void)setHardwareKeyboardsSeenPreference:(id)arg1;
- (id)hardwareKeyboardsSeenPreference;
- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)arg1;
- (id)inputModeLastUsedPreference;
- (void)saveInputModesPreference:(id)arg1;
- (BOOL)keyboardsExpandedPreference;
- (BOOL)swipeToTabPreference;
- (void)cancelSplitTransition;
- (BOOL)hideAccessoryViewsDuringSplit;
- (unsigned int)minimumTouchesForTranslation;
- (BOOL)rivenSplitLock;
- (void)defaultsDidChange;
- (void)setLayoutForKeyHitTest:(id)arg1;
- (id)layoutForKeyHitTest;
- (void)setCandidateList:(id)arg1 updateCandidateView:(BOOL)arg2;
- (void)_performInputViewControllerOutput:(id)arg1;
- (BOOL)needsKeyHitTestResults;
- (BOOL)canHandleKeyHitTest;
- (BOOL)caretBlinks;
- (BOOL)hardwareKeyboardIsSeen;
- (void)handleStringInput:(id)arg1 withFlags:(unsigned int)arg2 executionContext:(id)arg3;
- (void)handleKeyWithString:(id)arg1 forKeyEvent:(id)arg2 executionContext:(id)arg3;
- (void)completeHandleKeyEvent:(id)arg1;
- (BOOL)isValidKeyInput:(id)arg1;
- (BOOL)handleKeyCommand:(id)arg1 repeatOkay:(BOOL*)arg2;
- (void)_handleWebKeyEvent:(id)arg1 withInputString:(id)arg2 executionContext:(id)arg3;
- (void)firstHardwareAutoRepeatWithExecutionContext:(id)arg1;
- (void)_remapKeyEvent:(id)arg1 withKeyEventMap:(id)arg2;
- (void)setSoftwareKeyboardShownByTouch:(BOOL)arg1;
- (void)toggleSoftwareKeyboard;
- (BOOL)softwareKeyboardShownByTouch;
- (void)setHardwareKeyboardIsSeen:(BOOL)arg1;
- (void)updateKeyboardEventsLagging:(id)arg1;
- (void)_handleWebKeyEvent:(id)arg1 withIndex:(unsigned int)arg2 inInputString:(id)arg3 executionContext:(id)arg4;
- (id)externalTask;
- (void)_handleWebKeyEvent:(id)arg1 withEventType:(int)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4;
- (void)setHardwareRepeatEvent:(id)arg1;
- (void)hideKeyboard;
- (void)showKeyboard;
- (void)setHardwareRepeatTask:(id)arg1;
- (void)handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (id)hardwareRepeatEvent;
- (id)hardwareRepeatTask;
- (void)updateHardwareKeyboardLayout;
- (void)setAutomaticMinimizationEnabled:(BOOL)arg1;
- (void)hardwareKeyboardAvailabilityChanged;
- (void)callLayoutLongPressAction;
- (void)longPressAction;
- (void)touchLongPressTimerWithDelay:(double)arg1;
- (void)handleDelayedActionLongPress;
- (void)touchAutoDeleteTimerWithThreshold:(double)arg1;
- (void)completeHandleAutoDelete;
- (void)handleAutoDeleteWithExecutionContext:(id)arg1;
- (void)clearAutoDeleteTimer;
- (void)generateReplacementsForString:(id)arg1 candidatesHandler:(id)arg2 executionContext:(id)arg3;
- (id)replacementsFromSelectedText;
- (id)autocorrectionRecordForWord:(id)arg1;
- (BOOL)delegateSuggestionsForCurrentInput;
- (void)autocorrectionAnimationDidStop:(id)arg1 finished:(id)arg2 context:(id)arg3;
- (void)trackUsageForPromptedCorrection:(id)arg1 inputString:(id)arg2 previousPrompt:(id)arg3;
- (id)_rangeForAutocorrectionText:(id)arg1;
- (id)autocorrectPromptRectsForInput:(id)arg1;
- (void)updateAutocorrectPrompt:(id)arg1 correctionRects:(id)arg2;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 lastDelegateRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 delegateView:(id)arg2 container:(id)arg3;
- (BOOL)delegateSupportsCorrectionUI;
- (id)inputOverlayContainer;
- (id)updateKeyBehaviors:(id)arg1 withBehaviors:(id)arg2 forState:(id)arg3;
- (void)_handleKeyBehavior:(unsigned int)arg1 forKeyType:(id)arg2;
- (void)acceptFirstCandidate;
- (BOOL)handlingKeyCommandFromHardwareKeyboard;
- (id)returnKeyDisplayName;
- (void)showNextCandidates;
- (void)_nop;
- (BOOL)noContent;
- (void)removeCandidateList;
- (void)clearAutocorrectPromptTimer;
- (void)resizeCandidateBarWithDelta:(float)arg1;
- (void)setAutocorrectPromptTask:(id)arg1;
- (id)autocorrectPromptTask;
- (BOOL)needsToDeferUpdateTextCandidateView;
- (void)_setNeedsCandidates:(BOOL)arg1;
- (void)generateCandidatesAsynchronously;
- (BOOL)acceptWord:(id)arg1 firstDelete:(unsigned int)arg2;
- (void)completeAcceptCandidateBeforeAddingInputObject:(id)arg1 executionContext:(id)arg2;
- (void)setInHardwareKeyboardMode:(BOOL)arg1;
- (void)addInputObject:(id)arg1 executionContext:(id)arg2;
- (void)updateKeyboardConfigurations;
- (void)acceptCurrentCandidateWithExecutionContext:(id)arg1;
- (void)trackUsageForCandidateAcceptedAction:(id)arg1;
- (void)generateCandidatesWithOptions:(int)arg1;
- (BOOL)geometryIsChanging;
- (void)acceptCandidate:(id)arg1 atIndex:(unsigned int)arg2;
- (void)acceptCurrentCandidateForInput:(id)arg1 executionContext:(id)arg2;
- (BOOL)acceptWord:(id)arg1 firstDelete:(unsigned int)arg2 forInput:(id)arg3;
- (void)setCommittingCandidate:(BOOL)arg1;
- (BOOL)committingCandidate;
- (void)acceptCandidate:(id)arg1 forInput:(id)arg2;
- (void)handleAcceptedCandidate:(id)arg1 executionContext:(id)arg2;
- (void)completeAcceptCandidate:(id)arg1;
- (void)removeAutocorrection;
- (void)acceptCandidate:(id)arg1 atIndex:(unsigned int)arg2 executionContext:(id)arg3;
- (void)acceptCurrentCandidate;
- (id)acceptAutocorrectionForWordTerminator:(id)arg1;
- (BOOL)userSelectedCurrentCandidate;
- (void)completeDeleteFromInput;
- (void)deleteOnceFromInputWithExecutionContext:(id)arg1;
- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)arg1 characterCountForRapidDelete:(int)arg2;
- (BOOL)shouldEnableShiftForDeletedCharacter:(unsigned long)arg1;
- (void)scheduleReplacementsAfterDeletionToEndOfWord;
- (BOOL)selectionIsEndOfWord;
- (void)scheduleReplacementsWithOptions:(unsigned int)arg1;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned long)arg1;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)arg1 executionContext:(id)arg2;
- (unsigned int)phraseBoundary;
- (void)setUserSelectedCurrentCandidate:(BOOL)arg1;
- (void)updateDoubleSpacePeriodStateForString:(id)arg1;
- (id)handleReplacement:(id)arg1 forSpaceAndInput:(id)arg2;
- (id)handleDoubleSpacePeriodForInputString:(id)arg1 afterSpace:(BOOL)arg2 elapsedTime:(double)arg3;
- (id)handleDeleteAutospaceForInputString:(id)arg1 afterSpace:(BOOL)arg2;
- (void)trackUsageForAcceptedAutocorrection:(id)arg1 promptWasShowing:(BOOL)arg2;
- (void)animateAutocorrectionToText:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)didApplyAutocorrection:(id)arg1 autocorrectPromptFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)animateAutocorrectionToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (BOOL)shouldApplyAcceptedAutocorrection:(id)arg1;
- (void)moveSelectionToEndOfWord;
- (void)syncInputManagerToAcceptedAutocorrection:(id)arg1 forInput:(id)arg2;
- (BOOL)nextCharacterIsWordCharacter;
- (id)inputWordForTerminatorAtSelection;
- (void)acceptAutocorrection:(id)arg1 executionContextPassingTIKeyboardCandidate:(id)arg2;
- (BOOL)shouldAcceptCandidate:(id)arg1 beforeInputString:(id)arg2;
- (void)handleKeyboardInput:(id)arg1 executionContext:(id)arg2;
- (void)completeAddInputString:(id)arg1 generateCandidates:(BOOL)arg2;
- (void)willReplaceTextInRangedSelectionWithKeyboardInput;
- (void)acceptAutocorrectionForWordTerminator:(id)arg1 executionContextPassingTIKeyboardCandidate:(id)arg2;
- (void)completeAddInputString:(id)arg1;
- (void)addWordTerminator:(id)arg1 afterSpace:(BOOL)arg2 elapsedTime:(double)arg3 executionContext:(id)arg4;
- (void)didAcceptAutocorrection:(id)arg1 wordTerminator:(id)arg2;
- (void)acceptCurrentCandidateForInput:(id)arg1;
- (void)updateChangeTimeAndIncrementCount;
- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)arg1;
- (void)completeAcceptCandidateBeforeAddingInput:(id)arg1 executionContext:(id)arg2;
- (id)inputEventForInputString:(id)arg1;
- (void)setExternalTask:(id)arg1;
- (BOOL)applyAutocorrection:(id)arg1;
- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned long)arg1;
- (BOOL)isInHardwareKeyboardMode;
- (BOOL)callLayoutIgnoresShiftState;
- (void)addInputString:(id)arg1 withFlags:(unsigned int)arg2;
- (void)updateKeyboardStateForDeletion;
- (void)updateKeyboardStateForInsertion:(id)arg1;
- (BOOL)acceptInputString:(id)arg1;
- (void)addInputString:(id)arg1 withFlags:(unsigned int)arg2 executionContext:(id)arg3;
- (void)handleClearWithExecutionContext:(id)arg1;
- (void)handleDeleteWithExecutionContext:(id)arg1;
- (void)handleDeleteAsRepeat:(BOOL)arg1 executionContext:(id)arg2;
- (void)_handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (void)deleteFromInputWithExecutionContext:(id)arg1;
- (BOOL)suppliesCompletions;
- (BOOL)shouldSkipCandidateSelection;
- (void)setShiftNeedsUpdate;
- (void)setShift:(BOOL)arg1 autoshift:(BOOL)arg2;
- (void)setShiftPreventAutoshift:(BOOL)arg1;
- (BOOL)isSelectionAtSentenceAutoshiftBoundary;
- (BOOL)callLayoutUsesAutoShift;
- (BOOL)callLayoutIsShiftKeyBeingHeld;
- (void)notifyShiftState;
- (BOOL)callLayoutIsShiftKeyPlaneChooser;
- (void)callLayoutSetAutoshift:(BOOL)arg1;
- (void)callLayoutSetShift:(BOOL)arg1;
- (BOOL)shouldSwitchInputMode:(id)arg1;
- (void)didChangePhraseBoundary;
- (void)skipHitTestForTouchEvent:(id)arg1;
- (void)updateAutocorrectPrompt:(id)arg1 executionContext:(id)arg2;
- (void)setCandidates:(id)arg1;
- (void)setAutocorrectionList:(id)arg1;
- (void)generateAutocorrectionsWithCompletionHandler:(id)arg1;
- (void)inputManagerDidGenerateAutocorrections:(id)arg1 executionContext:(id)arg2;
- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)arg1;
- (void)setDelayedCandidateRequest:(id)arg1;
- (id)delayedCandidateRequest;
- (void)inputManagerDidGenerateCandidatesForRequest:(id)arg1 resultSet:(id)arg2;
- (id)candidateRequestInfo;
- (void)setCandidateRequestInfo:(id)arg1;
- (void)generateCandidatesAsynchronouslyWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 selectedCandidate:(id)arg2;
- (void)touchAutocorrectPromptTimer;
- (id)autocorrectPrompt;
- (void)setAutocorrection:(id)arg1;
- (void)deleteBackwardAndNotify:(BOOL)arg1;
- (void)insertTextAfterSelection:(id)arg1;
- (void)unmarkText:(id)arg1;
- (void)acceptCandidate:(id)arg1;
- (void)setTouchEventWaitingForKeyInputEvent:(id)arg1;
- (id)touchEventWaitingForKeyInputEvent;
- (void)cancelCandidateRequests;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (BOOL)isShiftLocked;
- (BOOL)isShifted;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setInputManagerState:(id)arg1;
- (void)syncKeyboardToConfiguration:(id)arg1;
- (void)refreshKeyboardState;
- (void)flushTouchEventWaitingForKeyInputEventIfNecessary;
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;
- (void)callChangedSelection;
- (BOOL)usesAutocorrectionLists;
- (void)completeUpdateForChangedSelection:(BOOL)arg1;
- (BOOL)shouldGenerateCandidatesAfterSelectionChange;
- (void)setPreviousInputString:(id)arg1;
- (void)prepareForSelectionChange;
- (id)inputManager;
- (BOOL)hasEditableMarkedText;
- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)arg1;
- (id)searchStringForMarkedText;
- (id)asynchronousInputDelegate;
- (void)clearInputForMarkedText;
- (id)inputStringFromPhraseBoundary;
- (BOOL)splitTransitionInProgress;
- (void)_resizeForKeyplaneSize:(struct CGSize { float x1; float x2; })arg1 splitWidthsChanged:(BOOL)arg2;
- (void)finishLayoutChangeWithArguments:(id)arg1;
- (void)callLayoutUpdateReturnKey;
- (void)setShowsCandidateBar:(BOOL)arg1;
- (void)setShouldSkipCandidateSelection:(BOOL)arg1;
- (BOOL)currentKeyboardTraitsAllowCandidateBar;
- (BOOL)showsCandidateInline;
- (id)dynamicCaretList;
- (BOOL)isUsingDictationLayout;
- (void)clearLongPressTimer;
- (void)releaseSuppressUpdateCandidateView;
- (void)removeAutocorrectPrompt;
- (void)updateLayoutIfNeeded;
- (void)setGeometryIsChanging:(BOOL)arg1;
- (id)_keyboardBehaviorState;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (void)performKeyBehaviorConfirm;
- (id)inputModeLastUsedForLanguage:(id)arg1;
- (void)fadeAutocorrectPrompt;
- (void)deleteForwardAndNotify:(BOOL)arg1;
- (void)movePhraseBoundaryToDirection:(int)arg1;
- (void)setHandlingKeyCommandFromHardwareKeyboard:(BOOL)arg1;
- (id)arrowKeyHistory;
- (void)updateObserverState;
- (void)updateAutocorrectPrompt:(id)arg1;
- (void)syncDocumentStateToInputDelegate;
- (BOOL)usesAutoDeleteWord;
- (id)inputManagerState;
- (id)legacyInputDelegate;
- (void)_requestInputManagerSync;
- (void)dismissKeyboard;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)arg1;
- (void)performKeyboardOutput:(id)arg1;
- (BOOL)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)arg1;
- (BOOL)callShouldInsertText:(id)arg1;
- (BOOL)callShouldReplaceExtendedRange:(unsigned int)arg1 withText:(id)arg2 includeMarkedText:(BOOL)arg3;
- (void)selectionDidChange:(id)arg1;
- (void)setShiftOffIfNeeded;
- (void)setChanged;
- (void)updateNoContentViews;
- (void)updateReturnKey:(BOOL)arg1;
- (void)finishTextChanged;
- (void)selectionWillChange:(id)arg1;
- (void)clearSelection;
- (id)markedText;
- (BOOL)isAutoFillMode;
- (BOOL)checkSpellingPreferenceForTraits;
- (void)releaseInputManagerIfInactive;
- (void)updateForChangedSelectionWithExecutionContext:(id)arg1;
- (void)updateForChangedSelection;
- (void)setDeferredDidSetDelegateAction:(id)arg1;
- (void)didSetDelegate;
- (id)deferredDidSetDelegateAction;
- (void)startKeyboardRecording;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)updateShiftState;
- (void)setReturnKeyEnabled:(BOOL)arg1;
- (void)setArrowKeyHistory:(id)arg1;
- (BOOL)delegateIsSMSTextView;
- (void)clearTransientState;
- (void)callChanged;
- (void)clearShiftState;
- (void)stopAutoDelete;
- (void)storeDelegateConformance;
- (int)changeCount;
- (void)setCaretVisible:(BOOL)arg1;
- (void)stopKeyboardRecording;
- (id)recorder;
- (void)updateReturnKey;
- (void)setDelegate:(id)arg1 force:(BOOL)arg2;
- (BOOL)shouldForceASCIICapable;
- (id)privateInputDelegate;
- (void)endTypology;
- (BOOL)typologyEnabled;
- (void)geometryChangeDone:(BOOL)arg1;
- (void)setShiftLocked:(BOOL)arg1;
- (void)prepareForGeometryChange;
- (void)setOrientation;
- (BOOL)showInputModeIndicator;
- (void)showInternationalKeyInfoAlertIfNeeded;
- (void)updateInputModeLastChosenPreference;
- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)arg1;
- (void)showInformationalAlertIfNeededForReason:(int)arg1;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)arg1 preserveIfPossible:(BOOL)arg2;
- (void)fadeAnimationDidStop:(id)arg1 finished:(id)arg2;
- (void)clearLanguageIndicator;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(BOOL)arg2;
- (void)generateCandidates;
- (void)startTypology;
- (id)typologyRecorder;
- (void)updateTextCandidateView;
- (void)finishSetInputMode:(id)arg1 didChangeDirection:(BOOL)arg2;
- (void)finishSetExtensionInputMode:(id)arg1 didChangeDirection:(BOOL)arg2;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)arg1;
- (void)callLayoutUpdateLocalizedKeys;
- (BOOL)isMinimized;
- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)arg1;
- (void)textChanged:(id)arg1 executionContext:(id)arg2;
- (void)finishSetKeyboardInputMode:(id)arg1 didChangeDirection:(BOOL)arg2;
- (void)reinitializeAfterInputModeSwitch:(BOOL)arg1;
- (void)setInputManagerFromCurrentInputMode;
- (void)cleanUpBeforeInputModeSwitch;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(BOOL)arg2 updateIndicator:(BOOL)arg3 executionContext:(id)arg4;
- (void)setInputMode:(id)arg1 userInitiated:(BOOL)arg2 updateIndicator:(BOOL)arg3 executionContext:(id)arg4;
- (id)taskQueue;
- (void)setInputMode:(id)arg1 userInitiated:(BOOL)arg2;
- (BOOL)automaticMinimizationEnabled;
- (BOOL)checkSpellingPreference;
- (BOOL)keyboardIsKeyPad;
- (BOOL)autocorrectionPreference;
- (void)setRivenSplitLock:(BOOL)arg1;
- (void)setSplitProgress:(float)arg1;
- (struct CGSize { float x1; float x2; })dragGestureSize;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (void)syncInputManagerToKeyboardState;
- (void)recomputeActiveInputModesFromList:(id)arg1;
- (void)updateInputManagerAutocapitalizationType;
- (BOOL)autocapitalizationPreference;
- (void)setAutocorrectSpellingEnabled:(BOOL)arg1;
- (void)updateCandidateDisplay;
- (void)clearChangeTimeAndCount;
- (void)setKeyboardAlertView:(id)arg1;
- (id)keyboardAlertView;
- (void)clearInput;
- (id)autocorrectionController;
- (id)layoutState;
- (void)setInputMode:(id)arg1;
- (void)removeAutocorrectPromptAndCandidateList;
- (void)setTypologyRecorder:(id)arg1;
- (void)setRecorder:(id)arg1;
- (BOOL)performanceLoggingPreference;
- (void)selectionScrolling:(id)arg1;
- (void)keyboardDidHide:(id)arg1;
- (void)applicationResumedEventsOnly:(id)arg1;
- (void)applicationSuspendedEventsOnly:(id)arg1;
- (void)delayedInit;
- (void)installTypology;
- (void)installRecorder;
- (void)setInputModeFromPreferences;
- (void)setInSplitKeyboardMode:(BOOL)arg1;
- (void)refreshRivenPreferences;
- (id)UILanguagePreference;
- (id)inputModePreference;
- (BOOL)doubleSpacePeriodPreference;
- (BOOL)shiftLockPreference;
- (void)takeTextInputTraitsFromDelegate;
- (BOOL)shouldShowCandidateBar;
- (BOOL)showsCandidateBar;
- (id)delegateAsResponder;
- (void)_updateSoundPreheatingForWindow:(id)arg1;
- (void)acceptAutocorrection;
- (void)clearLayouts;
- (void)clearTimers;
- (void)clearAnimations;
- (void)clearDelegate;
- (void)releaseInputManager;
- (BOOL)centerFilled;
- (BOOL)supportsNumberKeySelection;
- (id)_layout;
- (id)candidateList;
- (void)logHandwritingData;
- (void)setUsesCandidateSelection:(BOOL)arg1;
- (BOOL)usesCandidateSelection;
- (int)_clipCornersOfView:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)textChanged:(id)arg1;
- (void)setChangedDelegate:(id)arg1;
- (id)changedDelegate;
- (void)textFrameChanged:(id)arg1;
- (void)setInitialDirection;
- (void)layoutHasChanged;
- (void)setCaretBlinks:(BOOL)arg1;
- (void)updateLayout;
- (void)detach;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (BOOL)hasMarkedText;
- (int)returnKeyType;
- (void)unmarkText;
- (void)deleteBackward;
- (void)insertText:(id)arg1;
- (void)textDidChange:(id)arg1;
- (void)textWillChange:(id)arg1;
- (id)inputDelegate;
- (void)setSelectionWithPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)textInputTraits;
- (id)selectionView;
- (void)revealHiddenCandidates;
- (void)jumpToCompositions;
- (void)showNextPage;
- (void)showPreviousCandidate;
- (void)candidateListSelectionDidChange:(id)arg1;
- (void)candidateListAcceptCandidate:(id)arg1;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (void)_willMoveToWindow:(id)arg1 withAncestorView:(id)arg2;
- (void)didMoveToSuperview;
- (void)_moveWithEvent:(id)arg1;
- (BOOL)canHandleEvent:(id)arg1;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2;
- (void)_physicalButtonsCancelled:(id)arg1 withEvent:(id)arg2;
- (void)_physicalButtonsEnded:(id)arg1 withEvent:(id)arg2;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)handleKeyEvent:(id)arg1;
- (void)_physicalButtonsBegan:(id)arg1 withEvent:(id)arg2;
- (void)ejectKeyDown;
- (int)interfaceOrientation;
- (void)cancelAllKeyEvents;
- (id)delegate;
- (void)removeFromSuperview;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (void)setShift:(BOOL)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)autocorrectionPreferenceForTraits;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)setDelegate:(id)arg1;

@end
