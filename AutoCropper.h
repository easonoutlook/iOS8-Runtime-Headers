/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage
 */

@class NSNumber;

@interface AutoCropper : NSObject  {
    NSNumber *bufferZone;
    BOOL shouldFavorBottom;
    BOOL shouldFavorTop;
    struct CGSize { 
        float width; 
        float height; 
    } originalImageSize;
}

@property(retain) NSNumber * bufferZone;
@property BOOL shouldFavorBottom;
@property BOOL shouldFavorTop;
@property struct CGSize { float x1; float x2; } originalImageSize;


- (id)init;
- (void)setOriginalImageSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })originalImageSize;
- (BOOL)shouldFavorBottom;
- (BOOL)shouldFavorTop;
- (void)setBufferZone:(id)arg1;
- (id)bufferZone;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })computeClippingWithinSize:(struct CGSize { float x1; float x2; })arg1 forMultipleRects:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })computeClippingWithinSize:(struct CGSize { float x1; float x2; })arg1 forImportantRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 andType:(int)arg3 restrictRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })computeClippingWithinSize:(struct CGSize { float x1; float x2; })arg1 andImportantRects:(id)arg2;
- (id)clusterRects:(id)arg1;
- (int)getRatioOfSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })computeClippingWithinSize:(struct CGSize { float x1; float x2; })arg1 andImportantRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })expandRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toContainRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })scaleRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 byScale:(float)arg2;
- (int)determineBestPositionWithinSize:(struct CGSize { float x1; float x2; })arg1 forImportantRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 restrictRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })scaleRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toFitSize:(struct CGSize { float x1; float x2; })arg2 withAnchorPoint:(struct CGPoint { float x1; float x2; })arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectWithSize:(struct CGSize { float x1; float x2; })arg1 andPoint:(struct CGPoint { float x1; float x2; })arg2 inPosition:(int)arg3 fromOriginalSize:(struct CGSize { float x1; float x2; })arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectContainingRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 andOtherRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)setShouldFavorBottom:(BOOL)arg1;
- (void)setShouldFavorTop:(BOOL)arg1;

@end
