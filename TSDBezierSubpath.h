/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSDBezierPath, NSMutableArray, TSDBezierNode;

@interface TSDBezierSubpath : NSObject  {
    NSMutableArray *mNodes;
    BOOL mClosed;
}

@property(retain) NSMutableArray * nodes;
@property(getter=isClosed) BOOL closed;
@property(readonly) BOOL isRectangular;
@property(readonly) TSDBezierPath * bezierPath;
@property(readonly) TSDBezierNode * firstNode;
@property(readonly) TSDBezierNode * lastNode;
@property(readonly) BOOL allNodesSelected;
@property(readonly) BOOL hasSelectedNode;
@property(readonly) BOOL canDeleteSelectedNodes;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } nodeBounds;
@property(readonly) BOOL closeIfEndpointsAreEqual;


- (void)removeNode:(id)arg1;
- (void)addNode:(id)arg1;
- (id)nodes;
- (BOOL)isCircular;
- (BOOL)isRectangular;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (id)lastNode;
- (BOOL)isClosed;
- (void)setClosed:(BOOL)arg1;
- (void)setNodes:(id)arg1;
- (id)firstNode;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)bezierPath;
- (id)description;
- (void)dealloc;
- (id)init;
- (void)addTemporarySmoothNodes;
- (void)removeTemporaryNodes;
- (void)updateSmoothNodes:(id)arg1 addTemporaryNodes:(BOOL)arg2;
- (int)updateSmoothNodes:(id)arg1 from:(int)arg2 to:(int)arg3 closed:(BOOL)arg4 addTemporaryNodes:(BOOL)arg5;
- (struct CGPoint { float x1; float x2; })calculateNewControlFromOriginalDelta:(struct CGPoint { float x1; float x2; })arg1 currentDelta:(struct CGPoint { float x1; float x2; })arg2 originalSmoothDelta:(struct CGPoint { float x1; float x2; })arg3 node:(struct CGPoint { float x1; float x2; })arg4;
- (void)morphWithMorphInfo:(id)arg1;
- (void)updateSmoothNodes;
- (void)smoothAllNodes;
- (void)convertToHobby;
- (void)addNodesToArray:(id)arg1;
- (BOOL)closeIfEndpointsAreEqual;
- (void)smoothNode:(id)arg1;
- (void)sharpenAllNodes;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })nodeBounds;
- (id)insertNodeAtPoint:(struct CGPoint { float x1; float x2; })arg1 tolerance:(float)arg2;
- (id)bezierNodeUnderPoint:(struct CGPoint { float x1; float x2; })arg1 withTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg2 andTolerance:(float)arg3 returningType:(int*)arg4;
- (void)deselectAllNodes;
- (void)selectAllNodes;
- (void)deleteSelectedNodes;
- (BOOL)canDeleteSelectedNodes;
- (BOOL)hasSelectedNode;
- (BOOL)allNodesSelected;
- (void)offsetSelectedEdgesByDelta:(struct CGPoint { float x1; float x2; })arg1;
- (void)offsetSelectedNodesByDelta:(struct CGPoint { float x1; float x2; })arg1;
- (void)reverseDirection;
- (void)appendToBezierPath:(id)arg1;
- (id)splitEdgeAtIndex:(unsigned int)arg1 atPercentage:(float)arg2;
- (void)removeLastNode;
- (id)nodeAfterNode:(id)arg1;
- (id)nodePriorToNode:(id)arg1;
- (void)appendToBezierPath:(id)arg1 selectedNodesOnly:(BOOL)arg2 fromIndex:(unsigned int)arg3;
- (void)updateReflectedState;
- (float)distanceToPoint:(struct CGPoint { float x1; float x2; })arg1 elementIndex:(unsigned int*)arg2 tValue:(float*)arg3 threshold:(float)arg4;

@end
