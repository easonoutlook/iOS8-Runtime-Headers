/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSXPCInterface, NSString, NSXPCConnection;

@interface NSURLStorage_CacheClient : NSObject <NSURLStorageCacheClient> {
    NSXPCInterface *_netStoreInterface;
    NSXPCConnection *_networkStorageConnection;
    NSString *_taskManagerIdentifier;
    NSString *_path;

  /* Error parsing encoded ivar type info: ^{__CFURLCache=^^?^i@@?iiiiiiiiI^{__CFString}^{__CFString}^{__CFString}*BB^{sqlite3}^{sqlite3}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}^{CoreLockable}^{CoreLockable}^{CoreLockable}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}{unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > >={__hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> >=f}}}{deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> >={__split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> >=^^^{__CFURLCacheNode}^^^{__CFURLCacheNode}^^^{__CFURLCacheNode}{__compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> >=^^^{__CFURLCacheNode}}}I{__compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> >=L}}^{__CFRunLoopSource}^{_opaque_pthread_t}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}^{__CFArray}^{__CFArray}BB@@B@^{_CFURLCache}BBillB^{__asl_object_s}SlBBBBiBBi@^{__CFSet}^{__CFArray}i@{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}^{__CFDictionary}B} */
    struct __CFURLCache { int (**x1)(); int *x2; id x3; id x4; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; unsigned int x14; struct __CFString {} *x15; struct __CFString {} *x16; struct __CFString {} *x17; char *x18; boolx19; boolx20; struct sqlite3 {} *x21; struct sqlite3 {} *x22; struct _opaque_pthread_mutex_t { long x_23_1_1; BOOL x_23_1_2[40]; } x23; struct _opaque_pthread_mutex_t { long x_24_1_1; BOOL x_24_1_2[40]; } x24; struct CoreLockable {} *x25; struct CoreLockable {} *x26; struct CoreLockable {} *x27; struct sqlite3_stmt {} *x28; struct sqlite3_stmt {} *x29; struct sqlite3_stmt {} *x30; struct sqlite3_stmt {} *x31; struct sqlite3_stmt {} *x32; struct sqlite3_stmt {} *x33; struct sqlite3_stmt {} *x34; struct sqlite3_stmt {} *x35; struct sqlite3_stmt {} *x36; struct sqlite3_stmt {} *x37; struct sqlite3_stmt {} *x38; struct sqlite3_stmt {} *x39; struct sqlite3_stmt {} *x40; struct sqlite3_stmt {} *x41; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_42_1_1; } x42; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_43_1_1; unsigned int x_43_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_43_1_3; } x43; struct __CFRunLoopSource {} *x44; struct _opaque_pthread_t {} *x45; struct _opaque_pthread_mutex_t { long x_46_1_1; BOOL x_46_1_2[40]; } x46; struct _opaque_pthread_mutex_t { long x_47_1_1; BOOL x_47_1_2[40]; } x47; struct _opaque_pthread_mutex_t { long x_48_1_1; BOOL x_48_1_2[40]; } x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; struct _opaque_pthread_mutex_t { long x_50_1_1; BOOL x_50_1_2[40]; } x50; struct __CFArray {} *x51; struct __CFArray {} *x52; boolx53; boolx54; id x55; id x56; boolx57; id x58; struct _CFURLCache {} *x59; boolx60; boolx61; int x62; long x63; long x64; boolx65; struct __asl_object_s {} *x66; unsigned short x67; long x68; boolx69; boolx70; boolx71; boolx72; int x73; boolx74; boolx75; int x76; id x77; struct __CFSet {} *x78; struct __CFArray {} *x79; int x80; id x81; struct _opaque_pthread_mutex_t { long x_82_1_1; BOOL x_82_1_2[40]; } x82; struct _opaque_pthread_mutex_t { long x_83_1_1; BOOL x_83_1_2[40]; } x83; struct __CFDictionary {} *x84; boolx85; } *_cfCache;

}


- (id)getPath;
- (void)setMaxSize:(int)arg1;
- (void)dealloc;
- (void)notifyCachedURLResponseBecameFileBacked:(id)arg1 filePath:(id)arg2 forUUID:(id)arg3;
- (void)deleteResponseForRequestWithKey:(id)arg1 withCompletionHandler:(id)arg2;
- (void)addCachedResponse:(id)arg1 key:(id)arg2;
- (void)deleteAllResponses;
- (int)currentDiskUsage;
- (void)cachedResponseForKey:(id)arg1 handler:(id)arg2;
- (void)deleteAllHostNames:(id)arg1 forOptionalPartition:(id)arg2;
- (void)copyHostNamesForOptionalPartition:(id)arg1 handler:(id)arg2;
- (void)copyAllPartitionNamesWithCompletionHandler:(id)arg1;
- (BOOL)createStorageTaskManagerForPath:(id)arg1 maxSize:(int)arg2 extension:(id)arg3 withIdentifier:(id)arg4;
- (id)initWithCache:(struct __CFURLCache { int (**x1)(); int *x2; id x3; id x4; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; unsigned int x14; struct __CFString {} *x15; struct __CFString {} *x16; struct __CFString {} *x17; char *x18; boolx19; boolx20; struct sqlite3 {} *x21; struct sqlite3 {} *x22; struct _opaque_pthread_mutex_t { long x_23_1_1; BOOL x_23_1_2[40]; } x23; struct _opaque_pthread_mutex_t { long x_24_1_1; BOOL x_24_1_2[40]; } x24; struct CoreLockable {} *x25; struct CoreLockable {} *x26; struct CoreLockable {} *x27; struct sqlite3_stmt {} *x28; struct sqlite3_stmt {} *x29; struct sqlite3_stmt {} *x30; struct sqlite3_stmt {} *x31; struct sqlite3_stmt {} *x32; struct sqlite3_stmt {} *x33; struct sqlite3_stmt {} *x34; struct sqlite3_stmt {} *x35; struct sqlite3_stmt {} *x36; struct sqlite3_stmt {} *x37; struct sqlite3_stmt {} *x38; struct sqlite3_stmt {} *x39; struct sqlite3_stmt {} *x40; struct sqlite3_stmt {} *x41; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_42_1_1; } x42; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_43_1_1; unsigned int x_43_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_43_1_3; } x43; struct __CFRunLoopSource {} *x44; struct _opaque_pthread_t {} *x45; struct _opaque_pthread_mutex_t { long x_46_1_1; BOOL x_46_1_2[40]; } x46; struct _opaque_pthread_mutex_t { long x_47_1_1; BOOL x_47_1_2[40]; } x47; struct _opaque_pthread_mutex_t { long x_48_1_1; BOOL x_48_1_2[40]; } x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; struct _opaque_pthread_mutex_t { long x_50_1_1; BOOL x_50_1_2[40]; } x50; struct __CFArray {} *x51; struct __CFArray {} *x52; boolx53; boolx54; id x55; id x56; boolx57; id x58; struct _CFURLCache {} *x59; boolx60; boolx61; int x62; long x63; long x64; boolx65; struct __asl_object_s {} *x66; unsigned short x67; long x68; boolx69; boolx70; boolx71; boolx72; int x73; boolx74; boolx75; int x76; id x77; struct __CFSet {} *x78; struct __CFArray {} *x79; int x80; id x81; struct _opaque_pthread_mutex_t { long x_82_1_1; BOOL x_82_1_2[40]; } x82; struct _opaque_pthread_mutex_t { long x_83_1_1; BOOL x_83_1_2[40]; } x83; struct __CFDictionary {} *x84; boolx85; }*)arg1;
     /* Encoded args for previous method: @12@0:4^{__CFURLCache=^^?^i@@?iiiiiiiiI^{__CFString}^{__CFString}^{__CFString}*BB^{sqlite3}^{sqlite3}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}^{CoreLockable}^{CoreLockable}^{CoreLockable}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}^{sqlite3_stmt}{unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > >={__hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> >=f}}}{deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> >={__split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> >=^^^{__CFURLCacheNode}^^^{__CFURLCacheNode}^^^{__CFURLCacheNode}{__compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> >=^^^{__CFURLCacheNode}}}I{__compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> >=L}}^{__CFRunLoopSource}^{_opaque_pthread_t}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}^{__CFArray}^{__CFArray}BB@@B@^{_CFURLCache}BBillB^{__asl_object_s}SlBBBBiBBi@^{__CFSet}^{__CFArray}i@{_opaque_pthread_mutex_t=l[40c]}{_opaque_pthread_mutex_t=l[40c]}^{__CFDictionary}B}8 */

- (void)setMinSizeForVMCachedResource:(int)arg1;
- (void)deleteResponsesSinceDate:(id)arg1;

@end
