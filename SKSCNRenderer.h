/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class SKLabelNode, SKScene;

@interface SKSCNRenderer : NSObject  {
    double _timePreviousUpdate;
    SKLabelNode *_statsLabel;
    float _prevViewAspect;
    unsigned int _spritesRendered;
    unsigned int _spritesSubmitted;
    int _frames;
    unsigned int _prevSpritesRendered;
    unsigned int _prevSpritesRenderedSubmitted;
    double _timeBeginFrameCount;
    float _fps;
    BOOL _hasRenderedOnce;
    BOOL _hasRenderedForCurrentUpdate;
    BOOL _isInTransition;
    BOOL _disableInput;
    SKScene *_scene;

  /* Error parsing encoded ivar type info: ^{SKCRenderer=@@ccff@@f{?=ff}{?=^{xglProgram}{?={?=ff}{?=ff}}I(_GLKMatrix4={?=ffffffffffffffff}[16f])III{?=ffff}i{?=ff}{?=IIII{?=ff}c}}{?=^{xglProgram}{?={?=ff}{?=ff}}I(_GLKMatrix4={?=ffffffffffffffff}[16f])III{?=ffff}i{?=ff}{?=IIII{?=ff}c}}{stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect> > >={deque<PKRect, std::__1::allocator<PKRect> >={__split_buffer<PKRect *, std::__1::allocator<PKRect *> >=^^{?}^^{?}^^{?}{__compressed_pair<PKRect **, std::__1::allocator<PKRect *> >=^^{?}}}I{__compressed_pair<unsigned long, std::__1::allocator<PKRect> >=L}}}{stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > >={deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> >={__split_buffer<_GLKMatrix4 *, std::__1::allocator<_GLKMatrix4 *> >=^^(_GLKMatrix4)^^(_GLKMatrix4)^^(_GLKMatrix4){__compressed_pair<_GLKMatrix4 **, std::__1::allocator<_GLKMatrix4 *> >=^^(_GLKMatrix4)}}I{__compressed_pair<unsigned long, std::__1::allocator<_GLKMatrix4> >=L}}}{stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > >={deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> >={__split_buffer<SKCTextureAttachment *, std::__1::allocator<SKCTextureAttachment *> >=^^{?}^^{?}^^{?}{__compressed_pair<SKCTextureAttachment **, std::__1::allocator<SKCTextureAttachment *> >=^^{?}}}I{__compressed_pair<unsigned long, std::__1::allocator<SKCTextureAttachment> >=L}}}{?=ff}{?=ff}{SKCRenderPassNew=^{xglProgram}(_GLKMatrix4={?=ffffffffffffffff}[16f])ILIIi{?={?=ff}{?=ff}}^{SKCSprite}IBBBBBBBBB{?=IIII{?=ff}c}BBBBBBBBBBB@ffI{?=ffff}@{?={?=ff}{?=ff}}{?={?=ff}{?=ff}}{?=ff}fIB*@}IiififIIIIIIffIIIIdfIi@@@@BBBB{list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew> >={__list_node_base<SKCRenderPassNew, void *>=^{__list_node<SKCRenderPassNew, void *>}^{__list_node<SKCRenderPassNew, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderPassNew, void *> > >=L}}II^S[10500{?=[4{?=(_GLKVector4={?=ffff}{?=ffff}{?=ffff}[4f])[4C][3f]}]}]IIII^{xglProgram}^{xglProgram}^{xglProgram}^{xglProgram}^{xglProgram}^{xglProgram}@i@iII{list<SKCSprite *, std::__1::allocator<SKCSprite *> >={__list_node_base<SKCSprite *, void *>=^{__list_node<SKCSprite *, void *>}^{__list_node<SKCSprite *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > >=L}}{vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >=^^{SpriteRenderInfo}^^{SpriteRenderInfo}{__compressed_pair<const SKCRenderer::SpriteRenderInfo **, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >=^^{SpriteRenderInfo}}}{vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo> >=^{SpriteRenderInfo}^{SpriteRenderInfo}{__compressed_pair<SKCRenderer::SpriteRenderInfo *, std::__1::allocator<SKCRenderer::SpriteRenderInfo> >=^{SpriteRenderInfo}}}{SKRenderQuadPool={vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *> >=^^{?}^^{?}{__compressed_pair<SKRenderQuad **, std::__1::allocator<SKRenderQuad *> >=^^{?}}}II^{?}I}{map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint> > >={__tree<std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, PKPoint> > >=^{__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true> >=L}}}{list<const SKCSprite *, std::__1::allocator<const SKCSprite *> >={__list_node_base<const SKCSprite *, void *>=^{__list_node<const SKCSprite *, void *>}^{__list_node<const SKCSprite *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<const SKCSprite *, void *> > >=L}}{map<const SKCSprite *, SKCRenderPassNew, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, SKCRenderPassNew> > >={__tree<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew> > >=^{__tree_node<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, std::__1::less<const SKCSprite *>, true> >=L}}}{map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > >={__tree<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > >=^{__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true> >=L}}}@BBBBBBBBBBBBB} */
    struct SKCRenderer { id x1; id x2; BOOL x3; BOOL x4; float x5; float x6; id x7; id x8; float x9; struct { float x_10_1_1; float x_10_1_2; } x10; struct { struct xglProgram {} *x_11_1_1; struct { struct { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_11_1_2; unsigned int x_11_1_3; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_4_2_1; float x_4_2_2[16]; } x_11_1_4; unsigned int x_11_1_5; unsigned int x_11_1_6; unsigned int x_11_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; } x_11_1_8; int x_11_1_9; struct { float x_10_2_1; float x_10_2_2; } x_11_1_10; struct { unsigned int x_11_2_1; unsigned int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; struct { float x_5_3_1; float x_5_3_2; } x_11_2_5; BOOL x_11_2_6; } x_11_1_11; } x11; struct { struct xglProgram {} *x_12_1_1; struct { struct { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_12_1_2; unsigned int x_12_1_3; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_4_2_1; float x_4_2_2[16]; } x_12_1_4; unsigned int x_12_1_5; unsigned int x_12_1_6; unsigned int x_12_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; } x_12_1_8; int x_12_1_9; struct { float x_10_2_1; float x_10_2_2; } x_12_1_10; struct { unsigned int x_11_2_1; unsigned int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; struct { float x_5_3_1; float x_5_3_2; } x_11_2_5; BOOL x_11_2_6; } x_12_1_11; } x12; struct stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect> > > { struct deque<PKRect, std::__1::allocator<PKRect> > { struct __split_buffer<PKRect *, std::__1::allocator<PKRect *> > { struct { /* ? */ } **x_1_3_1; struct { /* ? */ } **x_1_3_2; struct { /* ? */ } **x_1_3_3; struct __compressed_pair<PKRect **, std::__1::allocator<PKRect *> > { struct { /* ? */ } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned int x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<PKRect> > { unsigned long x_3_3_1; } x_1_2_3; } x_13_1_1; } x13; struct stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > > { struct deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > { struct __split_buffer<_GLKMatrix4 *, std::__1::allocator<_GLKMatrix4 *> > { union { /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_1_4_1; void*x_1_4_2; unsigned long x_1_4_3; void*x_1_4_4; void*x_1_4_5; void*x_1_4_6; void*x_1_4_7; const int x_1_4_8; void*x_1_4_9; void*x_1_4_10; } **x_1_3_1; union { void*x_2_4_1; void*x_2_4_2; unsigned long x_2_4_3; void*x_2_4_4; void*x_2_4_5; void*x_2_4_6; void*x_2_4_7; const int x_2_4_8; void*x_2_4_9; void*x_2_4_10; } **x_1_3_2; union { void*x_3_4_1; void*x_3_4_2; unsigned long x_3_4_3; void*x_3_4_4; void*x_3_4_5; void*x_3_4_6; void*x_3_4_7; const int x_3_4_8; void*x_3_4_9; void*x_3_4_10; } **x_1_3_3; struct __compressed_pair<_GLKMatrix4 **, std::__1::allocator<_GLKMatrix4 *> > { union { void*x_1_5_1; void*x_1_5_2; unsigned long x_1_5_3; void*x_1_5_4; void*x_1_5_5; void*x_1_5_6; void*x_1_5_7; const int x_1_5_8; void*x_1_5_9; void*x_1_5_10; } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned int x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<_GLKMatrix4> > { unsigned long x_3_3_1; } x_1_2_3; } x_14_1_1; } x14; struct stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > > { struct deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > { struct __split_buffer<SKCTextureAttachment *, std::__1::allocator<SKCTextureAttachment *> > { struct { /* ? */ } **x_1_3_1; struct { /* ? */ } **x_1_3_2; struct { /* ? */ } **x_1_3_3; struct __compressed_pair<SKCTextureAttachment **, std::__1::allocator<SKCTextureAttachment *> > { struct { /* ? */ } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned int x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<SKCTextureAttachment> > { unsigned long x_3_3_1; } x_1_2_3; } x_15_1_1; } x15; struct { float x_16_1_1; float x_16_1_2; } x16; struct { float x_17_1_1; float x_17_1_2; } x17; struct SKCRenderPassNew { struct xglProgram {} *x_18_1_1; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_2_2_1; float x_2_2_2[16]; } x_18_1_2; unsigned int x_18_1_3; unsigned long x_18_1_4; unsigned int x_18_1_5; unsigned int x_18_1_6; int x_18_1_7; struct { struct { float x_1_3_1; float x_1_3_2; } x_8_2_1; struct { float x_2_3_1; float x_2_3_2; } x_8_2_2; } x_18_1_8; struct SKCSprite {} *x_18_1_9; unsigned int x_18_1_10; boolx_18_1_11; boolx_18_1_12; boolx_18_1_13; boolx_18_1_14; boolx_18_1_15; boolx_18_1_16; boolx_18_1_17; boolx_18_1_18; boolx_18_1_19; struct { unsigned int x_20_2_1; unsigned int x_20_2_2; unsigned int x_20_2_3; unsigned int x_20_2_4; struct { float x_5_3_1; float x_5_3_2; } x_20_2_5; BOOL x_20_2_6; } x_18_1_20; boolx_18_1_21; boolx_18_1_22; boolx_18_1_23; boolx_18_1_24; boolx_18_1_25; boolx_18_1_26; boolx_18_1_27; boolx_18_1_28; boolx_18_1_29; boolx_18_1_30; boolx_18_1_31; id x_18_1_32; float x_18_1_33; float x_18_1_34; unsigned int x_18_1_35; struct { float x_36_2_1; float x_36_2_2; float x_36_2_3; float x_36_2_4; } x_18_1_36; id x_18_1_37; struct { struct { float x_1_3_1; float x_1_3_2; } x_38_2_1; struct { float x_2_3_1; float x_2_3_2; } x_38_2_2; } x_18_1_38; struct { struct { float x_1_3_1; float x_1_3_2; } x_39_2_1; struct { float x_2_3_1; float x_2_3_2; } x_39_2_2; } x_18_1_39; struct { float x_40_2_1; float x_40_2_2; } x_18_1_40; float x_18_1_41; unsigned int x_18_1_42; boolx_18_1_43; char *x_18_1_44; id x_18_1_45; } x18; unsigned int x19; int x20; int x21; float x22; int x23; float x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned int x30; float x31; float x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; double x37; float x38; unsigned int x39; int x40; id x41; id x42; id x43; id x44; boolx45; boolx46; boolx47; boolx48; struct list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew> > { struct __list_node_base<SKCRenderPassNew, void *> { struct __list_node<SKCRenderPassNew, void *> {} *x_1_2_1; struct __list_node<SKCRenderPassNew, void *> {} *x_1_2_2; } x_49_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderPassNew, void *> > > { unsigned long x_2_2_1; } x_49_1_2; } x49; unsigned int x50; unsigned int x51; unsigned short *x52; struct { struct { union _GLKVector4 { struct { float x_1_4_1; float x_1_4_2; float x_1_4_3; float x_1_4_4; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; } x_1_3_2; struct { float x_3_4_1; float x_3_4_2; float x_3_4_3; float x_3_4_4; } x_1_3_3; float x_1_3_4[4]; } x_1_2_1; unsigned char x_1_2_2[4]; float x_1_2_3[3]; } x_53_1_1[4]; } x53[10500]; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; struct xglProgram {} *x58; struct xglProgram {} *x59; struct xglProgram {} *x60; struct xglProgram {} *x61; struct xglProgram {} *x62; struct xglProgram {} *x63; id x64; int x65; id x66; int x67; unsigned int x68; unsigned int x69; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > { struct __list_node_base<SKCSprite *, void *> { struct __list_node<SKCSprite *, void *> {} *x_1_2_1; struct __list_node<SKCSprite *, void *> {} *x_1_2_2; } x_70_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > > { unsigned long x_2_2_1; } x_70_1_2; } x70; struct vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > { struct SpriteRenderInfo {} **x_71_1_1; struct SpriteRenderInfo {} **x_71_1_2; struct __compressed_pair<const SKCRenderer::SpriteRenderInfo **, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > { struct SpriteRenderInfo {} **x_3_2_1; } x_71_1_3; } x71; struct vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo> > { struct SpriteRenderInfo {} *x_72_1_1; struct SpriteRenderInfo {} *x_72_1_2; struct __compressed_pair<SKCRenderer::SpriteRenderInfo *, std::__1::allocator<SKCRenderer::SpriteRenderInfo> > { struct SpriteRenderInfo {} *x_3_2_1; } x_72_1_3; } x72; struct SKRenderQuadPool { struct vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *> > { struct { /* ? */ } **x_1_2_1; struct { /* ? */ } **x_1_2_2; struct __compressed_pair<SKRenderQuad **, std::__1::allocator<SKRenderQuad *> > { struct { /* ? */ } **x_3_3_1; } x_1_2_3; } x_73_1_1; unsigned int x_73_1_2; unsigned int x_73_1_3; struct { /* ? */ } *x_73_1_4; unsigned int x_73_1_5; } x73; struct map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint> > > { struct __tree<std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, PKPoint> > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_74_1_1; } x74; struct list<const SKCSprite *, std::__1::allocator<const SKCSprite *> > { struct __list_node_base<const SKCSprite *, void *> { struct __list_node<const SKCSprite *, void *> {} *x_1_2_1; struct __list_node<const SKCSprite *, void *> {} *x_1_2_2; } x_75_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<const SKCSprite *, void *> > > { unsigned long x_2_2_1; } x_75_1_2; } x75; struct map<const SKCSprite *, SKCRenderPassNew, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, SKCRenderPassNew> > > { struct __tree<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew> > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, SKCRenderPassNew>, std::__1::less<const SKCSprite *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_76_1_1; } x76; struct map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > > { struct __tree<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_77_1_1; } x77; id x78; boolx79; boolx80; boolx81; boolx82; boolx83; boolx84; boolx85; boolx86; boolx87; boolx88; boolx89; boolx90; boolx91; } *_renderer;

    float _prevBackingScaleFactor;
    BOOL showsFPS;
    BOOL showsNodeCount;
    float _backingScaleFactor;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _bounds;
}

@property(retain) SKScene * scene;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } bounds;
@property float backingScaleFactor;
@property BOOL showsFPS;
@property BOOL showsDrawCount;
@property BOOL showsNodeCount;
@property BOOL showsPhysics;
@property BOOL showsFields;
@property BOOL ignoresSiblingOrder;

+ (id)rendererWithContext:(id)arg1 options:(id)arg2;

- (struct CGSize { float x1; float x2; })pixelSize;
- (void)_initialize;
- (void)_update:(double)arg1;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)_scene;
- (float)backingScaleFactor;
- (int)_spriteSubmitCount;
- (int)_spriteRenderCount;
- (float)_fps;
- (void)_showAllStats;
- (BOOL)_showsTotalAreaRendered;
- (BOOL)_showsCulledNodesInNodeCount;
- (BOOL)_showsGPUStats;
- (BOOL)_showsCPUStats;
- (BOOL)_showsCoreAnimationFPS;
- (BOOL)_shouldCenterStats;
- (void)set_shouldCenterStats:(BOOL)arg1;
- (BOOL)_showsSpriteBounds;
- (void)set_showsSpriteBounds:(BOOL)arg1;
- (BOOL)showsFields;
- (BOOL)showsDrawCount;
- (BOOL)showsQuadCount;
- (BOOL)showsNodeCount;
- (BOOL)showsFPS;
- (BOOL)showsSpriteBounds;
- (BOOL)ignoresSiblingOrder;
- (void)setIgnoresSiblingOrder:(BOOL)arg1;
- (void)setShowsFields:(BOOL)arg1;
- (void)set_showsTotalAreaRendered:(BOOL)arg1;
- (void)set_showsCoreAnimationFPS:(BOOL)arg1;
- (void)set_showsCPUStats:(BOOL)arg1;
- (void)set_showsGPUStats:(BOOL)arg1;
- (void)set_showsCulledNodesInNodeCount:(BOOL)arg1;
- (void)setShowsQuadCount:(BOOL)arg1;
- (void)setShowsDrawCount:(BOOL)arg1;
- (void)setupContext;
- (void)setShowsNodeCount:(BOOL)arg1;
- (void)setShowsFPS:(BOOL)arg1;
- (void)setShowsSpriteBounds:(BOOL)arg1;
- (BOOL)showsPhysics;
- (void)setShowsPhysics:(BOOL)arg1;
- (void)render:(BOOL)arg1;
- (void)updateAtTime:(double)arg1;
- (void)setBackingScaleFactor:(float)arg1;
- (void)setScene:(id)arg1;
- (id)scene;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)dealloc;
- (id)init;

@end
