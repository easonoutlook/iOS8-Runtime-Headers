/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/AVFoundation.framework/libAVFAudio.dylib
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, <AVVoiceControllerRecordDelegate>, <Endpointer>, NSDictionary, <AVVoiceControllerPlaybackDelegate>;

@interface AVVoiceController : NSObject  {
    void *_impl;
}

@property(getter=isBargeInDetectEnabled) BOOL bargeInDetectEnabled;
@property(getter=isStopOnBargeInEnabled) BOOL stopOnBargeInEnabled;
@property(copy,readonly) NSString * recordRoute;
@property(readonly) unsigned long long lastRecordStartTime;
@property(readonly) NSDictionary * voiceTriggerInfo;
@property(getter=isSynchronousCallbackEnabled) BOOL synchronousCallbackEnabled;
@property(readonly) NSDictionary * recordSettings;
@property(getter=isRecording,readonly) BOOL recording;
@property(retain) <Endpointer> * endpointerDelegate;
@property int recordEndpointMode;
@property double recordStartWaitTime;
@property double recordInterspeechWaitTime;
@property double recordEndWaitTime;
@property <AVVoiceControllerRecordDelegate> * recordDelegate;
@property(getter=isMeteringEnabled) BOOL meteringEnabled;
@property(readonly) NSDictionary * playbackSettings;
@property(getter=isPlaying,readonly) BOOL playing;
@property <AVVoiceControllerPlaybackDelegate> * playbackDelegate;
@property float playbackVolume;
@property(getter=isStopOnEndpointEnabled) BOOL stopOnEndpointEnabled;
@property float alertVolume;


- (BOOL)isPlaying;
- (void)releaseAudioSession:(unsigned int)arg1;
- (BOOL)playAlertSoundForType:(int)arg1;
- (BOOL)startRecording;
- (BOOL)prepareRecordWithSettings:(id)arg1 error:(id*)arg2;
- (BOOL)setCurrentContext:(id)arg1 error:(id*)arg2;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (void)setMeteringEnabled:(BOOL)arg1;
- (id)initWithContext:(id)arg1 error:(id*)arg2;
- (float)averagePowerForChannel:(unsigned int)arg1;
- (void)updateMeters;
- (void)setRecordDelegate:(id)arg1;
- (void)releaseAudioSession;
- (BOOL)isRecording;
- (void)stopRecording;
- (void)dealloc;
- (void)finalize;
- (void)setStopOnEndpointEnabled:(BOOL)arg1;
- (BOOL)isStopOnEndpointEnabled;
- (float)peakPowerForChannel:(unsigned int)arg1;
- (BOOL)isMeteringEnabled;
- (float)playbackVolume;
- (void)setPlaybackVolume:(float)arg1;
- (float)alertVolume;
- (void)setAlertVolume:(float)arg1;
- (BOOL)setPlaybackBufferDuration:(double)arg1;
- (double)getPlaybackBufferDuration;
- (id)playbackSettings;
- (void)setPlaybackDelegate:(id)arg1;
- (id)playbackDelegate;
- (void)setRecordEndWaitTime:(double)arg1;
- (double)recordEndWaitTime;
- (void)setRecordInterspeechWaitTime:(double)arg1;
- (double)recordInterspeechWaitTime;
- (void)setRecordStartWaitTime:(double)arg1;
- (double)recordStartWaitTime;
- (void)setRecordEndpointMode:(int)arg1;
- (int)recordEndpointMode;
- (void)setEndpointerDelegate:(id)arg1;
- (id)endpointerDelegate;
- (BOOL)setRecordBufferDuration:(double)arg1;
- (double)getRecordBufferDuration;
- (id)recordSettings;
- (id)recordDelegate;
- (void)stopPlaying;
- (BOOL)startPlaying;
- (BOOL)preparePlaybackFromURL:(id)arg1 error:(id*)arg2;
- (BOOL)preparePlaybackWithSettings:(id)arg1 error:(id*)arg2;
- (BOOL)willAcceptContext:(id)arg1;
- (void)prewarmAudioSession;
- (void)setSynchronousCallbackEnabled:(BOOL)arg1;
- (BOOL)isSynchronousCallbackEnabled;
- (void)setStopOnBargeInEnabled:(BOOL)arg1;
- (BOOL)isStopOnBargeInEnabled;
- (void)setBargeInDetectEnabled:(BOOL)arg1;
- (BOOL)isBargeInDetectEnabled;
- (id)voiceTriggerInfo;
- (unsigned long long)lastRecordStartTime;
- (id)recordRoute;
- (void)endPlaybackInterruption;
- (void)beginPlaybackInterruption;
- (void)endRecordInterruption;
- (void)beginRecordInterruption;
- (void)decodeError;
- (void)finishedPlaying;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; }*)arg1;
- (void)beganPlaying;
- (void)encodeError;
- (void)endpointDetected;
- (void)interspeechPointDetected;
- (void)startpointDetected;
- (void)finishedRecording;
- (void)recordBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; }*)arg1;
- (void)beganRecording;
- (void)hardwareConfigChanged;
- (void)removeSessionNotifications;
- (void)setSessionNotifications;
- (struct ControllerImpl { int (**x1)(); id x2; id x3; struct CAStreamBasicDescription { double x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; unsigned int x_4_1_4; unsigned int x_4_1_5; unsigned int x_4_1_6; unsigned int x_4_1_7; unsigned int x_4_1_8; unsigned int x_4_1_9; } x4; double x5; boolx6; struct AudioQueueLevelMeterState {} *x7; struct OpaqueAudioQueue {} *x8; int x9; struct OpaqueAudioConverter {} *x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; struct AudioQueueBuffer {} **x15; int x16; unsigned long long x17; unsigned long long x18; boolx19; struct MemorySyncBool { boolx_20_1_1; } x20; boolx21; boolx22; float x23; id x24; struct __CFDictionary {} *x25; unsigned int x26; id x27; id x28; struct CAStreamBasicDescription { double x_29_1_1; unsigned int x_29_1_2; unsigned int x_29_1_3; unsigned int x_29_1_4; unsigned int x_29_1_5; unsigned int x_29_1_6; unsigned int x_29_1_7; unsigned int x_29_1_8; unsigned int x_29_1_9; } x29; double x30; struct OpaqueAudioQueue {} *x31; int x32; id x33; unsigned int x34; struct AudioQueueBuffer {} **x35; int x36; boolx37; boolx38; boolx39; boolx40; struct MemorySyncBool { boolx_41_1_1; } x41; boolx42; float x43; unsigned int x44; struct CAStreamBasicDescription { double x_45_1_1; unsigned int x_45_1_2; unsigned int x_45_1_3; unsigned int x_45_1_4; unsigned int x_45_1_5; unsigned int x_45_1_6; unsigned int x_45_1_7; unsigned int x_45_1_8; unsigned int x_45_1_9; } x45; long long x46; struct OpaqueAudioQueue {} *x47; struct map<AVVoiceAlertType, NSURL *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, NSURL *> > > { struct __tree<std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, NSURL *> > > { struct __tree_node<std::__1::__value_type<AVVoiceAlertType, NSURL *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, NSURL *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_48_1_1; } x48; struct map<AVVoiceAlertType, AudioQueueBuffer *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, AudioQueueBuffer *> > > { struct __tree<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *> > > { struct __tree_node<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::less<AVVoiceAlertType>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_49_1_1; } x49; boolx50; boolx51; int x52; float x53; double x54; unsigned long long x55; float x56; float x57; struct OpaqueAudioQueue {} *x58; id x59; struct OpaqueAudioFileID {} *x60; unsigned int x61; struct AudioFormatListItem {} *x62; unsigned int x63; unsigned int x64; char *x65; struct AudioFilePacketTableInfo { long long x_66_1_1; int x_66_1_2; int x_66_1_3; } x66; long long x67; long long x68; boolx69; int x70; int x71; id x72; boolx73; boolx74; boolx75; boolx76; int x77; double x78; double x79; double x80; boolx81; boolx82; boolx83; id x84; unsigned char x85; int x86; boolx87; boolx88; int x89; boolx90; unsigned int x91; int x92; id x93; struct _opaque_pthread_mutex_t { long x_94_1_1; BOOL x_94_1_2[40]; } x94[5]; int x95; int x96; int x97; }*)impl;
- (void)handleMediaServerReset:(id)arg1;
- (void)handleMediaServerDeath:(id)arg1;
- (void)handleRouteChange:(id)arg1;
- (void)handleInterruption:(id)arg1;

@end
