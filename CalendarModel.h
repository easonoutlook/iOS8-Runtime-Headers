/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

@class NSArray, _EKNotificationMonitor, NSCalendar, EKEvent, EKCalendarDate, <OccurrenceCacheDataSourceProtocol>, CalendarEventLoader, NSLock, EKEventStore, NSString, NSSet;

@interface CalendarModel : NSObject <CalendarEventLoaderDelegate> {
    EKEventStore *_eventStore;
    CalendarEventLoader *_eventLoader;
    NSLock *_filterLock;
    NSArray *_visibleCalendars;
    int _readWriteCalendarCount;
    int _invitationBearingStoresExist;
    _EKNotificationMonitor *_notificationMonitor;
    <OccurrenceCacheDataSourceProtocol> *_occurrenceCacheDataSource;
    <OccurrenceCacheDataSourceProtocol> *_occurrenceCacheFilteredDataSource;
    int _cachedFakeTodayIndex;
    NSSet *_selectedCalendars;
    NSString *_searchString;
    NSCalendar *_calendar;
    EKCalendarDate *_selectedDate;
    unsigned int _firstVisibleSecond;
    EKEvent *_selectedOccurrence;
}

@property(readonly) EKEventStore * eventStore;
@property(copy) NSCalendar * calendar;
@property(copy) EKCalendarDate * selectedDate;
@property(readonly) EKCalendarDate * selectedDay;
@property(readonly) int visibleCalendarCount;
@property(readonly) int readWriteCalendarCount;
@property unsigned int firstVisibleSecond;
@property(retain) EKEvent * selectedOccurrence;
@property(retain) NSSet * selectedCalendars;
@property(retain) NSString * searchString;


- (void)_localeChanged:(id)arg1;
- (void)_significantTimeChange:(id)arg1;
- (void)setSearchString:(id)arg1;
- (void).cxx_destruct;
- (id)calendar;
- (void)setCalendar:(id)arg1;
- (id)searchString;
- (double)_tomorrow;
- (void)dealloc;
- (id)init;
- (id)selectedDate;
- (BOOL)searchingOccurrences;
- (id)allNotificationReferences;
- (unsigned int)allNotificationsCount;
- (BOOL)invitationBearingStoresExistForEvents;
- (BOOL)removeEvent:(id)arg1 withSpan:(int)arg2 error:(id*)arg3;
- (void)_systemWake;
- (void)prepareForAppSuspend;
- (void)updateAfterAppResume;
- (void)_occurrenceCacheChanged;
- (void)fetchCachedDaysInBackgroundStartingFromSection:(int)arg1;
- (int)sectionForCachedOccurrencesOnDate:(id)arg1 usingFilter:(BOOL)arg2;
- (int)numberOfCachedOccurrencesInSection:(int)arg1;
- (int)numberOfDaysWithCachedOccurrences;
- (void)setMaxCachedDays:(unsigned int)arg1;
- (void)setDesiredPaddingDays:(unsigned int)arg1;
- (id)closestOccurrenceToTomorrowForEventUID:(int)arg1;
- (id)selectedDateOccurrences:(BOOL)arg1 loadIsComplete:(BOOL*)arg2;
- (id)occurrencesForStartDay:(id)arg1 endDay:(id)arg2 preSorted:(BOOL)arg3 waitForLoad:(BOOL)arg4;
- (id)selectedDay;
- (void)setSelectedDate:(id)arg1;
- (void)refreshCalendarDataIfNeeded:(BOOL)arg1;
- (void)refreshAccountListIfNeeded:(BOOL)arg1;
- (BOOL)isCalendarVisibleWithID:(id)arg1;
- (void)ensureCalendarVisibleWithId:(id)arg1;
- (int)readWriteCalendarCount;
- (BOOL)selectedOccurrenceIsSearchMatch;
- (void)_notificationCountExpired:(id)arg1;
- (void)_notificationsExpired:(id)arg1;
- (void)_reloadIfTodayDetermined;
- (id)_notificationMonitor;
- (void)startNotificationMonitor;
- (void)_invalidateCachedOccurrences;
- (void)fetchCachedDaysInBackgroundStartingFromSection:(int)arg1 usingFilter:(BOOL)arg2;
- (int)sectionForCachedOccurrencesOnDate:(id)arg1 sectionExistsForDay:(BOOL*)arg2;
- (int)cachedFakeTodayIndex;
- (int)sectionForCachedOccurrencesOnDate:(id)arg1 sectionExistsForDay:(BOOL*)arg2 usingFilter:(BOOL)arg3;
- (id)cachedOccurrenceAtIndexPath:(id)arg1;
- (id)cachedOccurrenceAtIndexPath:(id)arg1 usingFilter:(BOOL)arg2;
- (id)dateForCachedOccurrencesInSection:(int)arg1 usingFilter:(BOOL)arg2;
- (int)numberOfCachedOccurrencesInSection:(int)arg1 usingFilter:(BOOL)arg2;
- (id)dateForCachedOccurrencesInSection:(int)arg1;
- (int)sectionForCachedOccurrencesOnDate:(id)arg1;
- (id)_dataSourceUsingFilter:(BOOL)arg1;
- (int)numberOfDaysWithCachedOccurrencesUsingFilter:(BOOL)arg1;
- (BOOL)cachedOccurrencesAreLoaded;
- (BOOL)cachedOccurrencesAreBeingGenerated;
- (id)occurrencesForDay:(id)arg1 waitForLoad:(BOOL)arg2;
- (void)_processReloadForCacheOnly:(BOOL)arg1 includingCalendars:(BOOL)arg2 checkCalendarsValid:(BOOL)arg3;
- (void)_recreateOccurrenceCacheDataSources;
- (void)setSelectedOccurrence:(id)arg1;
- (id)selectedOccurrence;
- (void)_invalidateOccurrenceCacheDataSources;
- (void)_searchResultsAvailable:(id)arg1;
- (void)_tzSupportTodayRolledOver;
- (void)_createOccurrenceCacheDataSources;
- (int)visibleCalendarCount;
- (id)occurrencesForStartDate:(id)arg1 endDate:(id)arg2 preSorted:(BOOL)arg3 waitForLoad:(BOOL)arg4;
- (void)setPreferredReloadStartDate:(id)arg1 endDate:(id)arg2;
- (void)setComponentForExpandingPadding:(unsigned int)arg1;
- (void)setComponentForExpandingRequests:(unsigned int)arg1;
- (void)addOccurrenceAwaitingDeletion:(id)arg1;
- (void)addOccurrenceAwaitingRefresh:(id)arg1;
- (void)calendarEventLoader:(id)arg1 occurrencesDidUpdateBetweenStart:(double)arg2 end:(double)arg3;
- (unsigned int)firstVisibleSecond;
- (void)setFirstVisibleSecond:(unsigned int)arg1;
- (void)_eventStoreChanged:(id)arg1;
- (id)selectedCalendars;
- (void)setSelectedCalendars:(id)arg1;
- (void)_timeZoneChanged:(id)arg1;
- (id)defaultCalendarForNewEvents;
- (id)eventStore;

@end
