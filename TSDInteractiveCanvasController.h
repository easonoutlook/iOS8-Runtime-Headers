/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class TSDContainerRep, NSMutableSet, TSKCommandController, NSMutableArray, TSDGuideController, <TSKDocumentRootProvider>, TSKAccessController, TSDCanvasLayer, TSDCanvasAnimation, NSObject<TSDRulerController>, TSKChangeNotifier, TSDCanvas, CALayer, TSDDynamicOperationController, TSKDocumentRoot, TSDUserDefinedGuideController, NSObject<TSDImageHUDController>, TSDBackgroundLayoutAndRenderState, TSPObjectContext, TSDCanvasView, <TSDEditor>, <TSDInteractiveCanvasControllerDelegate>, NSFormatter, TSDTrackerManipulatorCoordinator, TSDEditorController, <TSDAnnotationPopoverController>, NSArray, TSDTileStorage, NSObject<TSDCanvasEditor>, TSDLayoutController, <TSDCanvasLayerHosting>, <TSDAnnotationHosting>;

@interface TSDInteractiveCanvasController : NSObject <TSDCanvasDelegate, TSDErrorPresenter, TSKChangeSourceObserver, NSCoding, TSKScrollViewDelegate, TSDBackgroundLayoutAndRenderStateDelegate, TSDRepTrackerDelegateCreation> {
    <TSDInteractiveCanvasControllerDelegate> *mDelegate;
    TSDCanvas *mCanvas;
    <TSDCanvasLayerHosting> *mLayerHost;
    struct __CFDictionary { } *mContainerLayersByRep;
    struct __CFDictionary { } *mRepLayersByRep;
    struct __CFDictionary { } *mRepsByRepLayer;
    struct __CFDictionary { } *mRepsByContainerLayer;
    CALayer *mRepContainerLayer;
    TSDEditorController *mEditorController;
    TSDGuideController *mGuideController;
    TSDUserDefinedGuideController *mUserDefinedGuideController;
    NSObject<TSDCanvasEditor> *mCanvasEditor;
    BOOL mHasBeenTornDown;
    BOOL mHadLayerHost;
    BOOL mLayerHostHasBeenTornDown;
    NSFormatter *mUnitFormatter;
    BOOL mResizeCanvasOnLayout;
    BOOL mCreateRepsForOffscreenLayouts;
    BOOL mShouldAutoscrollToSelectionAfterLayout;
    BOOL mSuppressAutozoomToSelectionAfterLayout;
    BOOL mShouldAnimateAutoscroll;
    BOOL mShouldCenterSelectionWhenAutoscrolling;
    CALayer *mOverlayLayer;
    BOOL mOverlayLayerSuppressed;
    CALayer *mPopoutLayer;
    NSMutableArray *mDecorators;
    BOOL mShowGrayOverlay;
    BOOL mInDynamicOperation;
    int mDynamicOperationCounter;
    BOOL mInReadMode;
    BOOL mInVersionBrowsingMode;
    struct CGColor { } *mSelectionHighlightColor;
    BOOL mShowInvisibleObjects;
    TSDCanvasAnimation *mCurrentAnimation;
    TSDTrackerManipulatorCoordinator *mTMCoordinator;
    TSDDynamicOperationController *mDynOpController;
    NSObject<TSDRulerController> *mRulerController;
    BOOL mInspectorModeEnabled;
    NSMutableArray *mInspectorGestureRecognizersToReenable;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id mInspectorSingleTapBlock;

    struct CGPoint { 
        float x; 
        float y; 
    } mLastTapPoint;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mVisibleBoundsRectForTiling;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mVisibleUnscaledRect;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mUnobscuredScrollViewFrame;
    TSDBackgroundLayoutAndRenderState *mBackgroundLayoutAndRenderState;
    BOOL mLayoutAndRenderOnThreadDuringScroll;
    BOOL mTemporarilyDisabledLayoutAndRenderOnThreadDuringScroll;
    BOOL mCurrentlyScrolling;
    BOOL mAnimatingScroll;
    BOOL mSuppressedAutozoom;
    BOOL mTextGesturesInFlight;
    <TSDEditor> *mSelectionChangeNotificationDeferredEditor;
    BOOL mShouldAutoscrollToSelectionAfterGestures;
    BOOL mSuspendedLowPriorityThreadDispatcher;
    BOOL mCurrentlyWaitingOnThreadedLayoutAndRender;
    int mDisableThreadedLayoutAndRender;
    NSMutableArray *mHiddenTopLevelLayers;
    BOOL mShouldSuppressRendering;
    BOOL mSupportsBackgroundTileRendering;
    NSMutableSet *mNotificationsToPostWithValidLayouts;
    NSArray *mLayersWithZoomFadeAnimation;
    BOOL mDynamicallyZooming;
    float mDynamicViewScale;
    BOOL mUsesAlternateDrawableSelectionHighlight;
    float mTargetPointSize;
    BOOL mAnimatingViewScale;
    BOOL mSuppressingKeyboard;
    NSObject<TSDImageHUDController> *mImageHUDController;
    long mImageHUDLock;
    NSObject<TSDImageHUDController> *mIAHUDController;
    long mIAHUDLock;
    TSDTileStorage *mTileStorage;
    struct CGPoint { 
        float x; 
        float y; 
    } mZoomCenterInBounds;
    NSMutableArray *mBackgroundRenderingObjects;
    <TSDAnnotationHosting> *mDisplayedAnnotation;
    <TSDAnnotationPopoverController> *mAnnotationPopoverController;
    BOOL mShouldClipThemeContentToCanvas;
    BOOL mShowUserDefinedGuides;
    BOOL mPreventSettingNilEditorOnTextResponder;
}

@property(readonly) TSDCanvas * canvas;
@property <TSDCanvasLayerHosting> * layerHost;
@property <TSDInteractiveCanvasControllerDelegate> * delegate;
@property(readonly) TSKDocumentRoot * documentRoot;
@property(readonly) <TSKDocumentRootProvider> * documentRootProvider;
@property(readonly) TSPObjectContext * objectContext;
@property(readonly) TSKCommandController * commandController;
@property(readonly) TSKChangeNotifier * changeNotifier;
@property(readonly) TSKAccessController * accessController;
@property BOOL resizeCanvasOnLayout;
@property(readonly) struct CGSize { float x1; float x2; } defaultMinimumUnscaledCanvasSize;
@property NSObject<TSDRulerController> * rulerController;
@property(readonly) TSDContainerRep * topLevelContainerRepForEditing;
@property(readonly) BOOL inspectorModeEnabled;
@property(readonly) BOOL animatingViewScale;
@property(readonly) TSDEditorController * editorController;
@property BOOL preventSettingNilEditorOnTextResponder;
@property(retain) NSObject<TSDCanvasEditor> * canvasEditor;
@property BOOL createRepsForOffscreenLayouts;
@property BOOL layoutAndRenderOnThreadDuringScroll;
@property(readonly) BOOL currentlyWaitingOnThreadedLayoutAndRender;
@property(readonly) BOOL currentlyScrolling;
@property BOOL shouldAutoscrollToSelectionAfterLayout;
@property BOOL suppressAutozoomToSelectionAfterLayout;
@property BOOL textGesturesInFlight;
@property BOOL shouldSuppressRendering;
@property(readonly) TSDCanvasView * canvasView;
@property(readonly) TSDCanvasLayer * canvasLayer;
@property float viewScale;
@property(readonly) float currentViewScale;
@property(readonly) float fitWidthViewScale;
@property(readonly) struct CGSize { float x1; float x2; } canvasScrollingOutset;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } unobscuredScrollViewFrame;
@property(readonly) struct CGSize { float x1; float x2; } sizeOfScrollViewEnclosingCanvas;
@property BOOL shouldClipThemeContentToCanvas;
@property(readonly) TSDGuideController * guideController;
@property(readonly) TSDUserDefinedGuideController * userDefinedGuideController;
@property BOOL shouldShowUserDefinedGuides;
@property(copy) NSArray * infosToDisplay;
@property struct CGColor { }* selectionHighlightColor;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleBoundsRect;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleBoundsRectForTiling;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleBoundsRectUsingSizeOfEnclosingScrollView;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleUnscaledRect;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleUnscaledRectForCanvasUI;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleUnscaledRectForAutoscroll;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleUnscaledRectValidWhileZooming;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleUnscaledRectForScrollingAutomatically;
@property(readonly) TSDLayoutController * layoutController;
@property(readonly) CALayer * repContainerLayer;
@property(readonly) NSArray * additionalLayersUnderRepLayers;
@property BOOL usesAlternateDrawableSelectionHighlight;
@property(readonly) CALayer * overlayLayer;
@property BOOL overlayLayerSuppressed;
@property BOOL showGrayOverlay;
@property BOOL showInvisibleObjects;
@property BOOL showsComments;
@property(readonly) <TSDAnnotationHosting> * displayedAnnotation;
@property(readonly) BOOL displayedAnnotationPresentedPinned;
@property(readonly) struct CGSize { float x1; float x2; } annotationPopoverSize;
@property(readonly) unsigned int annotationPreferredRectEdge;
@property(retain,readonly) TSDDynamicOperationController * dynamicOperationController;
@property(retain,readonly) TSDTrackerManipulatorCoordinator * tmCoordinator;
@property BOOL inReadMode;
@property BOOL inVersionBrowsingMode;
@property BOOL supportsBackgroundTileRendering;
@property struct CGPoint { float x1; float x2; } lastTapPoint;
@property(readonly) id canvasReferenceController;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } p_visibleBoundsRectForTiling;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } p_visibleUnscaledRect;

+ (id)keyPathsForValuesAffectingCurrentViewScale;
+ (id)keyPathsForValuesAffectingViewScale;
+ (id)keyPathsForValuesAffectingEditorController;
+ (id)keyPathsForValuesAffectingDocumentRoot;
+ (float)smallRepOutsetForHitTesting;
+ (BOOL)selectorIsActionMethod:(SEL)arg1;

- (id)canvas;
- (void)setViewScale:(float)arg1;
- (id)overlayLayer;
- (id)documentRoot;
- (BOOL)hasAnnotations;
- (void)teardown;
- (void)p_commonInit;
- (id)annotationController;
- (void)setAnimationTimingFunction:(id)arg1;
- (void)setSelectionHighlightColor:(struct CGColor { }*)arg1;
- (struct CGColor { }*)selectionHighlightColor;
- (void)forwardInvocation:(id)arg1;
- (void)endEditing;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (void)setContentOffset:(struct CGPoint { float x1; float x2; })arg1 animated:(BOOL)arg2;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)setAnimationWillStartSelector:(SEL)arg1;
- (void)setAnimationRepeatCount:(float)arg1;
- (void)setAnimationStartDate:(id)arg1;
- (void)commitAnimations;
- (void)setAnimationRepeatAutoreverses:(BOOL)arg1;
- (struct CGPoint { float x1; float x2; })contentOffset;
- (void)layoutIfNeeded;
- (void)setAnimationDelegate:(id)arg1;
- (void)setAnimationDidStopSelector:(SEL)arg1;
- (void)beginAnimations:(id)arg1 context:(void*)arg2;
- (void)setAnimationDelay:(double)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)setAnimationDuration:(double)arg1;
- (id)delegate;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)init;
- (void)setSupportsBackgroundTileRendering:(BOOL)arg1;
- (BOOL)showInvisibleObjects;
- (BOOL)inReadMode;
- (void)setInVersionBrowsingMode:(BOOL)arg1;
- (BOOL)inVersionBrowsingMode;
- (void)setShowGrayOverlay:(BOOL)arg1;
- (BOOL)showGrayOverlay;
- (void)setShouldClipThemeContentToCanvas:(BOOL)arg1;
- (void)setSuppressAutozoomToSelectionAfterLayout:(BOOL)arg1;
- (BOOL)suppressAutozoomToSelectionAfterLayout;
- (void)setShouldAutoscrollToSelectionAfterLayout:(BOOL)arg1;
- (BOOL)shouldAutoscrollToSelectionAfterLayout;
- (BOOL)layoutAndRenderOnThreadDuringScroll;
- (void)setCreateRepsForOffscreenLayouts:(BOOL)arg1;
- (BOOL)createRepsForOffscreenLayouts;
- (void)setPreventSettingNilEditorOnTextResponder:(BOOL)arg1;
- (BOOL)preventSettingNilEditorOnTextResponder;
- (void)setCanvasEditor:(id)arg1;
- (void)setResizeCanvasOnLayout:(BOOL)arg1;
- (void)setRulerController:(id)arg1;
- (void)setTextGesturesInFlight:(BOOL)arg1;
- (BOOL)textGesturesInFlight;
- (BOOL)animatingViewScale;
- (BOOL)shouldSuppressRendering;
- (BOOL)inspectorModeEnabled;
- (void)setLastTapPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)canvasReferenceController;
- (struct CGPoint { float x1; float x2; })lastTapPoint;
- (id)viewWithTransferredLayers;
- (void)p_autoscrollToSelection:(id)arg1 withInfo:(id)arg2 isInitialSelection:(BOOL)arg3 focusRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4;
- (void)p_textGesturesDidEndNotification:(id)arg1;
- (void)p_textGesturesWillBeginNotification:(id)arg1;
- (void)p_guideColorChanged:(id)arg1;
- (BOOL)i_temporarilyDisabledLayoutAndRenderOnThreadDuringScroll;
- (void)enableThreadedLayoutAndRender;
- (void)disableThreadedLayoutAndRender;
- (id)i_descriptionForViewScale:(float)arg1;
- (id)i_currentAnimation;
- (id)i_tileStorage;
- (void)i_repNeedsDisplay:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)i_repNeedsDisplay:(id)arg1;
- (void)i_recordUserViewScale;
- (float)i_nextCanvasViewScaleDetentForProposedViewScale:(float)arg1 greater:(BOOL)arg2;
- (struct CGSize { float x1; float x2; })i_canvasCenterOffsetForProposedViewScale:(float)arg1 originalViewScale:(float)arg2;
- (float)i_viewScaleForProposedViewScale:(float)arg1 originalViewScale:(float)arg2;
- (void)i_viewScaleDidChange;
- (void)i_canvasContentsScaleDidChange;
- (void)i_viewDidZoomToViewScale:(float)arg1;
- (void)i_viewIsZoomingAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)i_layoutUnregistered:(id)arg1;
- (void)i_layoutRegistered:(id)arg1;
- (void)setAnimationCompletionBlock:(id)arg1;
- (BOOL)canPerformInteractiveAction:(SEL)arg1 withSender:(id)arg2;
- (id)iaHUDController;
- (id)queueForDrawingTilingLayerInBackground:(id)arg1;
- (BOOL)mustDrawTilingLayerOnMainThread:(id)arg1;
- (void)didEndDrawingTilingLayerInBackground:(id)arg1 withToken:(id)arg2;
- (BOOL)shouldBeginDrawingTilingLayerInBackground:(id)arg1 returningToken:(id*)arg2 andQueue:(id*)arg3;
- (void)tappedCanvasBackgroundAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)hitRepChromeAtUnscaledPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)tmCoordinator;
- (void)setShowInvisibleObjects:(BOOL)arg1;
- (void)setUsesAlternateDrawableSelectionHighlight:(BOOL)arg1;
- (BOOL)usesAlternateDrawableSelectionHighlight;
- (void)setInReadMode:(BOOL)arg1;
- (BOOL)isInInspectorDynamicOperation;
- (void)endPossiblyParallelInspectorDynamicOperation;
- (void)beginPossiblyParallelInspectorDynamicOperation;
- (void)actionGhostKnobHitForRep:(id)arg1;
- (void)toggleHyperlinkUIForRep:(id)arg1;
- (void)previousAnnotationBeforeVisibleAnnotation:(id)arg1;
- (void)nextAnnotationAfterVisibleAnnotation:(id)arg1;
- (BOOL)attachedCommentsAllowedForDrawable:(id)arg1;
- (void)toggleAnnotationVisibility:(id)arg1 model:(id)arg2 selection:(id)arg3 beginEditing:(BOOL)arg4 shouldSetSelection:(BOOL)arg5;
- (void)annotationChanged:(id)arg1 model:(id)arg2 selection:(id)arg3 beginEditing:(BOOL)arg4;
- (unsigned int)annotationPreferredRectEdge;
- (void)setAnnotationAuthorColor:(id)arg1;
- (BOOL)shouldDisplayCommentUIForInfo:(id)arg1;
- (void)showOrHideComments:(id)arg1;
- (void)getCurrentAnnotationAuthor:(id*)arg1 commandToCreateIfNecessary:(id*)arg2;
- (void)getCurrentAnnotationAuthorCreatingIfNecessaryWithCompletionHandler:(id)arg1;
- (void)removeDecorator:(id)arg1;
- (void)addDecorator:(id)arg1;
- (void)closeOverlays;
- (void)setOverlayLayerSuppressed:(BOOL)arg1;
- (id)actionGhostKnobForRep:(id)arg1;
- (BOOL)shouldShowOnRepHyperlinkUI;
- (int)defaultKnobTypeForRep:(id)arg1;
- (BOOL)shouldShowPathHighlightOnUnselectedInvisibleShapes;
- (BOOL)shouldEverShowPathHighlightOnInvisibleShapes;
- (id)layoutForModel:(id)arg1 withSelection:(id)arg2;
- (id)hitKnobAtPoint:(struct CGPoint { float x1; float x2; })arg1 returningRep:(id*)arg2;
- (id)hitRepsAtPoint:(struct CGPoint { float x1; float x2; })arg1 withSlop:(struct CGSize { float x1; float x2; })arg2;
- (id)hitRepIgnoringClickThrough:(struct CGPoint { float x1; float x2; })arg1;
- (id)topLevelRepsForDragSelecting;
- (id)unitStringForAngle:(float)arg1 andLength:(float)arg2;
- (id)unitStringForNumber:(float)arg1;
- (id)unitStringForSize:(struct CGSize { float x1; float x2; })arg1;
- (id)unitStringForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })growUnscaledCanvasLayerSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })convertBoundsToUnscaledSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })convertUnscaledToBoundsSize:(struct CGSize { float x1; float x2; })arg1;
- (BOOL)allowNegativeAutoscroll;
- (BOOL)allowAutoscroll;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleUnscaledRectValidWhileZooming;
- (id)topLevelZOrderedSiblingsOfInfos:(id)arg1;
- (void)setInfosToDisplay:(id)arg1;
- (id)localizedPercentStringForAlignmentGuide:(id)arg1;
- (id)provideUserDefinedGuides;
- (id)provideDynamicGuidesForLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingRectForActiveGuidesForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)infosForGuides;
- (float)offsetForTranslatingGuidesInStorage:(id)arg1 guideType:(int)arg2;
- (void)translateGuides:(id)arg1 toContainerRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)clipGuideToContainer:(id)arg1 atUnscaledPoint:(struct CGPoint { float x1; float x2; })arg2;
- (id)guideController;
- (void)makeUserDefinedGuidesVisible;
- (void)toggleShouldShowUserDefinedGuides;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleUnscaledRectForCanvasUI;
- (id)replaceImageController;
- (void)hideRuler;
- (void)displayRulerForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)displayRulerWithSlowFade:(BOOL)arg1;
- (void)unobscuredFrameDidChange;
- (void)setViewScale:(float)arg1 andScrollViewFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 animated:(BOOL)arg3;
- (float)currentViewScale;
- (void)resumeEditing;
- (void)setLayoutAndRenderOnThreadDuringScroll:(BOOL)arg1;
- (void)setShouldSuppressRendering:(BOOL)arg1;
- (void)scrollSearchReferenceToVisible:(id)arg1;
- (void)scrollCurrentSelectionToVisible;
- (void)zoomToCurrentSelection;
- (struct CGPoint { float x1; float x2; })smartZoomCenterForNoSelection;
- (BOOL)canZoomToCurrentSelection;
- (id)documentRootProvider;
- (void)removeBackgroundRenderingObject:(id)arg1;
- (void)addBackgroundRenderingObject:(id)arg1;
- (void)setLayerHost:(id)arg1;
- (void)i_layerHostHasBeenTornDown;
- (void)asyncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (void)syncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (void)canvas:(id)arg1 createdRep:(id)arg2;
- (id)additionalVisibleInfosForCanvas:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleScaledBoundsForClippingRepsOnCanvas:(id)arg1;
- (void)canvasDidUpdateRepsFromLayouts:(id)arg1;
- (void)canvasWillUpdateRepsFromLayouts:(id)arg1;
- (void)canvasDidUpdateVisibleBounds:(id)arg1;
- (void)canvasDidValidateLayoutsWithDependencies:(id)arg1;
- (void)canvasDidLayout:(id)arg1;
- (void)canvasDidValidateLayouts:(id)arg1;
- (void)canvasWillLayout:(id)arg1;
- (void)canvasLayoutInvalidated:(id)arg1;
- (id)repContainerLayer;
- (void)doubleTappedCanvasBackgroundAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)viewDidEndZooming;
- (void)i_viewWillBeginZooming;
- (void)scrollRectToVisibleCenter:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 animated:(BOOL)arg2 onlyScrollNecessaryAxes:(BOOL)arg3;
- (void)setViewScale:(float)arg1 contentOffset:(struct CGPoint { float x1; float x2; })arg2 animated:(BOOL)arg3;
- (BOOL)p_centerOnInitialSelection;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleUnscaledRectForAutoscroll;
- (float)fitWidthViewScale;
- (float)p_targetPointSize;
- (BOOL)shouldZoomOnSelectionChange;
- (id)layoutForInfoNearestVisibleRect:(id)arg1;
- (BOOL)p_shouldSuppressAutozoomForEditor:(id)arg1;
- (void)scrollToPrimarySelection;
- (void)i_viewScrollingEnded;
- (void)i_drawRepWithReadLock:(id)arg1 inContext:(struct CGContext { }*)arg2 forLayer:(id)arg3;
- (void)p_recursivelyUpdateLayerEdgeAntialiasingForLayer:(id)arg1;
- (id)p_overlayLayerForReps:(id)arg1;
- (BOOL)overlayLayerSuppressed;
- (void)p_setupPopoutLayerForReps:(id)arg1;
- (void)p_discardLayer:(id)arg1 forRep:(id)arg2;
- (BOOL)shouldClipThemeContentToCanvas;
- (void)p_recursivelyUpdateLayerForRep:(id)arg1 accumulatingLayers:(id)arg2 andReps:(id)arg3;
- (id)additionalLayersUnderRepLayers;
- (struct CGSize { float x1; float x2; })canvasScrollingOutset;
- (struct CGSize { float x1; float x2; })defaultMinimumUnscaledCanvasSize;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 onLayer:(id)arg2;
- (void)setNeedsDisplayOnLayer:(id)arg1;
- (void)p_setTargetPointSize:(float)arg1;
- (void)endScrollingOperation;
- (void)p_endZoomingOperation;
- (void)p_beginZoomingOperation;
- (void)setAnimation:(id)arg1 forLayer:(id)arg2 forKey:(id)arg3;
- (void)makeEditorPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)beginScrollingOperation;
- (void)p_viewScrollingEnded;
- (void)i_viewScrollDidChange;
- (BOOL)canDrawTilingLayerInBackground:(id)arg1;
- (BOOL)supportsBackgroundTileRendering;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleBoundsRectForTiling;
- (void)p_drawLayerWithReadLock:(id)arg1;
- (BOOL)handleMultipleTapAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)handleDoubleTapAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateSelectionForTapAtPoint:(struct CGPoint { float x1; float x2; })arg1 extendingSelection:(BOOL)arg2;
- (BOOL)handleSingleTapAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateSelectionForTapOnSelectedRep:(id)arg1;
- (id)p_decorators;
- (void)previousAnnotation:(id)arg1;
- (void)nextAnnotation:(id)arg1;
- (void)showAnnotation:(id)arg1 model:(id)arg2 selection:(id)arg3 beginEditing:(BOOL)arg4 pinned:(BOOL)arg5 shouldSetSelection:(BOOL)arg6;
- (BOOL)selectionContainsOnlyInfosOnCanvas:(id)arg1 model:(id)arg2;
- (struct CGSize { float x1; float x2; })annotationPopoverSize;
- (BOOL)displayedAnnotationPresentedPinned;
- (BOOL)p_annotationShouldShowPopover:(id)arg1;
- (void)setSelection:(id)arg1 onModel:(id)arg2 withFlags:(unsigned int)arg3;
- (void)hideDisplayedAnnotation;
- (BOOL)i_inPrintPreviewMode;
- (void)setShowsComments:(BOOL)arg1;
- (BOOL)showsComments;
- (void)invalidateComments;
- (id)objectContext;
- (BOOL)shouldPopKnobsOutsideEnclosingScrollView;
- (id)layoutsForInfo:(id)arg1 intersectingSelection:(id)arg2;
- (id)layoutsForModel:(id)arg1 withSelection:(id)arg2;
- (void)p_recursiveHitKnobAtPoint:(struct CGPoint { float x1; float x2; })arg1 inRep:(id)arg2 minDistance:(float*)arg3 hitKnob:(id*)arg4 hitRep:(id*)arg5;
- (id)hitRep:(struct CGPoint { float x1; float x2; })arg1 passingTest:(id)arg2;
- (id)topLevelContainerRepForEditing;
- (id)topLevelRepsForHitTesting;
- (id)unitStringForAngle:(float)arg1;
- (id)unitFormatter;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_calculateVisibleUnscaledRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_visibleUnscaledRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_calculateVisibleBoundsRectForTiling;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_visibleBoundsRectForTiling;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_visibleBoundsRectUsingSizeOfEnclosingScrollView:(BOOL)arg1;
- (void)recreateAllLayoutsAndReps;
- (id)p_repForLayout:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)i_layout;
- (id)repForLayout:(id)arg1;
- (id)p_backgroundLayoutAndRenderState;
- (void)p_acquireLockAndPerformAction:(id)arg1;
- (BOOL)p_shouldLayoutAndRenderOnThread;
- (id)infosToDisplay;
- (void)translateGuide:(id)arg1 toContainerRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visualContainerRectForGuideStorage:(id)arg1;
- (id)guideStorageAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (Class)userDefinedGuideControllerClass;
- (void)setShouldShowUserDefinedGuides:(BOOL)arg1;
- (BOOL)shouldShowUserDefinedGuides;
- (id)userDefinedGuideController;
- (BOOL)shouldShowInstructionalText;
- (BOOL)shouldShowTextOverflowGlyphs;
- (BOOL)isPrintingCanvas;
- (BOOL)spellCheckingSuppressed;
- (BOOL)spellCheckingSupported;
- (id)rulerController;
- (void)i_invalidateSelectionHighlightLayers;
- (struct CGColor { }*)newDefaultSelectionHighlightColor;
- (struct CGSize { float x1; float x2; })sizeOfScrollViewEnclosingCanvas;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_outsetSelectionRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleUnscaledRectForScrollingAutomatically;
- (void)setUnobscuredScrollViewFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })unobscuredFrameOfView:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })annotationRectInParentView;
- (id)displayedAnnotation;
- (void)setViewScale:(float)arg1 andScrollViewFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 maintainPosition:(BOOL)arg3 animated:(BOOL)arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })unobscuredScrollViewFrame;
- (void)animateToViewScale:(float)arg1 contentOffset:(struct CGPoint { float x1; float x2; })arg2 duration:(double)arg3 orientation:(int)arg4;
- (struct CGPoint { float x1; float x2; })clampedUnscaledContentOffset:(struct CGPoint { float x1; float x2; })arg1 forViewScale:(float)arg2;
- (BOOL)shouldResizeCanvasToScrollView;
- (void)p_editorDoneChangingSelection:(id)arg1;
- (void)p_editorDoneChangingSelection:(id)arg1 withFlags:(unsigned int)arg2;
- (void)p_editorDidChangeSelection:(id)arg1 withSelectionFlags:(unsigned int)arg2;
- (void)invalidateVisibleBounds;
- (void)invalidateReps;
- (void)p_syncWithLayoutThread;
- (void)scrollToPrimarySelectionForEditor:(id)arg1;
- (void)p_scrollToPrimarySelectionForEditor:(id)arg1 skipZoom:(BOOL)arg2;
- (void)p_autoscrollToSelection:(id)arg1 withInfo:(id)arg2 isInitialSelection:(BOOL)arg3 focusRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 scrollImmediately:(BOOL)arg5 skipZoom:(BOOL)arg6;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })scrollFocusRectForModel:(id)arg1 withSelection:(id)arg2;
- (void)scrollToSelection:(id)arg1 onModel:(id)arg2 scrollImmediately:(BOOL)arg3;
- (id)p_setSelection:(id)arg1 onInfo:(id)arg2 withFlags:(unsigned int)arg3;
- (void)scrollRectToVisibleWithSelectionOutset:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (id)validatedLayoutForInfo:(id)arg1;
- (id)layoutForInfoNearestVisibleRect:(id)arg1 intersectingSelection:(id)arg2;
- (id)infoToScrollToForModel:(id)arg1 withSelection:(id)arg2;
- (void)p_scrollModelToVisible:(id)arg1 withSelection:(id)arg2;
- (void)scrollToSelection:(id)arg1 onModel:(id)arg2;
- (id)infoForModel:(id)arg1 withSelection:(id)arg2;
- (id)beginEditingRepForInfo:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleUnscaledRect;
- (void)zoomWithAnimationToUnscaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)beginEditingRep:(id)arg1 clearingSelection:(BOOL)arg2 withEditorProvider:(id)arg3;
- (BOOL)p_endEditingToBeginEditingRep:(id)arg1;
- (id)beginEditingRep:(id)arg1;
- (id)repForInfo:(id)arg1;
- (void)p_layoutWithReadLock;
- (id)newCanvasEditor;
- (void)p_editorControllerSelectionDidChangeAndWantsKeyboard:(id)arg1;
- (void)p_editorControllerSelectionDidChange:(id)arg1;
- (void)p_editorControllerDidChangeCurrentEditors:(id)arg1;
- (void)p_editorControllerDidChangeTextInputEditor:(id)arg1;
- (void)presentErrors:(id)arg1 withLocalizedDescription:(id)arg2 completionHandler:(id)arg3;
- (void)presentError:(id)arg1 completionHandler:(id)arg2;
- (id)dynamicOperationController;
- (void)p_updateLayersFromReps;
- (void)p_updateCanvasSizeFromLayouts;
- (BOOL)resizeCanvasOnLayout;
- (void)p_postNotificationOnMainThreadWithValidLayouts:(id)arg1;
- (id)canvasLayer;
- (id)layerHost;
- (void)teardownCanvasEditor;
- (void)teardownBackgroundRendering;
- (void)removeCommonObservers;
- (void)setP_visibleUnscaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setP_visibleBoundsRectForTiling:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)addCommonObservers;
- (void)p_willEnterForeground:(id)arg1;
- (void)p_annotationAuthorNameDidChange:(id)arg1;
- (void)p_rulerUnitsDidChangeNotification:(id)arg1;
- (void)backgroundLayoutAndRenderStateDidPerformBackgroundWork:(id)arg1;
- (void)backgroundLayoutAndRenderState:(id)arg1 performWorkInBackgroundTilingOnly:(BOOL)arg2;
- (id)imageHUDController;
- (id)layoutsForInfo:(id)arg1;
- (id)repsForInfo:(id)arg1;
- (id)repForInfo:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)deselectAll:(id)arg1;
- (id)layoutForInfo:(id)arg1;
- (void)endDynamicOperation;
- (void)beginDynamicOperation;
- (BOOL)isInDynamicOperation;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleBoundsForTilingLayer:(id)arg1;
- (BOOL)shouldLayoutTilingLayer:(id)arg1;
- (void)discardRepForClassChange:(id)arg1;
- (struct CGPoint { float x1; float x2; })convertUnscaledToBoundsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)layoutController;
- (id)canvasView;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleBoundsRect;
- (id)commandController;
- (id)hitRep:(struct CGPoint { float x1; float x2; })arg1;
- (void)layoutInvalidated;
- (id)canvasEditor;
- (BOOL)currentlyWaitingOnThreadedLayoutAndRender;
- (id)editorController;
- (BOOL)isPrinting;
- (BOOL)currentlyScrolling;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertUnscaledToBoundsRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)layerForRep:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertBoundsToUnscaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleBoundsRectUsingSizeOfEnclosingScrollView;
- (void)invalidateLayers;
- (struct CGPoint { float x1; float x2; })convertBoundsToUnscaledPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isCanvasInteractive;
- (float)viewScale;
- (id)accessController;
- (id)changeNotifier;

@end
