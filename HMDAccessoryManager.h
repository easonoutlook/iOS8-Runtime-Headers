/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@class NSMutableSet, NSObject<OS_dispatch_queue>, HAPAccessoryServerBrowserIP, NSMutableArray, NSMapTable;

@interface HMDAccessoryManager : NSObject <HAPAccessoryServerBrowserDelegate, HAPAccessoryServerDelegate> {
    NSObject<OS_dispatch_queue> *_workQueue;
    NSMapTable *_delegates;
    NSMutableSet *_pairedAccessories;
    NSMutableSet *_unpairedAccessories;
    NSMutableSet *_discoveredAccessoryServers;
    NSMapTable *_addAccessoryCompletionHandlersForAccessoryServers;
    NSMapTable *_pairingRetryTimersForAccessoryServers;
    NSMutableArray *_accessoryServerBrowsers;
    HAPAccessoryServerBrowserIP *_ipAccessoryServerBrowser;
}

@property(retain) NSObject<OS_dispatch_queue> * workQueue;
@property(retain) NSMapTable * delegates;
@property(retain) NSMutableSet * pairedAccessories;
@property(retain) NSMutableSet * unpairedAccessories;
@property(retain) NSMutableSet * discoveredAccessoryServers;
@property(retain) NSMapTable * addAccessoryCompletionHandlersForAccessoryServers;
@property(retain) NSMapTable * pairingRetryTimersForAccessoryServers;
@property(retain) NSMutableArray * accessoryServerBrowsers;
@property(retain) HAPAccessoryServerBrowserIP * ipAccessoryServerBrowser;


- (void)removeDelegate:(id)arg1;
- (id)workQueue;
- (id)delegates;
- (void)setIpAccessoryServerBrowser:(id)arg1;
- (id)ipAccessoryServerBrowser;
- (void)setAccessoryServerBrowsers:(id)arg1;
- (void)setPairingRetryTimersForAccessoryServers:(id)arg1;
- (void)setAddAccessoryCompletionHandlersForAccessoryServers:(id)arg1;
- (void)setPairedAccessories:(id)arg1;
- (void)setDelegates:(id)arg1;
- (void)removePairingOnAccessory:(id)arg1 forController:(id)arg2 publicKey:(id)arg3 withCompletionHandler:(id)arg4;
- (void)addPairingOnAccessory:(id)arg1 forController:(id)arg2 publicKey:(id)arg3 withCompletionHandler:(id)arg4;
- (void)_notifyDelegatesOfPairedAccessories:(id)arg1 removedFromBridgeAccessory:(id)arg2;
- (void)_notifyDelegatesOfPairedAccessories:(id)arg1 addedToBridgeAccessory:(id)arg2;
- (void)_updatePairedAccessoriesForServer:(id)arg1;
- (void)_createPairedAccessoriesForUnpairedAccessory:(id)arg1 server:(id)arg2;
- (id)_unpairedAccessoryForServer:(id)arg1;
- (void)_updatePairingRetryTimerForServer:(id)arg1 delay:(int)arg2;
- (void)_notifyDelegatesOfRemovedNewAccessory:(id)arg1;
- (void)_notifyDelegatesOfNewAccessory:(id)arg1;
- (void)_promptForPairingPasswordForServer:(id)arg1;
- (id)pairingRetryTimersForAccessoryServers;
- (id)_removePairedAccessoriesForServer:(id)arg1;
- (void)_removeUnreachableAccessory:(id)arg1 completionHandler:(id)arg2;
- (void)_sendPairingCompletionStatusForServer:(id)arg1 accessories:(id)arg2 error:(id)arg3;
- (id)addAccessoryCompletionHandlersForAccessoryServers;
- (void)_pairAccessory:(id)arg1 password:(id)arg2 completionHandler:(id)arg3;
- (id)accessoryServerBrowsers;
- (id)pairedAccessories;
- (id)allPairedAccessories;
- (void)stopDiscoveringAccessories;
- (void)startDiscoveringAccessories;
- (void)_stopDiscoveringAccessories;
- (void)_startDiscoveringAccessories;
- (id)allUnpairedAccessories;
- (void)removeAccessory:(id)arg1 completionHandler:(id)arg2;
- (void)pairAccessory:(id)arg1 password:(id)arg2 completionHandler:(id)arg3;
- (id)accessoryWithUUID:(id)arg1;
- (void)setUnpairedAccessories:(id)arg1;
- (id)unpairedAccessories;
- (id)initWithPairedAccessories:(id)arg1;
- (void)setWorkQueue:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (void)setDiscoveredAccessoryServers:(id)arg1;
- (void)accessoryServerBrowser:(id)arg1 didRemoveAccessoryServer:(id)arg2;
- (void)accessoryServerBrowser:(id)arg1 didFindAccessoryServer:(id)arg2;
- (id)discoveredAccessoryServers;
- (void)accessoryServerBrowser:(id)arg1 didStopDiscoveringWithError:(id)arg2;
- (void)accessoryServerBrowser:(id)arg1 didStartDiscoveringWithError:(id)arg2;
- (void)accessoryServer:(id)arg1 didDiscoverAccessoriesWithError:(id)arg2;
- (void)accessoryServer:(id)arg1 didStopPairingWithError:(id)arg2;
- (void)accessoryServer:(id)arg1 didReceiveBadPasswordThrottleAttemptsWithDelay:(int)arg2;
- (void)accessoryServer:(id)arg1 promptUserForPasswordWithType:(unsigned int)arg2;
- (void).cxx_destruct;

@end
