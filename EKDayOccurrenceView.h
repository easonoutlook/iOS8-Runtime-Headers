/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

@class EKDayOccurrenceContentView, EKDayOccurrenceTravelTimeView, UIImageView, UIView, NSString, UIColor, EKEvent;

@interface EKDayOccurrenceView : UIView <NSCopying, EKDayOccurrenceTravelTimeViewMetricsDelegate> {
    float _visibleHeight;
    UIImageView *_eventBackgroundView;
    UIImageView *_travelBackgroundView;
    UIImageView *_eventBackgroundViewWithoutBar;
    EKDayOccurrenceContentView *_content;
    EKDayOccurrenceTravelTimeView *_travelTimeContentView;
    BOOL _needsContentCalc;
    BOOL _needsBackgroundImageUpdate;
    UIView *_startResizeHandle;
    UIView *_endResizeHandle;
    float _originalXBeforeOffset;
    unsigned int _touchKeptInsideOccurrence : 1;
    unsigned int _offsetContentForLandscape : 1;
    BOOL _visibleHeightLocked;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _padding;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _unpinnedBackgroundFrame;
    UIView *_pinFadeView;
    float _travelTimeSubviewHeightInPoints;
    BOOL _selected;
    BOOL _dimmed;
    BOOL _allDayDrawingStyle;
    BOOL _drawsResizeHandles;
    BOOL _hideBackgroundImage;
    BOOL _hideText;
    BOOL _isSelectedCopyView;
    BOOL _tentative;
    BOOL _declined;
    BOOL _needsReply;
    BOOL _allDay;
    BOOL _showsTravelTime;
    BOOL _reduceLayoutProcessingForAnimation;
    BOOL _pinnedToBottom;
    id _delegate;
    EKEvent *_occurrence;
    UIColor *_color;
    float _cappedColorBarHeight;
    int _occurrenceBackgroundStyle;
    double _travelTime;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _margin;
}

@property id delegate;
@property(readonly) BOOL visibleHeightLocked;
@property(retain) EKEvent * occurrence;
@property BOOL selected;
@property BOOL dimmed;
@property BOOL allDayDrawingStyle;
@property BOOL drawsResizeHandles;
@property BOOL usesSmallText;
@property BOOL hideBackgroundImage;
@property BOOL hideText;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } margin;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } padding;
@property BOOL isSelectedCopyView;
@property(readonly) float travelTimeSubviewHeightInPoints;
@property(copy) UIColor * color;
@property(copy) NSString * title;
@property(copy) NSString * location;
@property(getter=isTentative) BOOL tentative;
@property(getter=isDeclined) BOOL declined;
@property(getter=isCancelled) BOOL cancelled;
@property BOOL needsReply;
@property(getter=isAllDay) BOOL allDay;
@property(getter=isBirthday) BOOL birthday;
@property(getter=isFacebook) BOOL facebook;
@property float cappedColorBarHeight;
@property BOOL showsTravelTime;
@property double travelTime;
@property int routingMode;
@property(retain) UIColor * titleTextColor;
@property(retain) UIColor * timeTextColor;
@property(retain) UIColor * secondaryTextColor;
@property(retain) UIColor * textBackgroundColor;
@property int occurrenceBackgroundStyle;
@property BOOL reduceLayoutProcessingForAnimation;
@property BOOL pinnedToBottom;

+ (void)clearCaches;
+ (id)_adjustedStripeColorForDarkBackground:(id)arg1;
+ (id)_adjustedOccurrenceColorForDarkBackground:(id)arg1 opaque:(BOOL)arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })contentStretchRectForFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (void)_clearViewCache;
+ (id)_cachedImageForCalendarColor:(id)arg1 selected:(BOOL)arg2 declined:(BOOL)arg3 cancelled:(BOOL)arg4 tentative:(BOOL)arg5 needsReply:(BOOL)arg6 colorBarStyle:(int)arg7 dayViewBackgroundStyle:(int)arg8;
+ (id)_lightStripeColorForColor:(id)arg1;
+ (id)_lightColorForColor:(id)arg1 opaque:(BOOL)arg2;
+ (id)_imageForBarColor:(id)arg1 backgroundColor:(id)arg2 colorBarStyle:(int)arg3;
+ (id)_imageForBarColor:(id)arg1 backgroundColor:(id)arg2 stripeColor:(id)arg3 stripedImageAlpha:(float)arg4 colorBarStyle:(int)arg5;
+ (id)_color:(id)arg1 lightenedToPercentage:(float)arg2 withFinalAlpha:(float)arg3;
+ (float)minimumHeightForOrientation:(int)arg1 isAllDay:(BOOL)arg2 usesSmallText:(BOOL)arg3;
+ (id)_viewCache;
+ (float)minimumHeightForOrientation:(int)arg1;
+ (float)bottomShadowMargin;
+ (float)minimumHeightForOrientation:(int)arg1 isAllDay:(BOOL)arg2;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })defaultMargin;
+ (float)colorBarThickness;
+ (id)occurrenceViewWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })defaultPadding;
+ (float)barToBarGapWidth;
+ (float)barToBarHorizontalDistanceIncludingBarWidth;

- (void)setLocation:(id)arg1;
- (void)setMargin:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })margin;
- (void)setSecondaryTextColor:(id)arg1;
- (id)secondaryTextColor;
- (void)setBirthday:(BOOL)arg1;
- (void)setDimmed:(BOOL)arg1;
- (BOOL)dimmed;
- (void)setVisibleHeight:(float)arg1;
- (void).cxx_destruct;
- (BOOL)selected;
- (id)location;
- (id)time;
- (void)setTime:(id)arg1;
- (void)setColor:(id)arg1;
- (id)color;
- (BOOL)isCancelled;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })padding;
- (void)setPadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setCancelled:(BOOL)arg1;
- (void)setSelected:(BOOL)arg1;
- (void)prepareForReuse;
- (id)_backgroundColor;
- (void)didMoveToSuperview;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)title;
- (id)delegate;
- (void)setTitle:(id)arg1;
- (void)removeFromSuperview;
- (void)layoutSubviews;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHidden:(BOOL)arg1;
- (id)description;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (BOOL)pinnedToBottom;
- (BOOL)showsTravelTime;
- (float)cappedColorBarHeight;
- (BOOL)hideBackgroundImage;
- (void)setHideText:(BOOL)arg1 animate:(BOOL)arg2;
- (BOOL)resetContentViewToOriginalState:(BOOL)arg1;
- (void)fadeInContentViewAt:(float)arg1 minWidth:(float)arg2 animated:(BOOL)arg3;
- (float)unconstrainedWidth;
- (void)bringResizeHandlesToFront;
- (int)dragTypeFromPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)invalidateTravelTimeHeight;
- (id)_timedEventBackgroundColor;
- (void)animateToFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 isAllDay:(BOOL)arg2 beginFromCurrentState:(BOOL)arg3 whenFinished:(id)arg4;
- (void)setHideBackgroundImage:(BOOL)arg1;
- (void)_resetContentViewPosition;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_computeTravelTimeContentRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_computeContentRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_frameMutatedForProximityToHourLine:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (float)_verticalContentInset;
- (id)_newResizeHandleView;
- (void)_updateResizeHandleLocations;
- (float)travelTimeSubviewHeightInPoints;
- (id)arrayOfResizeHandles;
- (BOOL)_isTimedOccurrenceDrawingStyle;
- (void)setAllDayDrawingStyle:(BOOL)arg1 animated:(BOOL)arg2;
- (void)_invalidateContentBounds;
- (id)textBackgroundColor;
- (id)timeTextColor;
- (id)titleTextColor;
- (void)_removeTravelTimeSubviews;
- (void)_addTravelTimeSubviews;
- (void)setShowsTravelTime:(BOOL)arg1;
- (void)setCappedColorBarHeight:(float)arg1;
- (void)setIsSelectedCopyView:(BOOL)arg1;
- (BOOL)isSelectedCopyView;
- (void)setFacebook:(BOOL)arg1;
- (BOOL)isBirthday;
- (BOOL)allDayDrawingStyle;
- (void)setDrawsResizeHandles:(BOOL)arg1;
- (BOOL)drawsResizeHandles;
- (void)setNeedsReply:(BOOL)arg1;
- (BOOL)needsReply;
- (void)setDeclined:(BOOL)arg1;
- (BOOL)isDeclined;
- (void)setTentative:(BOOL)arg1;
- (void)setHideText:(BOOL)arg1;
- (BOOL)hideText;
- (void)setAllDayDrawingStyle:(BOOL)arg1;
- (BOOL)hasIcon;
- (void)_updateColors;
- (void)setRoutingMode:(int)arg1;
- (int)routingMode;
- (BOOL)reduceLayoutProcessingForAnimation;
- (BOOL)usesSmallText;
- (void)setOccurrenceBackgroundStyle:(int)arg1;
- (int)occurrenceBackgroundStyle;
- (void)setTextBackgroundColor:(id)arg1;
- (void)setTimeTextColor:(id)arg1;
- (void)setTitleTextColor:(id)arg1;
- (void)setOccurrence:(id)arg1;
- (void)setReduceLayoutProcessingForAnimation:(BOOL)arg1;
- (void)setUsesSmallText:(BOOL)arg1;
- (BOOL)visibleHeightLocked;
- (id)occurrence;
- (float)viewMaxNaturalTextHeight;
- (float)enoughHeightForOneLine;
- (void)setPinnedToBottom:(BOOL)arg1;
- (BOOL)isFacebook;
- (BOOL)isTentative;
- (void)setTravelTime:(double)arg1;
- (double)travelTime;
- (void)setAllDay:(BOOL)arg1;
- (BOOL)isAllDay;

@end
