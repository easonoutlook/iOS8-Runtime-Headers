/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard
 */

@class BKSProcess, <FBApplicationProcessDelegate>, FBApplicationInfo, FBApplicationProcessExitContext, FBApplicationWatchdog, NSMutableSet, FBProcessExecutionContext, BKSApplicationDataStore, BKSProcessAssertion, FBProcessCPUStatistics, BSMachSendRight, NSMutableArray;

@interface FBApplicationProcess : FBProcess <BKSProcessDelegate, BSWatchdogDelegate> {
    BKSApplicationDataStore *_dataStore;
    NSMutableSet *_allowedLockedFilePaths;
    NSMutableArray *_queuedSceneBlocksToExecuteAfterLaunch;
    FBApplicationProcessExitContext *_exitContext;
    FBProcessExecutionContext *_executionContext;
    FBApplicationWatchdog *_watchdog;
    BOOL _bootstrapped;
    BOOL _bootstrapFailed;
    BOOL _isBeingDebugged;
    BOOL _hasFinishedLaunching;
    BSMachSendRight *_taskNamePort;
    BSMachSendRight *_taskPort;
    BSMachSendRight *_gsEventPort;
    int _terminationReason;
    int _defaultSceneSuspendType;
    FBProcessCPUStatistics *_cpuStatistics;
    double _execTime;
    BKSProcess *_bksProcess;
    BKSProcessAssertion *_launchProcessAssertion;
    BKSProcessAssertion *_continuousProcessAssertion;
    BOOL _beingDebugged;
    BOOL _supportsBackgroundTaskAssertions;
    BOOL _supportsSuspendOnLock;
    BOOL _recordingAudio;
    BOOL _nowPlayingWithAudio;
    BOOL _connectedToExternalAccessory;
    FBApplicationInfo *_applicationInfo;
}

@property(retain,readonly) FBApplicationInfo * applicationInfo;
@property(retain) FBProcessExecutionContext * executionContext;
@property(retain,readonly) FBApplicationProcessExitContext * exitContext;
@property(getter=isBeingDebugged) BOOL beingDebugged;
@property(getter=isRecordingAudio) BOOL recordingAudio;
@property(getter=isNowPlayingWithAudio) BOOL nowPlayingWithAudio;
@property(getter=isConnectedToExternalAccessory) BOOL connectedToExternalAccessory;
@property <FBApplicationProcessDelegate> * delegate;
@property(getter=_queue_hasFinishedLaunching,readonly) BOOL hasFinishedLaunching;
@property(getter=_queue_defaultSuspendType,readonly) int defaultSuspendType;
@property(getter=_queue_cpuStatistics,retain,readonly) FBProcessCPUStatistics * cpuStatistics;
@property(getter=_queue_execTime,readonly) double execTime;
@property(getter=_queue_terminationReason,readonly) int terminationReason;
@property(getter=_queue_supportsSuspendOnLock,readonly) BOOL supportsSuspendOnLock;
@property(getter=_queue_supportsBackgroundTaskAssertions,readonly) BOOL supportsBackgroundTaskAssertions;
@property(getter=_queue_taskPort,setter=_queue_setTaskPort:) BSMachSendRight * taskPort;

+ (void)deleteAllJobs;

- (void)launchIfNecessary;
- (id)_queue_taskPort;
- (BOOL)isConnectedToExternalAccessory;
- (BOOL)isNowPlayingWithAudio;
- (BOOL)isRecordingAudio;
- (BOOL)_queue_supportsBackgroundTaskAssertions;
- (void)setConnectedToExternalAccessory:(BOOL)arg1;
- (BOOL)bootstrapAndExec;
- (id)UIRemoteAppPortName;
- (id)GSEventPortName;
- (id)GSEventPort;
- (double)elapsedCPUTime;
- (id)exitContext;
- (BOOL)isBeingDebugged;
- (id)initWithApplicationInfo:(id)arg1 callOutQueue:(id)arg2;
- (void)watchdogFired:(id)arg1;
- (void)watchdogStarted:(id)arg1;
- (void)process:(id)arg1 isBeingDebugged:(BOOL)arg2;
- (void)processWillExpire:(id)arg1;
- (void)process:(id)arg1 taskStateDidChange:(int)arg2;
- (void)_queue_setBeingDebugged:(BOOL)arg1;
- (id)_workspaceServer;
- (int)_queue_ourTaskStateForBKSTaskState:(int)arg1;
- (BOOL)_queue_shouldWatchdogWithDeclineReason:(id*)arg1;
- (void)_queue_forceCrashReportWithReason:(int)arg1 description:(id)arg2;
- (void)_queue_killWithSignal:(int)arg1;
- (BOOL)_queue_isBeingPtraced;
- (id)_queue_crashReportThermalsInfo;
- (BOOL)_queue_supportsContinuousBackgroundMode;
- (BOOL)_queue_isSystemApplication;
- (void)_queue_watchdogTerminateWithReason:(int)arg1 format:(id)arg2;
- (id)_queue_lockedFilePathsIgnoringAllowed;
- (void)_queue_setVisibility:(int)arg1 stateMonitorVisibility:(int)arg2;
- (BOOL)_queue_consideredUnderLock;
- (int)_queue_bksVisibilityForVisibility:(int)arg1;
- (void)_queue_startWatchdogTimerOfType:(int)arg1 withDuration:(double)arg2;
- (void)_queue_takeLaunchProcessAssertion;
- (int)_queue_calculateDefaultSceneSuspendType;
- (void)_queue_setTaskPort:(id)arg1;
- (void)_queue_setSupportsSuspendOnLock:(BOOL)arg1;
- (void)_queue_setSupportsBackgroundTaskAssertions:(BOOL)arg1;
- (void)_queue_waitToExecOrExit;
- (void)_queue_setupBKSProcess;
- (void)_queue_setAllowedLockedFilePaths:(id)arg1;
- (id)_queue_internalDebugEnvironmentVariables;
- (void)_queue_doGracefulKillWithCompletion:(id)arg1 withWatchdog:(BOOL)arg2;
- (void)_queue_enumerateApplicationObserversWithBlock:(id)arg1;
- (void)_queue_executeLaunchCompletionBlocks;
- (void)_queue_dropLaunchProcessAssertion;
- (void)_queue_dropContinuousProcessAssertion;
- (void)_queue_cancelWatchdogTimer;
- (unsigned long long)_queue_noteExitedForForceQuit:(BOOL)arg1;
- (void)_queue_processReallyDidExit;
- (void)setNowPlayingWithAudio:(BOOL)arg1;
- (void)setRecordingAudio:(BOOL)arg1;
- (void)_queue_invalidateBKSProcess;
- (BOOL)_queue_finishLaunch;
- (BOOL)_queue_bootstrapAndExec;
- (id)_queue_UIRemoteAppPortName;
- (id)_queue_GSEventPortName;
- (void)_queue_killForReason:(int)arg1 andReport:(BOOL)arg2 withDescription:(id)arg3 completion:(id)arg4;
- (void)killForReason:(int)arg1 andReport:(BOOL)arg2 withDescription:(id)arg3 completion:(id)arg4;
- (id)_queue_executionContext;
- (BOOL)_queue_isBeingDebugged;
- (id)initWithApplicationInfo:(id)arg1 pid:(int)arg2 callOutQueue:(id)arg3;
- (BOOL)_queue_supportsSuspendOnLock;
- (void)executeBlockAfterLaunchCompletes:(id)arg1;
- (int)_queue_terminationReason;
- (double)_queue_execTime;
- (id)_queue_cpuStatistics;
- (void)_queue_sceneNeedsGracefulExit:(id)arg1 withExitCompletion:(id)arg2;
- (int)_queue_defaultSuspendType;
- (BOOL)_queue_hasFinishedLaunching;
- (void)_queue_sceneLifecycleStateChanged:(id)arg1;
- (id)initWithBundleID:(id)arg1 pid:(int)arg2 callOutQueue:(id)arg3;
- (void)_queue_processDidExit;
- (void)_queue_setVisibility:(int)arg1;
- (void)_queue_setTaskState:(int)arg1;
- (id)_queue_name;
- (id)_createWorkspace;
- (void)killForReason:(int)arg1 andReport:(BOOL)arg2 withDescription:(id)arg3;
- (id)applicationInfo;
- (BOOL)isApplicationProcess;
- (id)_applicationWorkspace;
- (BOOL)isSystemApplicationProcess;
- (void)setExecutionContext:(id)arg1;
- (id)executionContext;
- (id)_workspace;
- (void)stop;
- (void)dealloc;

@end
