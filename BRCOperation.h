/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSError, NSObject<OS_dispatch_source>, NSObject<OS_dispatch_queue>, CKDatabase, NSMutableArray, BRCThrottle, BRCAccountSession, NSObject<OS_dispatch_group>, NSString, NSDate, BRCLocalContainer;

@interface BRCOperation : NSOperation  {
    NSObject<OS_dispatch_queue> *_internalQueue;
    NSDate *_startDate;
    NSDate *_lastTryDate;
    NSDate *_nextTryDate;
    NSError *_lastError;
    NSMutableArray *_subOperations;
    long long _throttleHash;
    NSObject<OS_dispatch_source> *_retryTimer;
    NSObject<OS_dispatch_group> *_group;
    BOOL _finished;
    BOOL _executing;
    BOOL _isDiscretionary;
    BOOL _usesBackgroundSession;
    BOOL _allowsCellularAccess;
    NSString *_name;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    CKDatabase *_database;
    BRCThrottle *_operationThrottle;
    BRCLocalContainer *_container;
    BRCAccountSession *_accountSession;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _mainBlock;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _finishBlock;

    id _logSections;
}

@property(readonly) NSError * error;
@property(readonly) id logSections;
@property(copy) NSString * name;
@property(readonly) NSObject<OS_dispatch_queue> * callbackQueue;
@property BRCThrottle * operationThrottle;
@property BOOL usesBackgroundSession;
@property BOOL allowsCellularAccess;
@property BOOL isDiscretionary;
@property CKDatabase * database;
@property(retain) BRCLocalContainer * container;
@property(retain) BRCAccountSession * accountSession;
@property(copy) id mainBlock;
@property(copy) id finishBlock;
@property(getter=isExecuting) BOOL executing;
@property(getter=isFinished) BOOL finished;


- (id)error;
- (id)logSections;
- (void)setFinishBlock:(id)arg1;
- (id)finishBlock;
- (void)setMainBlock:(id)arg1;
- (void)setAccountSession:(id)arg1;
- (void)setOperationThrottle:(id)arg1;
- (void)setDatabase:(id)arg1;
- (void)addSubOperation:(id)arg1;
- (void)completedWithResult:(id)arg1 error:(id)arg2;
- (BOOL)isConcurrent;
- (BOOL)usesBackgroundSession;
- (void)setIsDiscretionary:(BOOL)arg1;
- (BOOL)isDiscretionary;
- (id)database;
- (void)_completedWithResult:(id)arg1 error:(id)arg2;
- (void)setFinished:(BOOL)arg1;
- (BOOL)shouldRetryForError:(id)arg1;
- (void)_scheduleExecutionWithPreviousError:(id)arg1 throttle:(id)arg2;
- (id)operationThrottle;
- (void)_executeAndBumpThrottle:(id)arg1;
- (double)retryTimeIntervalForError:(id)arg1;
- (void)_main;
- (BOOL)finishIfCancelled;
- (void)setExecuting:(BOOL)arg1;
- (void)setAllowsCellularAccess:(BOOL)arg1;
- (BOOL)allowsCellularAccess;
- (id)accountSession;
- (id)mainBlock;
- (void)finishWithResult:(id)arg1 error:(id)arg2;
- (id)callbackQueue;
- (id)initWithName:(id)arg1 group:(id)arg2;
- (void)setUsesBackgroundSession:(BOOL)arg1;
- (BOOL)isExecuting;
- (BOOL)isFinished;
- (id)initWithName:(id)arg1;
- (void).cxx_destruct;
- (void)main;
- (id)container;
- (void)setContainer:(id)arg1;
- (id)state;
- (void)cancel;
- (void)start;
- (id)name;
- (void)setName:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)init;

@end
