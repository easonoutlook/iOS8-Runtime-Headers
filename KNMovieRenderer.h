/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TSDMovieHUDViewController>, NSObject<NSCopying>, NSObject<TSKMediaPlayerController>, CALayer, KNBuildRenderer;

@interface KNMovieRenderer : KNBuildRenderer <TSKMediaPlayerControllerDelegate> {
    NSObject<TSKMediaPlayerController> *mPlayerController;
    CALayer *mVideoLayer;
    double mStartTime;
    double mPlaybackAtStartTimePauseTime;
    double mPlaybackAtStartTimePauseOffset;
    KNBuildRenderer *mBuildInRenderer;
    <TSDMovieHUDViewController> *mViewController;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mFrameInContainerView;
    id mMovieStartCallbackTarget;
    SEL mMovieStartCallbackSelector;
    unsigned int mHasMoviePlaybackStarted : 1;
    unsigned int mNeedsToSendMovieStartCallback : 1;
    unsigned int mNeedsToSendBuildEndCallback : 1;
    unsigned int mIsObservingVideoLayerReadyForDisplay : 1;
    unsigned int mNeedsPlaybackAtStartTime : 1;
    unsigned int mHasPendingTogglePlayingControl : 1;
    unsigned int mPendingTogglePlayingControlStartsPlaying : 1;
    unsigned int mShouldMoviePlaybackEndOnCompletion : 1;
    unsigned int mWasMoviePlayingBeforeAnimationPause : 1;
}

@property KNBuildRenderer * buildInRenderer;
@property(readonly) BOOL hasMoviePlaybackStarted;
@property(readonly) NSObject<TSKMediaPlayerController> * playerController;
@property(retain) <TSDMovieHUDViewController> * viewController;
@property(readonly) CALayer * offscreenVideoLayer;
@property(readonly) NSObject<NSCopying> * movieTimelineMovieIdentifier;

+ (id)movieInfoForMovieTimelineMovieIdentifier:(id)arg1;
+ (id)movieTimelineMovieIdentifierForMovieInfo:(id)arg1;

- (void)stopAnimations;
- (id)playerController;
- (id)viewController;
- (void)setViewController:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)dealloc;
- (id)buildInRenderer;
- (id)movieTimelineMovieIdentifier;
- (id)offscreenVideoLayer;
- (void)updateHUD;
- (void)setFrameOnViewLayer:(id)arg1;
- (void)applyMovieControl:(int)arg1;
- (void)registerForMovieStartCallback:(SEL)arg1 target:(id)arg2;
- (BOOL)hasMoviePlaybackStarted;
- (void)interruptAndReset;
- (struct CGImage { }*)p_copyCurrentVideoFrameImage;
- (void)p_didEndMoviePlayback;
- (void)p_cancelPlaybackAtStartTime;
- (void)p_setupReflectionAndMaskingOnMovieTexture:(id)arg1 strokeTexture:(id)arg2 reflectionTexture:(id)arg3;
- (void)p_startPlaybackAtStartTime;
- (void)p_applyActionEffect:(id)arg1;
- (void)p_didStartMoviePlayback;
- (void)p_showVideoLayer;
- (void)p_unschedulePlaybackAtStartTime;
- (void)p_teardownUpdatingTexture:(BOOL)arg1;
- (void)p_startMoviePlaybackIfNeeded;
- (void)p_setupVideoLayer;
- (void)p_schedulePlaybackAtStartTime;
- (void)p_setupPlayerController;
- (void)resumeAnimationsIfPaused;
- (void)pauseAnimations;
- (void)animateAfterDelay:(double)arg1;
- (BOOL)addAnimationsAtLayerTime:(double)arg1;
- (void)resumeAnimationsIfPausedAtTime:(double)arg1;
- (void)pauseAnimationsAtTime:(double)arg1;
- (void)forceRemoveAnimations;
- (void)updateAnimationsForLayerTime:(double)arg1;
- (void)removeAnimationsAndFinish:(BOOL)arg1;
- (void)setBuildInRenderer:(id)arg1;
- (id)initWithInfo:(id)arg1 build:(id)arg2 stageIndex:(int)arg3 session:(id)arg4 model:(id)arg5 animatedSlideView:(id)arg6;
- (void)p_playbackDidFailWithError:(id)arg1;
- (void)playbackDidStopForPlayerController:(id)arg1;
- (void)playerController:(id)arg1 playbackDidFailWithError:(id)arg2;

@end
