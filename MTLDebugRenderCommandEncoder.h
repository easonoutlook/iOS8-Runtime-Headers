/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/Metal.framework/Metal
 */

@class NSMutableDictionary, MTLDepthStencilDescriptor, MTLRenderPipelineDescriptor, NSDictionary, MTLDebugFramebuffer;

@interface MTLDebugRenderCommandEncoder : MTLToolsRenderCommandEncoder  {
    NSMutableDictionary *_vertexBufferDict;
    NSMutableDictionary *_vertexTextureDict;
    NSMutableDictionary *_vertexSamplerDict;
    NSMutableDictionary *_fragmentBufferDict;
    NSMutableDictionary *_fragmentTextureDict;
    NSMutableDictionary *_fragmentSamplerDict;
    unsigned int _encoderState;
    MTLDebugFramebuffer *_framebuffer;
    unsigned int _frontFacingWinding;
    unsigned int _cullMode;
    unsigned int _depthClipMode;
    float _lineWidth;
    float _depthBias;
    float _depthBiasSlopeScale;
    float _depthBiasClamp;
    unsigned int _triangleFillMode;
    MTLRenderPipelineDescriptor *_renderPipelineDescriptor;
    MTLDepthStencilDescriptor *_depthStencilDescriptor;
    unsigned int _stencilRef;
    unsigned int _visibilityResultMode;
    unsigned int _visibilityResultOffset;
    float _blendColorRed;
    float _blendColorGreen;
    float _blendColorBlue;
    float _blendColorAlpha;
    struct { 
        unsigned int x; 
        unsigned int y; 
        unsigned int width; 
        unsigned int height; 
    } _scissorRect;
    struct { 
        double originX; 
        double originY; 
        double width; 
        double height; 
        double znear; 
        double zfar; 
    } _viewport;
}

@property(readonly) MTLDebugFramebuffer * framebuffer;
@property(readonly) struct { double x1; double x2; double x3; double x4; double x5; double x6; } viewport;
@property(readonly) unsigned int frontFacingWinding;
@property(readonly) unsigned int cullMode;
@property(readonly) unsigned int depthClipMode;
@property(readonly) float lineWidth;
@property(readonly) float depthBias;
@property(readonly) float depthBiasSlopeScale;
@property(readonly) float depthBiasClamp;
@property(readonly) struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; } scissorRect;
@property(readonly) unsigned int triangleFillMode;
@property(readonly) MTLRenderPipelineDescriptor * renderPipelineDescriptor;
@property(readonly) MTLDepthStencilDescriptor * depthStencilDescriptor;
@property(readonly) unsigned int stencilRef;
@property(readonly) unsigned int visibilityResultMode;
@property(readonly) unsigned int visibilityResultOffset;
@property(readonly) float blendColorRed;
@property(readonly) float blendColorGreen;
@property(readonly) float blendColorBlue;
@property(readonly) float blendColorAlpha;
@property(readonly) NSDictionary * vertexBufferDict;
@property(readonly) NSDictionary * vertexTextureDict;
@property(readonly) NSDictionary * vertexSamplerDict;
@property(readonly) NSDictionary * fragmentBufferDict;
@property(readonly) NSDictionary * fragmentTextureDict;
@property(readonly) NSDictionary * fragmentSamplerDict;


- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setLineWidth:(float)arg1;
- (float)lineWidth;
- (void)setCullMode:(unsigned int)arg1;
- (unsigned int)cullMode;
- (id)fragmentSamplerDict;
- (id)fragmentTextureDict;
- (id)fragmentBufferDict;
- (id)vertexSamplerDict;
- (id)vertexTextureDict;
- (id)vertexBufferDict;
- (float)blendColorAlpha;
- (float)blendColorBlue;
- (float)blendColorGreen;
- (float)blendColorRed;
- (unsigned int)visibilityResultOffset;
- (unsigned int)visibilityResultMode;
- (unsigned int)stencilRef;
- (id)depthStencilDescriptor;
- (id)renderPipelineDescriptor;
- (unsigned int)triangleFillMode;
- (struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })scissorRect;
- (float)depthBiasClamp;
- (float)depthBiasSlopeScale;
- (float)depthBias;
- (unsigned int)depthClipMode;
- (unsigned int)frontFacingWinding;
- (struct { double x1; double x2; double x3; double x4; double x5; double x6; })viewport;
- (id)framebuffer;
- (id)initWithRenderCommandEncoder:(id)arg1 parent:(id)arg2 framebuffer:(id)arg3;
- (void)_validateAllFunctionArguments;
- (void)validateCommonDrawErrors:(unsigned int)arg1 instanceCount:(unsigned int)arg2 maxVertexID:(unsigned int)arg3;
- (void)validatePipelineStateAndDepthStencilState;
- (void)validateFramebufferWithPipelineState:(id)arg1;
- (void)_setDefaults;
- (void)endEncoding;
- (void)drawIndexedPrimitives:(unsigned int)arg1 indexCount:(unsigned int)arg2 indexType:(unsigned int)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned int)arg5;
- (void)drawIndexedPrimitives:(unsigned int)arg1 indexCount:(unsigned int)arg2 indexType:(unsigned int)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned int)arg5 instanceCount:(unsigned int)arg6;
- (void)drawPrimitives:(unsigned int)arg1 vertexStart:(unsigned int)arg2 vertexCount:(unsigned int)arg3;
- (void)drawPrimitives:(unsigned int)arg1 vertexStart:(unsigned int)arg2 vertexCount:(unsigned int)arg3 instanceCount:(unsigned int)arg4;
- (void)setVisibilityResultMode:(unsigned int)arg1 offset:(unsigned int)arg2;
- (void)setStencilReferenceValue:(unsigned int)arg1;
- (void)setDepthStencilState:(id)arg1;
- (void)setFragmentSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned int)arg4;
- (void)setFragmentSamplerState:(id)arg1 atIndex:(unsigned int)arg2;
- (void)setFragmentTexture:(id)arg1 atIndex:(unsigned int)arg2;
- (void)setFragmentBuffer:(id)arg1 offset:(unsigned int)arg2 atIndex:(unsigned int)arg3;
- (void)setTriangleFillMode:(unsigned int)arg1;
- (void)setScissorRect:(struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })arg1;
- (void)setDepthBias:(float)arg1 slopeScale:(float)arg2 clamp:(float)arg3;
- (void)setDepthClipMode:(unsigned int)arg1;
- (void)setFrontFacingWinding:(unsigned int)arg1;
- (void)setVertexSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned int)arg4;
- (void)setVertexSamplerState:(id)arg1 atIndex:(unsigned int)arg2;
- (void)setVertexTexture:(id)arg1 atIndex:(unsigned int)arg2;
- (void)setVertexBuffer:(id)arg1 offset:(unsigned int)arg2 atIndex:(unsigned int)arg3;
- (void)setRenderPipelineState:(id)arg1;
- (void)setBlendColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4;
- (void)setViewport:(struct { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)dealloc;

@end
