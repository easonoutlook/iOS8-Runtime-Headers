/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/PhysicsKit.framework/PhysicsKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSMutableArray, NSMutableDictionary, <PKPhysicsContactDelegate>;

@interface PKPhysicsWorld : NSObject <NSCoding> {
    struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct PKCAether { struct vector<PKCField *, std::__1::allocator<PKCField *> > { struct PKCField {} **x_1_2_1; struct PKCField {} **x_1_2_2; struct __compressed_pair<PKCField **, std::__1::allocator<PKCField *> > { struct PKCField {} **x_3_3_1; } x_1_2_3; } x_8_1_1; } x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; double x17; float x18; struct PKCMechanics { struct b2World {} *x_19_1_1; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_2_2_1; struct QuadTree {} **x_2_2_2; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_3_3_1; } x_2_2_3; } x_19_1_2; } x19; } *_world;
    struct b2Vec2 { 
        float x; 
        float y; 
    } _gravity;
    bool_doSleep;
    double _accumulatedDt;
    struct PKContactListener { 
        int (**_vptr$b2ContactListener)(); 
        NSMutableDictionary *_contacts; 
        <PKPhysicsContactDelegate> *_contactDelegate; 
    } _contactListener;
    float _speed;
    NSMutableArray *_bodies;
    NSMutableArray *_joints;
    NSMutableArray *_fields;
    NSMutableArray *_postStepBlocks;
    struct PKDebugDrawPacket { 
        struct vector<PKPoint, std::__1::allocator<PKPoint> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _linePoints; 
        struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _colors; 
    } drawPacket;
}

@property bool _doSleep;
@property(retain) NSMutableArray * _bodies;
@property(readonly) /* Warning: unhandled struct encoding: '{PKCAether={vector<PKCField *' */ struct * aether; /* unknown property attribute:  std::__1::allocator<PKCField *> >=^^{PKCField}}}} */
@property(readonly) struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; int x22; SEL x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; float x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; unsigned long x61; void*x62; void*x63; void*x64; void*x65; id x66; SEL x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; id x82; SEL x83; long x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; const out void*x96; void*x97; void*x98; void*x99; void*x100; long long x101; void*x102; void*x103; void*x104; long long x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; boolx112; void*x113; out void*x114; void*x115; void*x116; void*x117; void*x118; struct x119; void*x120; void*x121; void*x122; int x123; void*x124; in void*x125; void*x126; void*x127; void*x128; void*x129; union x130; void*x131; char *x132; void*x133; char *x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; union x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; in void*x162; short x163; void*x164; int x165; void*x166; void*x167; void*x168; in void*x169; void*x170; void*x171; double x172; void*x173; void*x174; void*x175; short x176; void*x177; void*x178; void*x179; out void*x180; const void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; short x204; void*x205; void*x206; void*x207; const void*x208; void*x209; void*x210; BOOL x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; short x219; void*x220; void*x221; void*x222; unsigned char x223; void*x224; out void*x225; in void*x226; void*x227; void*x228; void*x229; void*x230; in void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; struct x244; void*x245; }* _world; /* unknown property attribute:  std::__1::allocator<QuadTree *> >=^^{QuadTree}}}}} */
@property struct b2Vec2 { float x1; float x2; } _gravity;
@property struct CGVector { float x1; float x2; } gravity;
@property float speed;
@property float velocityThreshold;
@property <PKPhysicsContactDelegate> * contactDelegate;

+ (id)world;

- (void)set_gravity:(struct b2Vec2 { float x1; float x2; })arg1;
- (void)set_doSleep:(bool)arg1;
- (void)set_bodies:(id)arg1;
- (id)_bodies;
- (bool)_doSleep;
- (struct b2Vec2 { float x1; float x2; })_gravity;
- (struct CGVector { float x1; float x2; })evalForce:(unsigned int)arg1 point:(struct CGPoint { float x1; float x2; })arg2;
- (id)sampleFields:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 categories:(unsigned int)arg2 dataSize:(struct CGSize { float x1; float x2; })arg3;
- (float)velocityThreshold;
- (void)removeAllFields;
- (void)__init__;
- (id)fields;
- (void)_runBlockOutsideOfTimeStep:(id)arg1;
- (id)bodies;
- (void)setGravity:(struct CGVector { float x1; float x2; })arg1;
- (struct CGVector { float x1; float x2; })gravity;
- (BOOL)stepWithTime:(double)arg1 velocityIterations:(unsigned int)arg2 positionIterations:(unsigned int)arg3;
- (void)enumerateBodiesInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 usingBlock:(id)arg2;
- (id)collisionDelegate;
- (void)setContactDelegate:(id)arg1;
- (id)contactDelegate;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setCollisionDelegate:(id)arg1;
- (void)removeBody:(id)arg1;
- (void)addBody:(id)arg1;
- (void)addJoint:(id)arg1;
- (void)removeJoint:(id)arg1;
- (struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct PKCAether { struct vector<PKCField *, std::__1::allocator<PKCField *> > { struct PKCField {} **x_1_2_1; struct PKCField {} **x_1_2_2; struct __compressed_pair<PKCField **, std::__1::allocator<PKCField *> > { struct PKCField {} **x_3_3_1; } x_1_2_3; } x_8_1_1; } x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; double x17; float x18; struct PKCMechanics { struct b2World {} *x_19_1_1; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_2_2_1; struct QuadTree {} **x_2_2_2; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_3_3_1; } x_2_2_3; } x_19_1_2; } x19; }*)_world;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)debugDraw:(float)arg1 matrix:(union _GLKMatrix4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; float x_1_1_5; float x_1_1_6; float x_1_1_7; float x_1_1_8; float x_1_1_9; float x_1_1_10; float x_1_1_11; float x_1_1_12; float x_1_1_13; float x_1_1_14; float x_1_1_15; float x_1_1_16; } x1; float x2[16]; })arg2 showsPhysics:(bool)arg3 showsFields:(bool)arg4;
- (const struct PKDebugDrawPacket { struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_1_1_1; struct { /* ? */ } *x_1_1_2; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_3_2_1; } x_1_1_3; } x1; struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_2_1_1; struct { /* ? */ } *x_2_1_2; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_3_2_1; } x_2_1_3; } x2; }*)debugDrawPacket;
- (struct CGVector { float x1; float x2; })sampleFields:(struct CGPoint { float x1; float x2; })arg1;
- (id)bodyAlongRayStart:(struct CGPoint { float x1; float x2; })arg1 end:(struct CGPoint { float x1; float x2; })arg2;
- (id)bodyInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)bodyAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint { float x1; float x2; })arg1 end:(struct CGPoint { float x1; float x2; })arg2 usingBlock:(id)arg3;
- (void)enumerateBodiesAtPoint:(struct CGPoint { float x1; float x2; })arg1 usingBlock:(id)arg2;
- (void)removeAllJoints;
- (void)removeAllBodies;
- (BOOL)hasFields;
- (BOOL)hasBodies;
- (void)removeField:(id)arg1;
- (struct PKCAether { struct vector<PKCField *, std::__1::allocator<PKCField *> > { struct PKCField {} **x_1_1_1; struct PKCField {} **x_1_1_2; struct __compressed_pair<PKCField **, std::__1::allocator<PKCField *> > { struct PKCField {} **x_3_2_1; } x_1_1_3; } x1; }*)aether;
- (void)addField:(id)arg1;
- (void)setVelocityThreshold:(float)arg1;
- (id)joints;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copy;
- (void)setSpeed:(float)arg1;
- (float)speed;
- (void)dealloc;
- (id)init;

@end
