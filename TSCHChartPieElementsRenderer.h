/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class NSIndexSet;

@interface TSCHChartPieElementsRenderer : TSCHRenderer  {
    struct CGPoint { 
        float x; 
        float y; 
    } mHitPoint;
    unsigned int mHitSeries;
    float mHitStartAngle;
    float mHitRadius;
    float mHitExplosion;
    BOOL mDidMoveDuringTouchIfNotThenRotateChartForDemo;
    NSIndexSet *mPartialRenderingSeriesIndexSet;
    BOOL mPartialRenderingInclusionFlag;
}


- (void)dealloc;
- (void)drawAll;
- (void)drawAllButSeriesIndicies:(id)arg1;
- (void)drawOnlySeriesIndicies:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })chartLayoutSpaceRenderingRect;
- (void)p_drawOnlyShapeImage:(struct CGLayer { }*)arg1 intoRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 intoContext:(struct CGContext { }*)arg3 usingBlendMode:(int)arg4 opacity:(float)arg5;
- (void)p_drawOnlyShadow:(id)arg1 forImage:(struct CGLayer { }*)arg2 intoRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 intoContext:(struct CGContext { }*)arg4 atViewScale:(float)arg5 usingBlendMode:(int)arg6 opacity:(float)arg7;
- (struct CGLayer { }*)p_newPreRenderedImageWithContext:(struct CGContext { }*)arg1 path:(struct CGPath { }*)arg2 fill:(id)arg3 stroke:(id)arg4 shadow:(id)arg5 outUserSpaceLayerBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg6;
- (BOOL)p_shouldRenderSeriesIndex:(unsigned int)arg1;
- (void)p_drawWedgePathIntoContext:(struct CGContext { }*)arg1 path:(struct CGPath { }*)arg2 fill:(id)arg3 stroke:(id)arg4 opacity:(float)arg5;
- (struct CGLayer { }*)p_newCGLayerForUserSpaceRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2 outUserSpaceLayerBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg3;
- (void)p_renderIntoContext:(struct CGContext { }*)arg1 visible:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (int)chunkPlane;

@end
