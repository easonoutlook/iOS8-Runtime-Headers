/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIKBRenderConfig, _UIInputViewContent, UIView, UIImage, CALayer, NSMutableDictionary, NSArray;

@interface UIInputView : UIView <UISplittableInputView> {
    int _style;
    UIKBRenderConfig *_renderConfig;
    BOOL _suppressBackgroundStyling;
    BOOL _disableSplitSupport;
    _UIInputViewContent *_leftContentView;
    _UIInputViewContent *_rightContentView;
    float _contentRatio;
    struct CGSize { 
        float width; 
        float height; 
    } _leftContentSize;
    struct CGSize { 
        float width; 
        float height; 
    } _rightContentSize;
    struct CGSize { 
        float width; 
        float height; 
    } _defaultSize;
    float _gapWidth;
    float _leftOffset;
    BOOL _isTransitioning;
    float _transitionGap;
    float _transitionLeftOffset;
    float _transitionRatio;
    UIImage *_mergedImage;
    UIImage *_splitImage;
    NSMutableDictionary *_mergedSliceMap;
    NSMutableDictionary *_splitSliceMap;
    NSArray *_visibleLayers;
    CALayer *_transitionLayer;
}

@property(readonly) int inputViewStyle;
@property(readonly) UIView * leftContentView;
@property(readonly) UIView * rightContentView;
@property float contentRatio;
@property struct CGSize { float x1; float x2; } leftContentViewSize;
@property struct CGSize { float x1; float x2; } rightContentViewSize;
@property(retain) UIImage * _mergedImage;
@property(retain) UIImage * _splitImage;
@property(retain) NSMutableDictionary * _mergedSliceMap;
@property(retain) NSMutableDictionary * _splitSliceMap;

+ (void)_setupAppearanceIfNecessary;

- (void)set_splitSliceMap:(id)arg1;
- (id)_splitSliceMap;
- (void)set_mergedSliceMap:(id)arg1;
- (id)_mergedSliceMap;
- (void)set_splitImage:(id)arg1;
- (id)_splitImage;
- (void)set_mergedImage:(id)arg1;
- (id)_mergedImage;
- (void)setRightContentViewSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setLeftContentViewSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setInputViewStyle:(int)arg1;
- (BOOL)_disableSplitSupport;
- (void)_setSuppressBackgroundStyling:(BOOL)arg1;
- (BOOL)_suppressBackgroundStyling;
- (id)_toolbarBorderedBackground;
- (id)_splitBorderedBackgroundWithCorners:(unsigned int)arg1;
- (void)_updateWithSize:(struct CGSize { float x1; float x2; })arg1;
- (float)contentRatio;
- (int)inputViewStyle;
- (float)_additionalClipHeight;
- (void)_setNeedsContentSizeUpdate;
- (void)_setDisableSplitSupport:(BOOL)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inputViewStyle:(int)arg2;
- (id)rightContentView;
- (id)leftContentView;
- (void)setContentRatio:(float)arg1;
- (void)_setProgress:(float)arg1 boundedBy:(float)arg2;
- (BOOL)_isToolbars;
- (void)_setLeftOffset:(float)arg1 gapWidth:(float)arg2;
- (void)didEndSplitTransition;
- (void)willBeginSplitTransition;
- (void)updateSplitSubviewContraintsWithLeftContentSize:(struct CGSize { float x1; float x2; })arg1 rightContentSize:(struct CGSize { float x1; float x2; })arg2;
- (void)layoutSplitSubviewsWithLeftContentSize:(struct CGSize { float x1; float x2; })arg1 rightContentSize:(struct CGSize { float x1; float x2; })arg2;
- (void)updateMergedSubviewConstraints;
- (void)layoutMergedSubviews;
- (BOOL)_supportsSplit;
- (struct CGSize { float x1; float x2; })_defaultSize;
- (struct CGSize { float x1; float x2; })rightContentViewSize;
- (struct CGSize { float x1; float x2; })leftContentViewSize;
- (void)_updateClipCorners;
- (BOOL)_isSplit;
- (void)_endSplitTransitionIfNeeded:(BOOL)arg1;
- (void)_beginSplitTransitionIfNeeded:(float)arg1 gapWidth:(float)arg2;
- (int)_clipCornersOfView:(id)arg1;
- (id)_inheritedRenderConfig;
- (void)_setRenderConfig:(id)arg1;
- (void)_updateBackgroundColor;
- (id)tintColor;
- (BOOL)_isTransitioning;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;

@end
