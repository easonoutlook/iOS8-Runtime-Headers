/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSObject<OS_dispatch_queue>, NSInputStream, NSDictionary, NSString, NSURL, NSData, NSArray;

@interface SSURLRequestProperties : NSObject <SSXPCCoding, NSCoding, NSCopying, NSMutableCopying> {
    int _allowedRetryCount;
    BOOL _allowsBootstrapCellularData;
    unsigned int _cachePolicy;
    NSString *_clientAuditBundleIdentifier;
    NSData *_clientAuditTokenData;
    NSString *_clientIdentifier;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    long long _expectedContentLength;
    NSData *_httpBody;
    NSInputStream *_httpBodyStream;
    NSDictionary *_httpHeaders;
    NSString *_httpMethod;
    BOOL _isITunesStoreRequest;
    int _kbsyncType;
    BOOL _largeDownload;
    unsigned int _networkServiceType;
    NSDictionary *_requestParameters;
    BOOL _requiresExtendedValidationCertificates;
    BOOL _requiresHTTPS;
    BOOL _shouldDecodeResponse;
    BOOL _shouldDisableCellular;
    BOOL _shouldDisableCellularFallback;
    BOOL _shouldProcessProtocol;
    BOOL _shouldSendSecureToken;
    BOOL _shouldSetCookies;
    double _timeoutInterval;
    NSString *_urlBagKey;
    int _urlBagType;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _urlBagURLBlock;

    NSArray *_urls;
    NSArray *_userAgentComponents;
}

@property(readonly) int allowedRetryCount;
@property(copy,readonly) NSString * clientIdentifier;
@property(readonly) unsigned int cachePolicy;
@property(readonly) long long expectedContentLength;
@property(copy,readonly) NSData * HTTPBody;
@property(copy,readonly) NSDictionary * HTTPHeaders;
@property(copy,readonly) NSString * HTTPMethod;
@property(getter=isITunesStoreRequest,readonly) BOOL ITunesStoreRequest;
@property(readonly) unsigned int networkServiceType;
@property(copy,readonly) NSDictionary * requestParameters;
@property(readonly) double timeoutInterval;
@property(copy,readonly) NSString * URLBagKey;
@property(retain,readonly) NSURL * URL;
@property(copy,readonly) NSArray * userAgentComponents;
@property(readonly) BOOL allowsBootstrapCellularData;
@property(readonly) BOOL canBeResolved;
@property(copy,readonly) NSString * clientAuditBundleIdentifier;
@property(copy,readonly) NSData * clientAuditTokenData;
@property(retain,readonly) NSInputStream * HTTPBodyStream;
@property(readonly) int KBSyncType;
@property(getter=isLargeDownload,readonly) BOOL largeDownload;
@property(readonly) BOOL requiresExtendedValidationCertificates;
@property(readonly) BOOL requiresHTTPS;
@property(readonly) BOOL shouldAddKBSyncData;
@property(readonly) BOOL shouldDecodeResponse;
@property(readonly) BOOL shouldDisableCellularFallback;
@property(readonly) BOOL shouldDisableCellular;
@property(readonly) BOOL shouldProcessProtocol;
@property(readonly) BOOL shouldSendSecureToken;
@property(readonly) BOOL shouldSetCookies;
@property(readonly) int URLBagType;
@property(copy,readonly) id URLBagURLBlock;
@property(copy,readonly) NSArray * URLs;


- (id)_initCommon;
- (id)HTTPHeaders;
- (id)URLBagURLBlock;
- (id)copyURLRequest;
- (id)requestParameters;
- (BOOL)canBeResolved;
- (long long)expectedContentLength;
- (BOOL)shouldDisableCellularFallback;
- (BOOL)shouldDisableCellular;
- (BOOL)shouldAddKBSyncData;
- (BOOL)requiresHTTPS;
- (BOOL)requiresExtendedValidationCertificates;
- (int)KBSyncType;
- (BOOL)isLargeDownload;
- (id)clientAuditTokenData;
- (id)clientAuditBundleIdentifier;
- (BOOL)shouldSetCookies;
- (BOOL)shouldSendSecureToken;
- (BOOL)shouldProcessProtocol;
- (int)allowedRetryCount;
- (id)userAgentComponents;
- (BOOL)allowsBootstrapCellularData;
- (BOOL)shouldDecodeResponse;
- (BOOL)isITunesStoreRequest;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)URLBagKey;
- (int)URLBagType;
- (id)clientIdentifier;
- (id)HTTPMethod;
- (id)HTTPBody;
- (id)HTTPBodyStream;
- (unsigned int)cachePolicy;
- (double)timeoutInterval;
- (id)URLs;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)initWithURL:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)URL;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithURLRequest:(id)arg1;
- (unsigned int)networkServiceType;

@end
