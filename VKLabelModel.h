/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class VKStyleManager, <VKLabelModelDelegate>, NSArray;

@interface VKLabelModel : VKModelObject <LabelManagerDelegate, GEOResourceManifestTileGroupObserver, VKMapLayer, VKStyleManagerObserver, VKMapModeObserver> {
    BOOL _debugSkipLabels;
    <VKLabelModelDelegate> *_delegate;
    BOOL _drawLabels;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _observerIsReadyHook;

    struct shared_ptr<vk::LabelManager> { 
        struct LabelManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _labelManager;
    int _layoutStamp;
    struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { 
        struct shared_ptr<vk::LabelMapTile> {} *__begin_; 
        struct shared_ptr<vk::LabelMapTile> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { 
            struct shared_ptr<vk::LabelMapTile> {} *__first_; 
        } __end_cap_; 
    } _currentTiles;
    bool_inRealistic;
    BOOL _shouldModifyLabelsOnRoutes;
}

@property <VKLabelModelDelegate> * delegate;
@property BOOL drawLabels;
@property BOOL localizeLabels;
@property int labelScaleFactor;
@property BOOL labelMarkerSelectionEnabled;
@property(readonly) struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; } labelManager;
@property int shieldSize;
@property int navigationShieldSize;
@property int shieldIdiom;
@property BOOL showsPointsOfInterest;
@property BOOL shouldModifyLabelsOnRoutes;
@property(retain) NSArray * externalTrafficIncidents;
@property(readonly) VKStyleManager * styleManager;

+ (BOOL)reloadOnStylesheetChange;

- (BOOL)drawLabels;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; unsigned char x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; struct Matrix<double, 3, 1> { double x_34_1_1[3]; } x34; struct Matrix<double, 3, 1> { double x_35_1_1[3]; } x35; struct Matrix<double, 3, 1> { double x_36_1_1[3]; } x36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; double x40; double x41; double x42; double x43; double x44; float x45; struct { double x_46_1_1[4][4]; } x46; struct Matrix<double, 4, 4> { double x_47_1_1[16]; } x47; struct CGSize { float x_48_1_1; float x_48_1_2; } x48; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_49_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_49_1_2; } x49; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_50_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_50_1_2; } x50; float x51; float x52; float x53; struct LabelAngle { unsigned char x_54_1_1; } x54; unsigned int x55; double x56[5]; double x57; int x58; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_59_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_59_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_59_1_3; } x59; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_60_1_1; unsigned int x_60_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_60_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_60_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_60_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_60_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_60_1_7; boolx_60_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_60_1_9; } x60; struct LabelPool { unsigned int x_61_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_61_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_61_1_3; unsigned int x_61_1_4; } x61; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_62_1_1; struct shared_ptr<vk::InfoLabel> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_62_1_3; } x62; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_63_1_1; struct InfoLabel {} **x_63_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_63_1_3; } x63; struct FontAtlas { int (**x_64_1_1)(); int x_64_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_64_1_3; struct FontAtlasCell {} *x_64_1_4; struct FontAtlasCell {} *x_64_1_5; int x_64_1_6; struct CGColor {} *x_64_1_7; struct CGContext {} *x_64_1_8; void *x_64_1_9; unsigned int x_64_1_10; unsigned int x_64_1_11; struct FontGlyphCache {} *x_64_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_64_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_64_1_14; } x64; struct LabelMesh { int (**x_65_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_65_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_65_1_3; struct FontAtlasBase {} *x_65_1_4; boolx_65_1_5; unsigned int x_65_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_65_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_65_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_65_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_65_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_65_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_65_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_65_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_65_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_65_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_65_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_65_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_65_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_65_1_19; unsigned int x_65_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_65_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_65_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_65_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_65_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_65_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_65_1_26; unsigned int x_65_1_27; } x65; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_66_1_1; float x_66_1_2; boolx_66_1_3; int x_66_1_4; int x_66_1_5; unsigned int x_66_1_6; float x_66_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_66_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_66_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_66_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_66_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_66_1_12; } x66; struct LabelCollider { struct LabelManager {} *x_67_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_67_1_2; float x_67_1_3; float x_67_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_67_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_67_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_67_1_7; unsigned int x_67_1_8; boolx_67_1_9; boolx_67_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_67_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned int x_12_2_1; unsigned int x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_67_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned int x_13_2_1; unsigned int x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_67_1_13; } x67; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_68_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_68_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_68_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_68_1_4; boolx_68_1_5; } x68; unsigned int x69; unsigned int x70; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_71_1_1; struct __shared_weak_count {} *x_71_1_2; } x71; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_72_1_1; struct shared_ptr<vk::LabelIcon> {} *x_72_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_72_1_3; } x72; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_73_1_1; struct __shared_weak_count {} *x_73_1_2; } x73; unsigned int x74; double x75; double x76; boolx77; float x78; int x79; unsigned int x80; double x81; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_82_1_1; struct __shared_weak_count {} *x_82_1_2; } x82; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_83_1_1; struct __shared_weak_count {} *x_83_1_2; } x83; struct LabelIdentifier { unsigned int x_84_1_1; } x84; int x85; int x86; float x87; int x88; boolx89; boolx90; boolx91; int x92; int x93; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_94_1_1)(); id x_94_1_2; struct _retain_objc { } x_94_1_3; struct _release_objc { } x_94_1_4; } x94; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_95_1_1)(); id x_95_1_2; struct _retain_objc { } x_95_1_3; struct _release_objc { } x_95_1_4; } x95; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_96_1_1)(); id x_96_1_2; struct _retain_objc { } x_96_1_3; struct _release_objc { } x_96_1_4; } x96; struct LabelNavTrafficSupport { struct LabelManager {} *x_97_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_97_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_97_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_97_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_97_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_97_1_6; boolx_97_1_7; } x97; boolx98; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_99_1_1; struct shared_ptr<vk::NavLabel> {} *x_99_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_99_1_3; } x99; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_100_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_100_1_2; } x100; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_101_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_101_1_2; } x101; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_102_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_102_1_2; } x102; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_103_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_103_1_2; } x103; }*)arg1 pendingArtworkIsReady:(BOOL)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; unsigned char x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; struct Matrix<double, 3, 1> { double x_34_1_1[3]; } x34; struct Matrix<double, 3, 1> { double x_35_1_1[3]; } x35; struct Matrix<double, 3, 1> { double x_36_1_1[3]; } x36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; double x40; double x41; double x42; double x43; double x44; float x45; struct { double x_46_1_1[4][4]; } x46; struct Matrix<double, 4, 4> { double x_47_1_1[16]; } x47; struct CGSize { float x_48_1_1; float x_48_1_2; } x48; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_49_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_49_1_2; } x49; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_50_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_50_1_2; } x50; float x51; float x52; float x53; struct LabelAngle { unsigned char x_54_1_1; } x54; unsigned int x55; double x56[5]; double x57; int x58; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_59_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_59_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_59_1_3; } x59; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_60_1_1; unsigned int x_60_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_60_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_60_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_60_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_60_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_60_1_7; boolx_60_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_60_1_9; } x60; struct LabelPool { unsigned int x_61_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_61_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_61_1_3; unsigned int x_61_1_4; } x61; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_62_1_1; struct shared_ptr<vk::InfoLabel> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_62_1_3; } x62; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_63_1_1; struct InfoLabel {} **x_63_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_63_1_3; } x63; struct FontAtlas { int (**x_64_1_1)(); int x_64_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_64_1_3; struct FontAtlasCell {} *x_64_1_4; struct FontAtlasCell {} *x_64_1_5; int x_64_1_6; struct CGColor {} *x_64_1_7; struct CGContext {} *x_64_1_8; void *x_64_1_9; unsigned int x_64_1_10; unsigned int x_64_1_11; struct FontGlyphCache {} *x_64_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_64_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_64_1_14; } x64; struct LabelMesh { int (**x_65_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_65_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_65_1_3; struct FontAtlasBase {} *x_65_1_4; boolx_65_1_5; unsigned int x_65_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_65_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_65_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_65_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_65_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_65_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_65_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_65_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_65_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_65_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_65_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_65_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_65_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_65_1_19; unsigned int x_65_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_65_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_65_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_65_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_65_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_65_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_65_1_26; unsigned int x_65_1_27; } x65; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_66_1_1; float x_66_1_2; boolx_66_1_3; int x_66_1_4; int x_66_1_5; unsigned int x_66_1_6; float x_66_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_66_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_66_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_66_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_66_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_66_1_12; } x66; struct LabelCollider { struct LabelManager {} *x_67_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_67_1_2; float x_67_1_3; float x_67_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_67_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_67_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_67_1_7; unsigned int x_67_1_8; boolx_67_1_9; boolx_67_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_67_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned int x_12_2_1; unsigned int x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_67_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned int x_13_2_1; unsigned int x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_67_1_13; } x67; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_68_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_68_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_68_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_68_1_4; boolx_68_1_5; } x68; unsigned int x69; unsigned int x70; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_71_1_1; struct __shared_weak_count {} *x_71_1_2; } x71; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_72_1_1; struct shared_ptr<vk::LabelIcon> {} *x_72_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_72_1_3; } x72; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_73_1_1; struct __shared_weak_count {} *x_73_1_2; } x73; unsigned int x74; double x75; double x76; boolx77; float x78; int x79; unsigned int x80; double x81; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_82_1_1; struct __shared_weak_count {} *x_82_1_2; } x82; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_83_1_1; struct __shared_weak_count {} *x_83_1_2; } x83; struct LabelIdentifier { unsigned int x_84_1_1; } x84; int x85; int x86; float x87; int x88; boolx89; boolx90; boolx91; int x92; int x93; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_94_1_1)(); id x_94_1_2; struct _retain_objc { } x_94_1_3; struct _release_objc { } x_94_1_4; } x94; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_95_1_1)(); id x_95_1_2; struct _retain_objc { } x_95_1_3; struct _release_objc { } x_95_1_4; } x95; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_96_1_1)(); id x_96_1_2; struct _retain_objc { } x_96_1_3; struct _release_objc { } x_96_1_4; } x96; struct LabelNavTrafficSupport { struct LabelManager {} *x_97_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_97_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_97_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_97_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_97_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_97_1_6; boolx_97_1_7; } x97; boolx98; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_99_1_1; struct shared_ptr<vk::NavLabel> {} *x_99_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_99_1_3; } x99; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_100_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_100_1_2; } x100; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_101_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_101_1_2; } x101; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_102_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_102_1_2; } x102; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_103_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_103_1_2; } x103; }*)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; unsigned char x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; struct Matrix<double, 3, 1> { double x_34_1_1[3]; } x34; struct Matrix<double, 3, 1> { double x_35_1_1[3]; } x35; struct Matrix<double, 3, 1> { double x_36_1_1[3]; } x36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; double x40; double x41; double x42; double x43; double x44; float x45; struct { double x_46_1_1[4][4]; } x46; struct Matrix<double, 4, 4> { double x_47_1_1[16]; } x47; struct CGSize { float x_48_1_1; float x_48_1_2; } x48; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_49_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_49_1_2; } x49; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_50_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_50_1_2; } x50; float x51; float x52; float x53; struct LabelAngle { unsigned char x_54_1_1; } x54; unsigned int x55; double x56[5]; double x57; int x58; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_59_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_59_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_59_1_3; } x59; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_60_1_1; unsigned int x_60_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_60_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_60_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_60_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_60_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_60_1_7; boolx_60_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_60_1_9; } x60; struct LabelPool { unsigned int x_61_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_61_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_61_1_3; unsigned int x_61_1_4; } x61; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_62_1_1; struct shared_ptr<vk::InfoLabel> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_62_1_3; } x62; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_63_1_1; struct InfoLabel {} **x_63_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_63_1_3; } x63; struct FontAtlas { int (**x_64_1_1)(); int x_64_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_64_1_3; struct FontAtlasCell {} *x_64_1_4; struct FontAtlasCell {} *x_64_1_5; int x_64_1_6; struct CGColor {} *x_64_1_7; struct CGContext {} *x_64_1_8; void *x_64_1_9; unsigned int x_64_1_10; unsigned int x_64_1_11; struct FontGlyphCache {} *x_64_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_64_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_64_1_14; } x64; struct LabelMesh { int (**x_65_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_65_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_65_1_3; struct FontAtlasBase {} *x_65_1_4; boolx_65_1_5; unsigned int x_65_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_65_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_65_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_65_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_65_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_65_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_65_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_65_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_65_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_65_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_65_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_65_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_65_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_65_1_19; unsigned int x_65_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_65_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_65_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_65_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_65_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_65_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_65_1_26; unsigned int x_65_1_27; } x65; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_66_1_1; float x_66_1_2; boolx_66_1_3; int x_66_1_4; int x_66_1_5; unsigned int x_66_1_6; float x_66_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_66_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_66_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_66_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_66_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_66_1_12; } x66; struct LabelCollider { struct LabelManager {} *x_67_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_67_1_2; float x_67_1_3; float x_67_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_67_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_67_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_67_1_7; unsigned int x_67_1_8; boolx_67_1_9; boolx_67_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_67_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned int x_12_2_1; unsigned int x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_67_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned int x_13_2_1; unsigned int x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_67_1_13; } x67; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_68_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_68_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_68_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_68_1_4; boolx_68_1_5; } x68; unsigned int x69; unsigned int x70; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_71_1_1; struct __shared_weak_count {} *x_71_1_2; } x71; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_72_1_1; struct shared_ptr<vk::LabelIcon> {} *x_72_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_72_1_3; } x72; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_73_1_1; struct __shared_weak_count {} *x_73_1_2; } x73; unsigned int x74; double x75; double x76; boolx77; float x78; int x79; unsigned int x80; double x81; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_82_1_1; struct __shared_weak_count {} *x_82_1_2; } x82; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_83_1_1; struct __shared_weak_count {} *x_83_1_2; } x83; struct LabelIdentifier { unsigned int x_84_1_1; } x84; int x85; int x86; float x87; int x88; boolx89; boolx90; boolx91; int x92; int x93; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_94_1_1)(); id x_94_1_2; struct _retain_objc { } x_94_1_3; struct _release_objc { } x_94_1_4; } x94; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_95_1_1)(); id x_95_1_2; struct _retain_objc { } x_95_1_3; struct _release_objc { } x_95_1_4; } x95; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_96_1_1)(); id x_96_1_2; struct _retain_objc { } x_96_1_3; struct _release_objc { } x_96_1_4; } x96; struct LabelNavTrafficSupport { struct LabelManager {} *x_97_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_97_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_97_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_97_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_97_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_97_1_6; boolx_97_1_7; } x97; boolx98; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_99_1_1; struct shared_ptr<vk::NavLabel> {} *x_99_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_99_1_3; } x99; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_100_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_100_1_2; } x100; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_101_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_101_1_2; } x101; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_102_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_102_1_2; } x102; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_103_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_103_1_2; } x103; }*)arg1 setNeedsDisplay:(BOOL)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; unsigned char x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; struct Matrix<double, 3, 1> { double x_34_1_1[3]; } x34; struct Matrix<double, 3, 1> { double x_35_1_1[3]; } x35; struct Matrix<double, 3, 1> { double x_36_1_1[3]; } x36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; double x40; double x41; double x42; double x43; double x44; float x45; struct { double x_46_1_1[4][4]; } x46; struct Matrix<double, 4, 4> { double x_47_1_1[16]; } x47; struct CGSize { float x_48_1_1; float x_48_1_2; } x48; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_49_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_49_1_2; } x49; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_50_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_50_1_2; } x50; float x51; float x52; float x53; struct LabelAngle { unsigned char x_54_1_1; } x54; unsigned int x55; double x56[5]; double x57; int x58; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_59_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_59_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_59_1_3; } x59; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_60_1_1; unsigned int x_60_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_60_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_60_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_60_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_60_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_60_1_7; boolx_60_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_60_1_9; } x60; struct LabelPool { unsigned int x_61_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_61_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_61_1_3; unsigned int x_61_1_4; } x61; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_62_1_1; struct shared_ptr<vk::InfoLabel> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_62_1_3; } x62; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_63_1_1; struct InfoLabel {} **x_63_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_63_1_3; } x63; struct FontAtlas { int (**x_64_1_1)(); int x_64_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_64_1_3; struct FontAtlasCell {} *x_64_1_4; struct FontAtlasCell {} *x_64_1_5; int x_64_1_6; struct CGColor {} *x_64_1_7; struct CGContext {} *x_64_1_8; void *x_64_1_9; unsigned int x_64_1_10; unsigned int x_64_1_11; struct FontGlyphCache {} *x_64_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_64_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_64_1_14; } x64; struct LabelMesh { int (**x_65_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_65_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_65_1_3; struct FontAtlasBase {} *x_65_1_4; boolx_65_1_5; unsigned int x_65_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_65_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_65_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_65_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_65_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_65_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_65_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_65_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_65_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_65_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_65_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_65_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_65_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_65_1_19; unsigned int x_65_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_65_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_65_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_65_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_65_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_65_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_65_1_26; unsigned int x_65_1_27; } x65; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_66_1_1; float x_66_1_2; boolx_66_1_3; int x_66_1_4; int x_66_1_5; unsigned int x_66_1_6; float x_66_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_66_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_66_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_66_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_66_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_66_1_12; } x66; struct LabelCollider { struct LabelManager {} *x_67_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_67_1_2; float x_67_1_3; float x_67_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_67_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_67_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_67_1_7; unsigned int x_67_1_8; boolx_67_1_9; boolx_67_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_67_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned int x_12_2_1; unsigned int x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_67_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned int x_13_2_1; unsigned int x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_67_1_13; } x67; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_68_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_7_1; unsigned int x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[11]; } x_1_6_2; struct __raw { unsigned long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_68_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_68_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_68_1_4; boolx_68_1_5; } x68; unsigned int x69; unsigned int x70; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_71_1_1; struct __shared_weak_count {} *x_71_1_2; } x71; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_72_1_1; struct shared_ptr<vk::LabelIcon> {} *x_72_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_72_1_3; } x72; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_73_1_1; struct __shared_weak_count {} *x_73_1_2; } x73; unsigned int x74; double x75; double x76; boolx77; float x78; int x79; unsigned int x80; double x81; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_82_1_1; struct __shared_weak_count {} *x_82_1_2; } x82; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_83_1_1; struct __shared_weak_count {} *x_83_1_2; } x83; struct LabelIdentifier { unsigned int x_84_1_1; } x84; int x85; int x86; float x87; int x88; boolx89; boolx90; boolx91; int x92; int x93; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_94_1_1)(); id x_94_1_2; struct _retain_objc { } x_94_1_3; struct _release_objc { } x_94_1_4; } x94; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_95_1_1)(); id x_95_1_2; struct _retain_objc { } x_95_1_3; struct _release_objc { } x_95_1_4; } x95; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_96_1_1)(); id x_96_1_2; struct _retain_objc { } x_96_1_3; struct _release_objc { } x_96_1_4; } x96; struct LabelNavTrafficSupport { struct LabelManager {} *x_97_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_97_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_97_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_97_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_97_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_97_1_6; boolx_97_1_7; } x97; boolx98; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_99_1_1; struct shared_ptr<vk::NavLabel> {} *x_99_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_99_1_3; } x99; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_100_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_100_1_2; } x100; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_101_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_101_1_2; } x101; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_102_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_102_1_2; } x102; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_103_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_103_1_2; } x103; }*)arg1 setNeedsLayout:(BOOL)arg2;
- (BOOL)shouldModifyLabelsOnRoutes;
- (void)updateLabelMapTiles:(id)arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (id)labelDebugString;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setFocusedPolylinePainter:(id)arg1;
- (id)focusedPolylinePainter;
- (void)setIsShowingRoute:(BOOL)arg1;
- (unsigned long long)mapLayerPosition;
- (void)didTransitionFrom:(int)arg1 To:(int)arg2;
- (void)willTransitionFrom:(int)arg1 To:(int)arg2;
- (void)didTapZoom;
- (void)willTapZoom;
- (void)setShouldModifyLabelsOnRoutes:(BOOL)arg1;
- (id)initWithPurpose:(unsigned int)arg1 sharedResources:(id)arg2;
- (void)stylesheetDoneChanging;
- (void)stylesheetWillTransition:(unsigned int)arg1;
- (void)setLabelMode:(unsigned char)arg1;
- (void)setVectorType:(int)arg1;
- (void)stylesheetDidChange;
- (void)prepareForStylesheetTransitionToMapDisplayStyle:(unsigned int)arg1 withReadinessBlock:(id)arg2;
- (void)setDrawLabels:(BOOL)arg1;
- (struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; })labelManager;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (id)labelMarkers;
- (id)selectedLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 selectableLabelsOnly:(BOOL)arg2;
- (void)deselectLabelMarker;
- (void)setExternalTrafficIncidents:(id)arg1;
- (id)externalTrafficIncidents;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (BOOL)showsPointsOfInterest;
- (void)setShieldIdiom:(int)arg1;
- (int)shieldIdiom;
- (void)setNavigationShieldSize:(int)arg1;
- (int)navigationShieldSize;
- (void)setShieldSize:(int)arg1;
- (int)shieldSize;
- (void)clearScene;
- (void)setMapType:(int)arg1;
- (void)setLabelScaleFactor:(int)arg1;
- (int)labelScaleFactor;
- (void)setLocalizeLabels:(BOOL)arg1;
- (BOOL)localizeLabels;
- (void)setTrafficEnabled:(BOOL)arg1;
- (void)setStyleManager:(id)arg1;
- (id)styleManager;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (BOOL)labelMarkerSelectionEnabled;
- (void).cxx_destruct;
- (void)setContentScale:(float)arg1;
- (id).cxx_construct;
- (id)delegate;
- (void)dealloc;
- (void)setDelegate:(id)arg1;

@end
