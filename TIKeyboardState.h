/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput
 */

@class TIKeyboardLayout, NSString, TIKeyboardLayoutState, TIDocumentState, TIKeyboardCandidate, TITextInputTraits;

@interface TIKeyboardState : NSObject <NSCopying, NSSecureCoding> {
    union { 
        int integerValue; 
        struct { 
            unsigned int userSelectedCurrentCandidate : 1; 
            unsigned int shouldSkipCandidateSelection : 1; 
            unsigned int suppressingCandidateSelection : 1; 
            unsigned int needsCandidateMetadata : 1; 
            unsigned int keyboardEventsLagging : 1; 
            unsigned int hardwareKeyboardMode : 1; 
            unsigned int splitKeyboardMode : 1; 
            unsigned int wordLearningEnabled : 1; 
            unsigned int autocorrectionEnabled : 1; 
            unsigned int shortcutConversionEnabled : 1; 
            unsigned int typologyLoggingEnabled : 1; 
            unsigned int autocapitalizationEnabled : 1; 
        } fields; 
    } _mask;
    union { 
        int integerValue; 
        struct { 
            unsigned int displayed : 1; 
            unsigned int autoDisplayMode : 1; 
        } fields; 
    } _autocorrectionListUIState;
    NSString *_clientIdentifier;
    NSString *_inputMode;
    NSString *_recipientIdentifier;
    TIKeyboardLayout *_keyLayout;
    int _shiftState;
    TIKeyboardLayoutState *_layoutState;
    TIDocumentState *_documentState;
    NSString *_inputForMarkedText;
    NSString *_searchStringForMarkedText;
    TIKeyboardCandidate *_currentCandidate;
    TITextInputTraits *_textInputTraits;
    NSString *_responseContext;
}

@property(copy) NSString * clientIdentifier;
@property(copy) NSString * inputMode;
@property(copy) NSString * recipientIdentifier;
@property(retain) TIKeyboardLayout * keyLayout;
@property int shiftState;
@property(copy) TIKeyboardLayoutState * layoutState;
@property(retain) TIDocumentState * documentState;
@property(copy) NSString * inputForMarkedText;
@property(copy) NSString * searchStringForMarkedText;
@property(retain) TIKeyboardCandidate * currentCandidate;
@property BOOL userSelectedCurrentCandidate;
@property BOOL shouldSkipCandidateSelection;
@property BOOL suppressingCandidateSelection;
@property BOOL needsCandidateMetadata;
@property BOOL keyboardEventsLagging;
@property BOOL hardwareKeyboardMode;
@property BOOL splitKeyboardMode;
@property BOOL wordLearningEnabled;
@property BOOL autocorrectionEnabled;
@property BOOL shortcutConversionEnabled;
@property BOOL typologyLoggingEnabled;
@property BOOL autocapitalizationEnabled;
@property(retain) TITextInputTraits * textInputTraits;
@property(copy) NSString * responseContext;
@property unsigned int autocapitalizationType;
@property unsigned int keyboardType;
@property BOOL secureTextEntry;
@property BOOL autocorrectionListUIDisplayed;
@property BOOL autocorrectionListUIAutoDisplayMode;

+ (BOOL)supportsSecureCoding;

- (BOOL)shortcutConversionEnabled;
- (BOOL)needsCandidateMetadata;
- (BOOL)wordLearningEnabled;
- (BOOL)keyboardEventsLagging;
- (id)inputForMarkedText;
- (BOOL)autocorrectionListUIDisplayed;
- (BOOL)autocapitalizationEnabled;
- (id)recipientIdentifier;
- (void)setAutocorrectionListUIAutoDisplayMode:(BOOL)arg1;
- (BOOL)autocorrectionListUIAutoDisplayMode;
- (BOOL)typologyLoggingEnabled;
- (void)_createTextInputTraitsIfNecessary;
- (id)clientIdentifier;
- (BOOL)secureTextEntry;
- (id)inputMode;
- (void)setKeyboardEventsLagging:(BOOL)arg1;
- (BOOL)hardwareKeyboardMode;
- (BOOL)userSelectedCurrentCandidate;
- (void)setUserSelectedCurrentCandidate:(BOOL)arg1;
- (BOOL)autocorrectionEnabled;
- (void)setSuppressingCandidateSelection:(BOOL)arg1;
- (BOOL)suppressingCandidateSelection;
- (BOOL)shouldSkipCandidateSelection;
- (void)setShiftState:(int)arg1;
- (int)shiftState;
- (void)setAutocapitalizationEnabled:(BOOL)arg1;
- (id)searchStringForMarkedText;
- (void)setDocumentState:(id)arg1;
- (id)documentState;
- (void)setSearchStringForMarkedText:(id)arg1;
- (void)setInputForMarkedText:(id)arg1;
- (void)setShouldSkipCandidateSelection:(BOOL)arg1;
- (void)setResponseContext:(id)arg1;
- (id)responseContext;
- (void)setRecipientIdentifier:(id)arg1;
- (void)setWordLearningEnabled:(BOOL)arg1;
- (void)setSplitKeyboardMode:(BOOL)arg1;
- (BOOL)splitKeyboardMode;
- (void)setAutocorrectionEnabled:(BOOL)arg1;
- (void)setKeyLayout:(id)arg1;
- (id)keyLayout;
- (void)setAutocorrectionListUIDisplayed:(BOOL)arg1;
- (void)setTextInputTraits:(id)arg1;
- (void)setShortcutConversionEnabled:(BOOL)arg1;
- (void)setNeedsCandidateMetadata:(BOOL)arg1;
- (void)setCurrentCandidate:(id)arg1;
- (void)setLayoutState:(id)arg1;
- (id)layoutState;
- (void)setInputMode:(id)arg1;
- (void)setTypologyLoggingEnabled:(BOOL)arg1;
- (void)setHardwareKeyboardMode:(BOOL)arg1;
- (void)setClientIdentifier:(id)arg1;
- (void)setKeyboardType:(unsigned int)arg1;
- (unsigned int)keyboardType;
- (void)setAutocapitalizationType:(unsigned int)arg1;
- (unsigned int)autocapitalizationType;
- (void)setSecureTextEntry:(BOOL)arg1;
- (id)textInputTraits;
- (id)currentCandidate;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (void)dealloc;

@end
