/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSWPStorage, TSWPRep, CALayer, NSObject<TSDContainerInfo>;

@interface TSWPShapeRep : TSDShapeRep <TSDMagicMoveMatching, TSDContainerRep, TSWPShapeLayoutDelegate> {
    BOOL _editingContainedRep;
    CALayer *_overflowGlyphLayer;
    struct CGPoint { 
        float x; 
        float y; 
    } _originalAutosizePositionOffset;
    TSWPRep *_containedRep;
}

@property(readonly) TSWPStorage * textStorageForTexture;
@property(readonly) BOOL isShapeInvisible;
@property(readonly) TSWPRep * containedRep;
@property(readonly) BOOL shouldBeginEditingOnSingleClick;
@property(readonly) NSObject<TSDContainerInfo> * containerInfo;

+ (void)test_TSWPTextPropertiesCheck;
+ (id)p_potentialMatchesWithChunkLength:(unsigned int)arg1 outgoingTextChunks:(id)arg2 incomingTextChunks:(id)arg3 textureContext:(id)arg4 textDeliveryType:(int)arg5;
+ (unsigned int)p_longestChunkInOutgoingObjects:(id)arg1 incomingObjects:(id)arg2 textDeliveryType:(int)arg3 addOutgoingChunksToArray:(id)arg4 addIncomingChunksToArray:(id)arg5;
+ (BOOL)p_shouldDisableTextMorphsFromPropertiesBetweenOutgoingStorage:(id)arg1 outgoingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 incomingStorage:(id)arg3 incomingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
+ (id)textPropertiesAffectingVisualStyleExceptSize;
+ (void)p_getOutgoingTextureSet:(id*)arg1 incomingTextureSet:(id*)arg2 withOutgoingRep:(id)arg3 outgoingChunkRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4 incomingRep:(id)arg5 incomingChunkRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg6 includeListLabels:(BOOL)arg7;
+ (BOOL)p_listLabelsAreEqualWithOutgoingStorage:(id)arg1 outgoingCharIndex:(int)arg2 incomingStorage:(id)arg3 incomingCharIndex:(int)arg4 shouldMatch:(BOOL*)arg5;
+ (id)p_textureSetFromRep:(id)arg1 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 includeListLabel:(BOOL)arg3 desiredContentRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4;
+ (id)p_stringByApplyingCapitalizationPropertyFromStorage:(id)arg1 withRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 toString:(id)arg3;
+ (float)p_mmAttributeMatchPercentWithOutgoingChunkDict:(id)arg1 incomingChunkDict:(id)arg2;
+ (unsigned int)p_numberOfDifferencesBetweenStyleProperties:(id)arg1 betweenOutgoingStorage:(id)arg2 outgoingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 incomingStorage:(id)arg4 incomingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg5 maxDifferencesBeforeReturning:(unsigned int)arg6;
+ (BOOL)p_stylesAreEqualWithOutgoingStorage:(id)arg1 outgoingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 incomingStorage:(id)arg3 incomingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
+ (id)textPropertiesNotAffectingVisualStyle;
+ (id)textPropertiesAffectingTextMorph;
+ (id)textPropertiesAffectingVisualStyle;
+ (id)textPropertiesNeedingCharacterAnimation;
+ (id)magicMoveAnimationMatchesFromMatches:(id)arg1;
+ (id)magicMoveTextMatchesBetweenOutgoingObjects:(id)arg1 andIncomingObjects:(id)arg2 textureContext:(id)arg3 textDeliveryType:(int)arg4;
+ (float)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2;

- (BOOL)isInvisible;
- (id)containerInfo;
- (BOOL)isSelectable;
- (id).cxx_construct;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)dealloc;
- (void)p_drawRubyInContext:(struct CGContext { }*)arg1 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_rectForRubyFields:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)p_getBoundsRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 contentRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg2 transform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; }*)arg3 applyReflection:(BOOL*)arg4 applyShadow:(BOOL*)arg5 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg6 includeListLabel:(BOOL)arg7 isMagicMove:(BOOL)arg8;
- (float)p_textureSetOpacity;
- (id)newTextureRenderableForRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 includeListLabel:(BOOL)arg2 isMagicMove:(BOOL)arg3 desiredContentRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 includeGroupedShadow:(BOOL)arg5 groupedShadowOnly:(BOOL)arg6;
- (BOOL)p_hasContentForRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 labelOnly:(BOOL)arg2;
- (BOOL)isShapeInvisible;
- (id)textStorageForTexture;
- (BOOL)shouldBeginEditingOnSingleClick;
- (float)pParagraphAlignmentOffset;
- (void)p_resetOverflowGlyphLayerIfNecessary;
- (BOOL)p_shouldShowTextOverflowGlyph;
- (id)p_overflowKnobImage;
- (id)containedRep;
- (void)shapeLayoutDidChangeContainedStorage:(id)arg1;
- (BOOL)shapeLayoutShouldUpdateInstructionalText:(id)arg1;
- (BOOL)selectionIsAppropriateToShowInvisiblePathHighlight;
- (BOOL)isEditingChildRep;
- (BOOL)shouldHitTestWithFill;
- (BOOL)wantsToHandleTapsOnContainingGroup;
- (BOOL)shouldIgnoreEditMenuTapAtPoint:(struct CGPoint { float x1; float x2; })arg1 withRecognizer:(id)arg2;
- (void)updateChildrenFromLayout;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;
- (unsigned long long)enabledKnobMask;
- (BOOL)mustDrawTilingLayerOnMainThread:(id)arg1;
- (id)additionalLayersOverLayer;
- (BOOL)handleSingleTapAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)wantsToHandleTapsWhenLocked;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;
- (id)hitReps:(struct CGPoint { float x1; float x2; })arg1 withSlop:(struct CGSize { float x1; float x2; })arg2;
- (void)willEndEditingContainedRep;
- (void)willBeginEditingContainedRep;
- (BOOL)canBeginEditingChildRepOnDoubleTap:(id)arg1;
- (void)selectChildRep:(id)arg1;
- (BOOL)canSelectChildRep:(id)arg1;
- (id)childReps;
- (void)recursivelyPerformSelector:(SEL)arg1;
- (id)resizedGeometryForTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)processChangedProperty:(int)arg1;
- (int)dragTypeAtCanvasPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)overlayLayers;
- (id)hitRep:(struct CGPoint { float x1; float x2; })arg1;
- (id)textureForContext:(id)arg1;
- (void)addAdditionalChildLayersToArray:(id)arg1;
- (id)dynamicResizeDidBegin;
- (BOOL)shouldShowKnobs;
- (BOOL)shouldShowSelectionHighlight;
- (void)willBeRemoved;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (id)hyperlinkRegions;

@end
