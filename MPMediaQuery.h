/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class MPMediaPlaylist, MPMediaQueryCriteria, NSSet, MPMediaItemCollection, MPMediaLibrary, MPMediaQuerySectionInfo, NSDictionary, NSString, NSArray;

@interface MPMediaQuery : NSObject <MPPProtobufferCoding, NSSecureCoding, NSCopying> {
    MPMediaLibrary *_mediaLibrary;
    MPMediaQueryCriteria *_criteria;
    int _isFilteringDisabled;
    NSArray *_staticEntities;
    unsigned int _staticEntityType;
}

@property(getter=music_playlist,readonly) MPMediaPlaylist * music_playlist;
@property(getter=music_playlistTitle,readonly) NSString * music_playlistTitle;
@property(readonly) MPMediaPlaylist * containingPlaylist;
@property(readonly) MPMediaItemCollection * collectionByJoiningCollections;
@property(retain) NSSet * filterPredicates;
@property(readonly) NSArray * items;
@property(readonly) NSArray * collections;
@property int groupingType;
@property(readonly) NSArray * itemSections;
@property(readonly) NSArray * collectionSections;
@property(retain) MPMediaLibrary * mediaLibrary;
@property(copy) NSSet * itemPropertiesToFetch;
@property(copy) NSSet * collectionPropertiesToFetch;
@property(getter=_orderingProperties,setter=_setOrderingProperties:,copy) NSArray * orderingProperties;
@property(getter=_orderingDirectionMappings,setter=_setOrderingDirectionMappings:,copy) NSDictionary * orderingDirectionMappings;
@property BOOL sortItems;
@property BOOL useSections;
@property(readonly) BOOL _hasItems;
@property(readonly) BOOL _hasCollections;
@property(readonly) unsigned int _countOfItems;
@property(readonly) unsigned int _countOfCollections;
@property(readonly) NSArray * itemPersistentIdentifiers;
@property(readonly) NSArray * collectionPersistentIdentifiers;
@property(readonly) MPMediaQuerySectionInfo * itemSectionInfo;
@property(readonly) MPMediaQuerySectionInfo * collectionSectionInfo;
@property(readonly) BOOL excludesEntitiesWithBlankNames;
@property(readonly) BOOL specifiesPlaylistItems;
@property(readonly) BOOL willGroupEntities;
@property BOOL ignoreSystemFilterPredicates;

+ (id)currentDevicePurchasesPlaylist;
+ (void)initialize;
+ (BOOL)supportsSecureCoding;
+ (id)activeGeniusPlaylist;
+ (id)geniusMixesQuery;
+ (id)videoPodcastsQuery;
+ (id)audioPodcastsQuery;
+ (id)movieRentalsQuery;
+ (id)moviesQuery;
+ (id)homeVideosQuery;
+ (id)tvShowsQuery;
+ (id)musicVideosQuery;
+ (id)videosQuery;
+ (id)albumArtistsQuery;
+ (id)genresQuery;
+ (id)composersQuery;
+ (id)compilationsQuery;
+ (id)audibleAudiobooksQuery;
+ (id)videoITunesUQuery;
+ (id)ITunesUAudioQuery;
+ (id)ITunesUQuery;
+ (id)podcastsQuery;
+ (id)playlistsQuery;
+ (id)songsQuery;
+ (id)artistsQuery;
+ (id)albumsQuery;
+ (BOOL)isFilteringDisabled;
+ (void)initFilteringDisabled;
+ (id)audiobooksQuery;
+ (void)setFilteringDisabled:(BOOL)arg1;
+ (id)musicQueryWithFilterPredicates:(id)arg1;

- (void)setIgnoreSystemFilterPredicates:(BOOL)arg1;
- (BOOL)ignoreSystemFilterPredicates;
- (void).cxx_destruct;
- (id)items;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)init;
- (BOOL)MPSD_hasDownloadingEntities;
- (BOOL)MPSD_hasDownloadableEntities;
- (id)MPSD_mediaQueryForDownloadingEntities;
- (id)MPSD_mediaQueryForDownloadableEntities;
- (id)collectionByJoiningCollections;
- (BOOL)_updatePredicateForProperty:(id)arg1 withPropertyPredicate:(id)arg2;
- (void)setFilterPropertyPredicate:(id)arg1;
- (id)containingPlaylist;
- (void)setFilterPredicate:(id)arg1 forProperty:(id)arg2;
- (void)removePredicatesForProperty:(id)arg1;
- (id)predicateForProperty:(id)arg1;
- (void)setCriteria:(id)arg1;
- (id)criteria;
- (void)_enumerateUnorderedCollectionsUsingBlock:(id)arg1;
- (void)_enumerateCollectionsUsingBlock:(id)arg1;
- (void)_enumerateUnorderedItemsUsingBlock:(id)arg1;
- (id)valueForAggregateFunction:(id)arg1 onCollectionsForProperty:(id)arg2;
- (id)valueForAggregateFunction:(id)arg1 onItemsForProperty:(id)arg2;
- (id)collectionSections;
- (id)itemSections;
- (BOOL)willGroupEntities;
- (BOOL)excludesEntitiesWithBlankNames;
- (BOOL)useSections;
- (void)setUseSections:(BOOL)arg1;
- (BOOL)sortItems;
- (id)_orderingDirectionMappings;
- (void)_setOrderingDirectionMappings:(id)arg1;
- (id)_orderingProperties;
- (void)_setOrderingProperties:(id)arg1;
- (id)collectionPersistentIdentifiers;
- (id)itemPersistentIdentifiers;
- (unsigned int)_countOfCollections;
- (BOOL)_hasCollections;
- (BOOL)_hasItems;
- (void)setCollectionPropertiesToFetch:(id)arg1;
- (id)collectionPropertiesToFetch;
- (void)setItemPropertiesToFetch:(id)arg1;
- (id)itemPropertiesToFetch;
- (void)setMediaLibrary:(id)arg1;
- (void)removeFilterPredicate:(id)arg1;
- (id)copyByRemovingStaticEntities;
- (id)initWithEntities:(id)arg1 entityType:(unsigned int)arg2;
- (void)_enumerateCollectionsInOrder:(BOOL)arg1 usingBlock:(id)arg2;
- (void)_enumerateItemsInOrder:(BOOL)arg1 usingBlock:(id)arg2;
- (id)_valueForAggregateFunction:(id)arg1 onProperty:(id)arg2 entityType:(unsigned int)arg3;
- (id)collectionSectionInfo;
- (id)itemSectionInfo;
- (unsigned int)groupingThreshold;
- (BOOL)specifiesPlaylistItems;
- (id)collections;
- (void)setSortItems:(BOOL)arg1;
- (void)setGroupingType:(int)arg1;
- (id)protobufferEncodableObject;
- (int)groupingType;
- (id)filterPredicates;
- (void)setStaticEntities:(id)arg1 entityType:(unsigned int)arg2;
- (id)initWithCriteria:(id)arg1 library:(id)arg2;
- (BOOL)_isFilteringDisabled;
- (id)initWithFilterPredicates:(id)arg1;
- (void)setFilterPredicates:(id)arg1;
- (unsigned int)_countOfItems;
- (void)addFilterPredicate:(id)arg1;
- (id)initWithProtobufferDecodableObject:(id)arg1;
- (id)mediaLibrary;
- (void)_enumerateItemsUsingBlock:(id)arg1;
- (id)_MPUSDS_searchPredicate;
- (void)music_getListingCountFormatString:(id*)arg1 isFallbackFormatString:(BOOL*)arg2;
- (BOOL)music_isEqualToNowPlayingQuery:(id)arg1;
- (id)_music_nowPlayingComparableQuery;
- (id)music_playlistTitle;
- (id)music_playlist;

@end
