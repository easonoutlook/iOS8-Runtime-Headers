/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class NSString;

@interface MIPPlaybackInfo : PBCodable <NSCopying> {
    long long _gaplessEncodingDrainCode;
    long long _gaplessFrameResyncCode;
    long long _gaplessHeuristicCode;
    long long _gaplessHeuristicDelayCode;
    long long _startTime;
    long long _stopTime;
    long long _volumeNormalizationEnergy;
    int _beatsPerMinute;
    int _bitRate;
    int _codecSubType;
    int _codecType;
    int _dataKind;
    NSString *_dataUrl;
    NSString *_eqPreset;
    NSString *_playbackFormat;
    int _relativeVolume;
    int _sampleRate;
    struct { 
        unsigned int gaplessEncodingDrainCode : 1; 
        unsigned int gaplessFrameResyncCode : 1; 
        unsigned int gaplessHeuristicCode : 1; 
        unsigned int gaplessHeuristicDelayCode : 1; 
        unsigned int startTime : 1; 
        unsigned int stopTime : 1; 
        unsigned int volumeNormalizationEnergy : 1; 
        unsigned int beatsPerMinute : 1; 
        unsigned int bitRate : 1; 
        unsigned int codecSubType : 1; 
        unsigned int codecType : 1; 
        unsigned int dataKind : 1; 
        unsigned int relativeVolume : 1; 
        unsigned int sampleRate : 1; 
    } _has;
}

@property BOOL hasBitRate;
@property int bitRate;
@property BOOL hasCodecType;
@property int codecType;
@property BOOL hasCodecSubType;
@property int codecSubType;
@property BOOL hasDataKind;
@property int dataKind;
@property(readonly) BOOL hasDataUrl;
@property(retain) NSString * dataUrl;
@property(readonly) BOOL hasEqPreset;
@property(retain) NSString * eqPreset;
@property(readonly) BOOL hasPlaybackFormat;
@property(retain) NSString * playbackFormat;
@property BOOL hasGaplessHeuristicCode;
@property long long gaplessHeuristicCode;
@property BOOL hasGaplessHeuristicDelayCode;
@property long long gaplessHeuristicDelayCode;
@property BOOL hasGaplessEncodingDrainCode;
@property long long gaplessEncodingDrainCode;
@property BOOL hasGaplessFrameResyncCode;
@property long long gaplessFrameResyncCode;
@property BOOL hasRelativeVolume;
@property int relativeVolume;
@property BOOL hasSampleRate;
@property int sampleRate;
@property BOOL hasStartTime;
@property long long startTime;
@property BOOL hasStopTime;
@property long long stopTime;
@property BOOL hasVolumeNormalizationEnergy;
@property long long volumeNormalizationEnergy;
@property BOOL hasBeatsPerMinute;
@property int beatsPerMinute;


- (int)sampleRate;
- (BOOL)hasStartTime;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (BOOL)readFrom:(id)arg1;
- (int)beatsPerMinute;
- (long long)volumeNormalizationEnergy;
- (long long)stopTime;
- (int)relativeVolume;
- (long long)gaplessFrameResyncCode;
- (long long)gaplessEncodingDrainCode;
- (long long)gaplessHeuristicDelayCode;
- (long long)gaplessHeuristicCode;
- (id)playbackFormat;
- (id)dataUrl;
- (int)dataKind;
- (int)codecSubType;
- (int)codecType;
- (int)bitRate;
- (BOOL)hasBeatsPerMinute;
- (void)setHasBeatsPerMinute:(BOOL)arg1;
- (void)setBeatsPerMinute:(int)arg1;
- (BOOL)hasVolumeNormalizationEnergy;
- (void)setHasVolumeNormalizationEnergy:(BOOL)arg1;
- (void)setVolumeNormalizationEnergy:(long long)arg1;
- (BOOL)hasStopTime;
- (void)setHasStopTime:(BOOL)arg1;
- (void)setStopTime:(long long)arg1;
- (void)setHasStartTime:(BOOL)arg1;
- (BOOL)hasSampleRate;
- (void)setHasSampleRate:(BOOL)arg1;
- (BOOL)hasRelativeVolume;
- (void)setHasRelativeVolume:(BOOL)arg1;
- (void)setRelativeVolume:(int)arg1;
- (BOOL)hasGaplessFrameResyncCode;
- (void)setHasGaplessFrameResyncCode:(BOOL)arg1;
- (void)setGaplessFrameResyncCode:(long long)arg1;
- (BOOL)hasGaplessEncodingDrainCode;
- (void)setHasGaplessEncodingDrainCode:(BOOL)arg1;
- (void)setGaplessEncodingDrainCode:(long long)arg1;
- (BOOL)hasGaplessHeuristicDelayCode;
- (void)setHasGaplessHeuristicDelayCode:(BOOL)arg1;
- (void)setGaplessHeuristicDelayCode:(long long)arg1;
- (BOOL)hasGaplessHeuristicCode;
- (void)setHasGaplessHeuristicCode:(BOOL)arg1;
- (void)setGaplessHeuristicCode:(long long)arg1;
- (BOOL)hasPlaybackFormat;
- (BOOL)hasEqPreset;
- (BOOL)hasDataUrl;
- (BOOL)hasDataKind;
- (void)setHasDataKind:(BOOL)arg1;
- (void)setDataKind:(int)arg1;
- (BOOL)hasCodecSubType;
- (void)setHasCodecSubType:(BOOL)arg1;
- (void)setCodecSubType:(int)arg1;
- (BOOL)hasCodecType;
- (void)setHasCodecType:(BOOL)arg1;
- (void)setCodecType:(int)arg1;
- (BOOL)hasBitRate;
- (void)setHasBitRate:(BOOL)arg1;
- (void)setBitRate:(int)arg1;
- (void)setPlaybackFormat:(id)arg1;
- (void)setEqPreset:(id)arg1;
- (void)setDataUrl:(id)arg1;
- (void)setSampleRate:(int)arg1;
- (id)eqPreset;
- (long long)startTime;
- (void).cxx_destruct;
- (id)dictionaryRepresentation;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)setStartTime:(long long)arg1;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;

@end
