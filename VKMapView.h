/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class <GEORoutePreloadSession>, GGLDisplayLink, VKMapCanvas, CADisplay, VKPolylineOverlayPainter, VKStyleManager, VKClassicGlobeCanvas, VKAnimation, VKMemoryObserver, GEOMapRegion, <VKMapViewDelegate>, NSArray, MDDisplayLayer, NSString, VKLabelMarker;

@interface VKMapView : CALayer <VKInteractiveMapDelegate, MDMapControllerDelegate, GGLLayerDisruptor, GGLRenderQueueSource> {
    int _mapType;
    VKMapCanvas *_canvas;
    VKClassicGlobeCanvas *_globe;
    MDDisplayLayer *_mapLayer;
    <VKMapViewDelegate> *_mapDelegate;
    BOOL _loaderOpen;
    NSString *_tileLoaderClientID;
    unsigned int _mapDisplayStyle;
    VKAnimation *_mapDisplayStyleAnimation;
    VKAnimation *_edgeInsetAnimation;
    struct VKEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _animatingToEdgeInsets;
    BOOL _isChangingMapType;
    unsigned int _regionChangeCount;
    BOOL _containsOverlay;
    double _verticalYaw;
    VKLabelMarker *_selectedLabelMarker;
    unsigned int _applicationState;
    VKMemoryObserver *_memoryObserver;
    GGLDisplayLink *_displayLink;
    int _displayRate;
    int _requestedRate;
    struct shared_ptr<ggl::RenderQueue> { 
        struct RenderQueue {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _renderQueue;
}

@property(readonly) VKMapCanvas * mapCanvas;
@property BOOL shouldLoadFallbackTiles;
@property BOOL shouldLoadMapMargin;
@property <VKMapViewDelegate> * mapDelegate;
@property BOOL staysCenteredDuringPinch;
@property BOOL staysCenteredDuringRotation;
@property(retain) CADisplay * hostDisplay;
@property BOOL isPitchable;
@property(getter=isPitched,readonly) BOOL pitched;
@property(getter=isFullyPitched,readonly) BOOL fullyPitched;
@property(readonly) BOOL canEnter3DMode;
@property(getter=isShowingFlyover,readonly) BOOL showingFlyover;
@property(readonly) BOOL canShowFlyover;
@property BOOL trafficEnabled;
@property int displayRate;
@property BOOL localizeLabels;
@property int labelScaleFactor;
@property BOOL dynamicMapModesEnabled;
@property int mapType;
@property unsigned int mapDisplayStyle;
@property(readonly) double minimumZoomLevel;
@property(readonly) double maximumZoomLevel;
@property(readonly) double currentZoomLevel;
@property(retain) VKStyleManager * styleManager;
@property int targetDisplay;
@property(getter=isLabelMarkerSelectionEnabled) BOOL labelMarkerSelectionEnabled;
@property int shieldSize;
@property int navigationShieldSize;
@property int shieldIdiom;
@property BOOL showsPointsOfInterest;
@property BOOL showsBuildings;
@property struct VKEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property struct VKEdgeInsets { float x1; float x2; float x3; float x4; } fullyOccludedEdgeInsets;
@property struct VKEdgeInsets { float x1; float x2; float x3; float x4; } labelEdgeInsets;
@property(retain) GEOMapRegion * mapRegion;
@property(readonly) GEOMapRegion * mapRegionOfInterest;
@property(readonly) double yaw;
@property(readonly) double presentationYaw;
@property(readonly) double verticalYaw;
@property(readonly) double pitch;
@property(readonly) double altitude;
@property struct { double x1; double x2; double x3; } centerCoordinate;
@property BOOL allowDatelineWraparound;
@property(getter=isGesturing) BOOL gesturing;
@property BOOL iconsShouldAlignToPixels;
@property(getter=isFullyDrawn,readonly) BOOL fullyDrawn;
@property int trackingCameraPanStyle;
@property double trackingZoomScale;
@property int annotationTrackingZoomStyle;
@property(getter=isAnimatingToTrackAnnotation,readonly) BOOL animatingToTrackAnnotation;
@property(readonly) BOOL canShowFlyoverAnimation;
@property(readonly) VKLabelMarker * selectedLabelMarker;
@property(readonly) NSArray * annotationMarkers;
@property(readonly) NSArray * labelMarkers;
@property(retain) VKPolylineOverlayPainter * focusedLabelsPolylinePainter;
@property(retain) NSArray * externalTrafficIncidents;
@property(retain) <GEORoutePreloadSession> * routePreloadSession;
@property BOOL rendersInBackground;
@property BOOL debugDrawContinuously;
@property BOOL debugLayoutContinuously;
@property BOOL debugEnableMultisampling;
@property(readonly) float debugFramesPerSecond;
@property(readonly) BOOL enableDebugLabelHighlighting;
@property(readonly) NSArray * visibleTileSets;
@property double userZoomFocusStyleGroundspanMeters;
@property double userZoomFocusStyleMinGroundspanMeters;
@property double userZoomFocusStyleMaxGroundspanMeters;
@property unsigned int applicationState;


- (double)verticalYaw;
- (BOOL)gridDisabled;
- (BOOL)realisticLandDisabled;
- (BOOL)realisticRoadsDisabled;
- (BOOL)rastersDisabled;
- (BOOL)buildingFootprintsDisabled;
- (BOOL)polygonsDisabled;
- (BOOL)labelsDisabled;
- (BOOL)roadsDisabled;
- (BOOL)roadClassDisabled:(int)arg1;
- (void)setDisableRoadClass:(BOOL)arg1 forRoadClass:(int)arg2;
- (void)startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)preloadNavigationSceneResources;
- (struct CGPoint { float x1; float x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toCameraModelPointToLayer:(id)arg2;
- (struct CGPoint { float x1; float x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toPointToLayer:(id)arg2;
- (struct CGPoint { float x1; float x2; })convertMapPoint:(struct { double x1; double x2; })arg1 toPointToLayer:(id)arg2;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toMapPointFromLayer:(id)arg2;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toCoordinateFromLayer:(id)arg2;
- (id)initWithGlobe:(BOOL)arg1 shouldRasterize:(BOOL)arg2 inBackground:(BOOL)arg3;
- (void)setCenterCoordinate:(struct { double x1; double x2; double x3; })arg1;
- (void)setMapRegion:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })mapRegionBounds;
- (BOOL)supportsMapType:(int)arg1;
- (BOOL)enableDebugLabelHighlighting;
- (void)setHostDisplay:(id)arg1;
- (id)hostDisplay;
- (void)debugFlyoverTour:(unsigned int)arg1 trip:(unsigned int)arg2;
- (void)debugRunPerformanceTestWithOutputHeader:(id)arg1;
- (void)setDebugLayoutContinuously:(BOOL)arg1;
- (BOOL)debugLayoutContinuously;
- (void)setDebugDrawContinuously:(BOOL)arg1;
- (BOOL)debugDrawContinuously;
- (void)flushTileLoads;
- (void)setDisplayRate:(int)arg1;
- (int)displayRate;
- (BOOL)stylesheetIsDevResource;
- (id)stylesheetName;
- (id)secondaryCanvas;
- (BOOL)isLabelMarkerSelectionEnabled;
- (struct RenderQueue { struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass> > { struct Pass {} *x_1_1_1; struct Pass {} *x_1_1_2; struct __compressed_pair<ggl::RenderQueue::Pass *, std::__1::allocator<ggl::RenderQueue::Pass> > { struct Pass {} *x_3_2_1; } x_1_1_3; } x1; struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *> > { struct CommandBuffer {} **x_2_1_1; struct CommandBuffer {} **x_2_1_2; struct __compressed_pair<ggl::CommandBuffer **, std::__1::allocator<ggl::CommandBuffer *> > { struct CommandBuffer {} **x_3_2_1; } x_2_1_3; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; }*)renderQueue;
- (void)didDrawWithTimestamp:(double)arg1;
- (void)mapControllerNeedsInitialization:(id)arg1;
- (void)mapController:(id)arg1 requestsDisplayRate:(int)arg2;
- (void)mapControllerNeedsDisplay:(id)arg1;
- (void)map:(id)arg1 didUpdateContainsOverlay:(BOOL)arg2;
- (void)map:(id)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)map:(id)arg1 willTransitionFrom:(int)arg2 to:(int)arg3 duration:(double)arg4;
- (void)map:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)map:(id)arg1 canShowFlyoverDidChange:(BOOL)arg2;
- (void)map:(id)arg1 canZoomOutDidChange:(BOOL)arg2;
- (void)map:(id)arg1 canZoomInDidChange:(BOOL)arg2;
- (void)map:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)map:(id)arg1 didBecomePitched:(BOOL)arg2;
- (id)map:(id)arg1 painterForOverlay:(id)arg2;
- (id)map:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)map:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)map:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)mapDidFinishChangingMapDisplayStyle:(unsigned int)arg1;
- (void)mapDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapDidFinishLoadingTiles:(id)arg1;
- (void)mapDidStartLoadingTiles:(id)arg1;
- (void)mapDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(BOOL)arg2;
- (void)mapDidBecomePartiallyDrawn:(id)arg1;
- (void)mapDidChangeVisibleRegion:(id)arg1;
- (id)mapDelegate;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (double)userZoomFocusStyleMaxGroundspanMeters;
- (void)setUserZoomFocusStyleMaxGroundspanMeters:(double)arg1;
- (double)userZoomFocusStyleMinGroundspanMeters;
- (void)setUserZoomFocusStyleMinGroundspanMeters:(double)arg1;
- (double)userZoomFocusStyleGroundspanMeters;
- (void)setUserZoomFocusStyleGroundspanMeters:(double)arg1;
- (void)setDebugDynamicMapModesEnabled:(BOOL)arg1;
- (BOOL)debugDynamicMapModesEnabled;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { struct VKPoint { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2; BOOL x3; }*)arg2;
- (void)goToTileX:(int)arg1 Y:(int)arg2 Z:(int)arg3 tileSize:(int)arg4;
- (BOOL)isFullyDrawn;
- (void)setDisableGrid:(BOOL)arg1;
- (void)setDisableRealisticLand:(BOOL)arg1;
- (void)setDisableRealisticRoads:(BOOL)arg1;
- (void)setDisableRasters:(BOOL)arg1;
- (void)setDisableBuildingFootprints:(BOOL)arg1;
- (void)setDisablePolygons:(BOOL)arg1;
- (void)stopSnappingAnimations;
- (BOOL)isPointValidForGesturing:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePanWithTranslation:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1 panAtStartPoint:(BOOL)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2;
- (void)setFocusedLabelsPolylinePainter:(id)arg1;
- (id)focusedLabelsPolylinePainter;
- (BOOL)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (void)setCurrentLocationText:(id)arg1;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (BOOL)isAnimatingToTrackAnnotation;
- (void)setTrackingZoomScale:(double)arg1;
- (double)trackingZoomScale;
- (id)labelMarkers;
- (id)selectedLabelMarker;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)panWithOffset:(struct CGPoint { float x1; float x2; })arg1 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg2 animated:(BOOL)arg3 duration:(double)arg4 completionHandler:(id)arg5;
- (BOOL)isFullyPitched;
- (BOOL)isPitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 selectableLabelsOnly:(BOOL)arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 avoidCurrent:(BOOL)arg2;
- (id)routePreloadSession;
- (void)setRoutePreloadSession:(id)arg1;
- (int)trackingCameraPanStyle;
- (void)setTrackingCameraPanStyle:(int)arg1;
- (void)setShouldLimitTrackingCameraHeight:(BOOL)arg1;
- (void)transitionToTracking:(BOOL)arg1 mapMode:(int)arg2 pounceCompletionHandler:(id)arg3;
- (void)pauseTracking;
- (void)stopTracking;
- (void)updateCameraContext:(id)arg1;
- (id)flyoverStatistics;
- (void)disableFlyoverStatistics;
- (void)enableFlyoverStatistics;
- (void)resumeFlyoverTourAnimation;
- (void)pauseFlyoverTourAnimation;
- (void)stopFlyoverAnimation;
- (void)startFlyoverAnimation:(id)arg1;
- (void)prepareFlyoverAnimation:(id)arg1 inBackground:(BOOL)arg2 completion:(id)arg3;
- (BOOL)canShowFlyoverAnimation;
- (void)showSearchResultAnimationAtCoordinate:(struct { double x1; double x2; })arg1 withMapRegion:(id)arg2;
- (BOOL)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })labelEdgeInsets;
- (void)setLabelEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })fullyOccludedEdgeInsets;
- (void)setFullyOccludedEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1 duration:(double)arg2 timingFunction:(id)arg3 completionHandler:(id)arg4;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4 completion:(id)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4;
- (void)setYaw:(double)arg1 animated:(BOOL)arg2;
- (void)runAnimation:(id)arg1;
- (void)closeLoaderConnection;
- (void)onTimerFired:(id)arg1;
- (void)openLoaderConnection;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(id)arg6 completion:(id)arg7;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (void)setCenterCoordinate:(struct { double x1; double x2; double x3; })arg1 animated:(BOOL)arg2;
- (id)consoleString:(BOOL)arg1;
- (id)mapRegionOfInterest;
- (id)mapRegion;
- (void)setMapRegion:(id)arg1 animated:(BOOL)arg2;
- (double)altitude;
- (double)presentationYaw;
- (void)_setStyleTransitionProgress:(float)arg1 targetStyle:(unsigned int)arg2 step:(int)arg3;
- (float)_styleTransitionProgress;
- (void)setMapDisplayStyle:(unsigned int)arg1;
- (void)setMapDisplayStyle:(unsigned int)arg1 animated:(BOOL)arg2;
- (unsigned int)mapDisplayStyle;
- (void)resetRenderQueue;
- (BOOL)canEnter3DMode;
- (void)setDisableRoads:(BOOL)arg1;
- (void)setDisableLabels:(BOOL)arg1;
- (void)addExternalAnchor:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(BOOL)arg2 animated:(BOOL)arg3;
- (void)stopTrackingAnnotation;
- (void)deselectLabelMarker;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)removeAnnotationMarker:(id)arg1;
- (id)annotationMarkers;
- (void)setAnnotationMarkerDeselectionCallback:(id)arg1;
- (void)setExternalTrafficIncidents:(id)arg1;
- (id)externalTrafficIncidents;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setAnnotationTrackingZoomStyle:(int)arg1;
- (int)annotationTrackingZoomStyle;
- (void)_createGlobe;
- (BOOL)isShowingFlyover;
- (BOOL)canShowFlyover;
- (BOOL)supportsNightMode;
- (void)setRendersInBackground:(BOOL)arg1;
- (BOOL)rendersInBackground;
- (void)setMapDelegate:(id)arg1;
- (void)setCanonicalSkyHeight:(double)arg1;
- (void)setDynamicMapModesEnabled:(BOOL)arg1;
- (BOOL)dynamicMapModesEnabled;
- (void)setDesiredMapMode:(int)arg1 immediate:(BOOL)arg2;
- (void)setShowsBuildings:(BOOL)arg1;
- (BOOL)showsBuildings;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (BOOL)showsPointsOfInterest;
- (void)setShieldIdiom:(int)arg1;
- (int)shieldIdiom;
- (void)setNavigationShieldSize:(int)arg1;
- (int)navigationShieldSize;
- (void)setShieldSize:(int)arg1;
- (int)shieldSize;
- (double)zoomLevelAdjustmentForTileSize:(int)arg1;
- (double)currentZoomLevelForTileSize:(int)arg1;
- (double)currentZoomLevel;
- (double)maximumZoomLevelForTileSize:(int)arg1;
- (double)maximumZoomLevel;
- (double)topDownMinimumZoomLevelForTileSize:(int)arg1;
- (double)minimumZoomLevelForTileSize:(int)arg1;
- (double)minimumZoomLevel;
- (BOOL)canZoomOutForTileSize:(int)arg1;
- (BOOL)canZoomInForTileSize:(int)arg1;
- (void)setIconsShouldAlignToPixels:(BOOL)arg1;
- (BOOL)iconsShouldAlignToPixels;
- (void)setGesturing:(BOOL)arg1;
- (BOOL)isGesturing;
- (id)detailedDescription;
- (BOOL)shouldLoadMapMargin;
- (void)setShouldLoadMapMargin:(BOOL)arg1;
- (BOOL)shouldLoadFallbackTiles;
- (void)setShouldLoadFallbackTiles:(BOOL)arg1;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isEffectivelyHidden;
- (void)clearScene;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(BOOL)arg2 completion:(id)arg3;
- (void)setMapType:(int)arg1;
- (float)debugFramesPerSecond;
- (void)setDebugEnableMultisampling:(BOOL)arg1;
- (BOOL)debugEnableMultisampling;
- (BOOL)isPitchable;
- (void)setIsPitchable:(BOOL)arg1;
- (BOOL)staysCenteredDuringRotation;
- (void)setStaysCenteredDuringRotation:(BOOL)arg1;
- (BOOL)staysCenteredDuringPinch;
- (void)setLabelScaleFactor:(int)arg1;
- (int)labelScaleFactor;
- (void)setLocalizeLabels:(BOOL)arg1;
- (BOOL)localizeLabels;
- (void)setStaysCenteredDuringPinch:(BOOL)arg1;
- (BOOL)currentZoomLevelAllowsRotation;
- (void)didEnterBackground;
- (BOOL)updateDisplayLinkStatus;
- (void)_createDisplayLayer;
- (void)_updateDisplayRate;
- (void)setTrafficEnabled:(BOOL)arg1;
- (BOOL)trafficEnabled;
- (void)setTargetDisplay:(int)arg1;
- (int)targetDisplay;
- (void)reloadStylesheet;
- (void)setStyleManager:(id)arg1;
- (id)styleManager;
- (void)setStylesheetName:(id)arg1;
- (BOOL)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
- (id)visibleTileSets;
- (int)mapType;
- (void)forceSceneLoad;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (id)currentCanvas;
- (void)_updateMapDisplayStyle;
- (void)setApplicationState:(unsigned int)arg1;
- (void)_resetMaximumZoomLevel;
- (void)_setMaximumZoomLevel:(double)arg1;
- (id)mapCanvas;
- (void)setAllowDatelineWraparound:(BOOL)arg1;
- (BOOL)allowDatelineWraparound;
- (double)yaw;
- (double)pitch;
- (id)annotationCoordinateTest;
- (id)annotationRectTest;
- (void)willEnterForeground;
- (void).cxx_destruct;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (id).cxx_construct;
- (void)forceLayout;
- (void)_updateBackgroundColor;
- (void)renderInContext:(struct CGContext { }*)arg1;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;
- (unsigned int)applicationState;
- (void)didReceiveMemoryWarning;
- (void)setHidden:(BOOL)arg1;
- (void)setNeedsDisplay;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)setNeedsLayout;
- (void)setContentsScale:(float)arg1;
- (void)_mapkit_configureFromDefaults:(BOOL)arg1;

@end
