/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon
 */

@class NSObject<OS_dispatch_semaphore>, NSBundle, CKDAccount, CKAccountInfo, CKDAssetCache, CKContainerID, CKDFlowControlManager, CKDPCSManager, CKDServerConfiguration, CKDMMCS, NSObject<OS_dispatch_queue>, NSString, NSMutableDictionary, NSRunLoop, NSURL;

@interface CKDClientContext : NSObject <CKLoggingProtocol> {
    BOOL _canAccessAccounts;
    BOOL _runLoopShouldRun;
    BOOL _accountRefreshInProgress;
    BOOL _accountReloadRequired;
    CKDServerConfiguration *_config;
    NSURL *_publicCloudDBURL;
    NSURL *_publicShareServiceURL;
    NSURL *_publicDeviceServiceURL;
    NSString *_containerScopedUserID;
    CKContainerID *_containerID;
    NSBundle *_applicationBundle;
    NSString *_applicationBundleID;
    NSString *_applicationVersion;
    NSString *_applicationDisplayName;
    NSString *_applicationContainerPath;
    NSString *_applicationCachesDirectory;
    NSString *_secondaryApplicationBundleID;
    NSString *_containerHardwareIDHash;
    int _type;
    int _usesAPSPublicToken;
    CKDAccount *_account;
    CKAccountInfo *_accountInfoOverride;
    CKDFlowControlManager *_flowControlManager;
    CKDAssetCache *_assetCache;
    CKDMMCS *_MMCS;
    CKDPCSManager *_pcsManager;
    NSMutableDictionary *_fakeErrorByClassName;
    NSRunLoop *_runLoop;
    NSObject<OS_dispatch_semaphore> *_sema;
    NSObject<OS_dispatch_queue> *_accountLoaderQueue;
}

@property(retain) CKDServerConfiguration * config;
@property(retain) NSURL * publicCloudDBURL;
@property(retain) NSURL * publicShareServiceURL;
@property(retain) NSURL * publicDeviceServiceURL;
@property(retain) NSString * containerScopedUserID;
@property(readonly) CKContainerID * containerID;
@property(readonly) NSBundle * applicationBundle;
@property(readonly) NSString * applicationBundleID;
@property(retain) NSString * applicationVersion;
@property(readonly) NSString * applicationDisplayName;
@property(retain) NSString * applicationContainerPath;
@property(readonly) NSString * applicationCachesDirectory;
@property(readonly) NSString * applicationAssetCacheDirectory;
@property(readonly) NSString * applicationRecordCacheDirectory;
@property(retain) NSString * secondaryApplicationBundleID;
@property(readonly) NSString * containerHardwareIDHash;
@property(readonly) int type;
@property(setter=setAPSEnvironmentString:,retain) NSString * apsEnvironmentString;
@property int usesAPSPublicToken;
@property(retain) CKDAccount * account;
@property(readonly) CKAccountInfo * accountInfoOverride;
@property BOOL canAccessAccounts;
@property(retain) CKDFlowControlManager * flowControlManager;
@property(retain) CKDAssetCache * assetCache;
@property(readonly) CKDMMCS * MMCS;
@property(retain) CKDPCSManager * pcsManager;
@property(retain) NSMutableDictionary * fakeErrorByClassName;
@property(retain) NSRunLoop * runLoop;
@property(retain) NSObject<OS_dispatch_semaphore> * sema;
@property BOOL runLoopShouldRun;
@property(retain) NSObject<OS_dispatch_queue> * accountLoaderQueue;
@property BOOL accountRefreshInProgress;
@property BOOL accountReloadRequired;

+ (id)contextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2;
+ (id)_sharedContextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2;
+ (id)allClientContextsForAccountInfoOverride:(id)arg1;
+ (id)sharedContexts;
+ (id)sharedContextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2;

- (void)setAccountLoaderQueue:(id)arg1;
- (void)setRunLoopShouldRun:(BOOL)arg1;
- (BOOL)runLoopShouldRun;
- (void)setSema:(id)arg1;
- (id)sema;
- (void)setRunLoop:(id)arg1;
- (void)setPcsManager:(id)arg1;
- (void)setAssetCache:(id)arg1;
- (void)setFlowControlManager:(id)arg1;
- (void)setCanAccessAccounts:(BOOL)arg1;
- (BOOL)canAccessAccounts;
- (int)usesAPSPublicToken;
- (id)containerHardwareIDHash;
- (id)secondaryApplicationBundleID;
- (void)setApplicationContainerPath:(id)arg1;
- (id)applicationContainerPath;
- (id)applicationVersion;
- (id)applicationBundle;
- (void)setContainerScopedUserID:(id)arg1;
- (id)containerScopedUserID;
- (void)setPublicDeviceServiceURL:(id)arg1;
- (id)publicDeviceServiceURL;
- (void)setPublicShareServiceURL:(id)arg1;
- (id)publicShareServiceURL;
- (void)setPublicCloudDBURL:(id)arg1;
- (id)publicCloudDBURL;
- (void)setConfig:(id)arg1;
- (id)CKPropertiesDescription;
- (id)flowControlManager;
- (id)applicationAssetCacheDirectory;
- (void)performRequest:(id)arg1;
- (id)config;
- (id)applicationCachesDirectory;
- (id)initWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2;
- (id)apsEnvironmentString;
- (void)_determineHardwareInfo;
- (void)_loadApplicationContainerPathAndType;
- (void)setAccount:(id)arg1;
- (void)reloadAccount;
- (BOOL)accountReloadRequired;
- (void)setAccountRefreshInProgress:(BOOL)arg1;
- (id)accountLoaderQueue;
- (void)setAccountReloadRequired:(BOOL)arg1;
- (BOOL)accountRefreshInProgress;
- (id)accountInfoOverride;
- (id)pcsManager;
- (void)setSecondaryApplicationBundleID:(id)arg1;
- (void)setFakeErrorByClassName:(id)arg1;
- (void)setUsesAPSPublicToken:(int)arg1;
- (void)setAPSEnvironmentString:(id)arg1;
- (id)fakeErrorByClassName;
- (void)showUserNotification:(struct __CFUserNotification { }*)arg1 withCompletionBlock:(id)arg2;
- (id)applicationDisplayName;
- (id)account;
- (id)MMCS;
- (void)clearAuthTokensForRecordWithID:(id)arg1 inScope:(int)arg2;
- (void)clearRecordCacheWithDatabaseScope:(int)arg1;
- (void)clearAssetCacheWithDatabaseScope:(int)arg1;
- (void)setFakeError:(id)arg1 forNextRequestOfClassName:(id)arg2;
- (void)logWithFile:(const char *)arg1 function:(const char *)arg2 line:(int)arg3 level:(int)arg4 section:(id)arg5 format:(id)arg6;
- (id)applicationRecordCacheDirectory;
- (id)applicationBundleID;
- (id)containerID;
- (void)setApplicationVersion:(id)arg1;
- (void).cxx_destruct;
- (int)type;
- (id)description;
- (void)dealloc;
- (id)runLoop;
- (id)assetCache;

@end
