/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/CorePrediction.framework/CorePrediction
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class CPMLSchema, NSString, NSNumber, NSMutableArray;

@interface CPMLModelEvaluate : NSObject  {
    BOOL keepInMemory;
    BOOL shouldFail;
    struct sqlite3 { } *db;
    int countRows;
    NSMutableArray *modelSchema;
    NSMutableArray *vectorPositions;
    NSNumber *maxRemoveTrainingRow;
    NSString *serializeFunction;
    NSString *machineLearningAlgo;
    struct CPMLAlgorithm { int (**x1)(); BOOL x2[32]; struct CPMLCDB {} *x3; struct CPMLTunableData {} *x4; struct CPMLIterator {} *x5; struct CPMLSerialization {} *x6; } *cpMLAlgo;
    struct CPMLSerialization { int (**x1)(); boolx2; int x3; int x4; void *x5; struct sqlite3 {} *x6; } *trainerCPDeSerializer;
    struct CPMLRemapper { boolx1; boolx2; boolx3; struct sqlite3 {} *x4; struct CPMLStatistics {} *x5; struct vector<int, std::__1::allocator<int> > {} *x6; struct vector<int, std::__1::allocator<int> > {} *x7; } *cpRemapper;
    CPMLSchema *cpmlSchema;
    struct CPMLStatistics { struct vector<int, std::__1::allocator<int> > { int *x_1_1_1; int *x_1_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_1_1_3; } x1; struct vector<double, std::__1::allocator<double> > { double *x_2_1_1; double *x_2_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_2_1_3; } x2; struct vector<int, std::__1::allocator<int> > { int *x_3_1_1; int *x_3_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_3_1_3; } x3; struct vector<int, std::__1::allocator<int> > { int *x_4_1_1; int *x_4_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_4_1_3; } x4; struct vector<int, std::__1::allocator<int> > { int *x_5_1_1; int *x_5_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_5_1_3; } x5; int x6; int x7; int x8; int x9; boolx10; struct vector<double, std::__1::allocator<double> > { double *x_11_1_1; double *x_11_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_11_1_3; } x11; struct vector<double, std::__1::allocator<double> > { double *x_12_1_1; double *x_12_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_12_1_3; } x12; struct vector<double, std::__1::allocator<double> > { double *x_13_1_1; double *x_13_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_13_1_3; } x13; struct vector<double, std::__1::allocator<double> > { double *x_14_1_1; double *x_14_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_14_1_3; } x14; struct vector<double, std::__1::allocator<double> > { double *x_15_1_1; double *x_15_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_15_1_3; } x15; void *x16; } *trainerCPStatistics;
    struct CPMLTunableData { int x1; void *x2; void *x3; } *cpTuneableData;
    int mapFunction;
    struct vector<int, std::__1::allocator<int> > { 
        int *__begin_; 
        int *__end_; 
        struct __compressed_pair<int *, std::__1::allocator<int> > { 
            int *__first_; 
        } __end_cap_; 
    } boundedRemappedValues;
}


- (id)evalCTypesV:(char *)arg1;
- (void)constructVector:(struct CPMLFeatureVector { int x1; struct VectorClass { struct vector<int, std::__1::allocator<int> > {} *x_2_1_1; struct vector<double, std::__1::allocator<double> > {} *x_2_1_2; } x2; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_1_1; struct VectorClass {} *x_3_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_3_1_3; } x3; double x4; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_5_1_1; struct VectorClass {} *x_5_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_5_1_3; } x5; struct vector<ProbIndex, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_6_1_1; struct ProbIndex {} *x_6_1_2; struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 withColumnPosition:(unsigned int)arg2 maxColNumber:(unsigned int)arg3 withValue:(id)arg4;
- (int)getAttributeType:(id)arg1;
- (id)doEvaluate:(struct CPMLFeatureVector { int x1; struct VectorClass { struct vector<int, std::__1::allocator<int> > {} *x_2_1_1; struct vector<double, std::__1::allocator<double> > {} *x_2_1_2; } x2; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_1_1; struct VectorClass {} *x_3_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_3_1_3; } x3; double x4; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_5_1_1; struct VectorClass {} *x_5_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_5_1_3; } x5; struct vector<ProbIndex, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_6_1_1; struct ProbIndex {} *x_6_1_2; struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 withBoundedList:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg2;
- (void)doRemapToFeatureVector:(struct CPMLFeatureVector { int x1; struct VectorClass { struct vector<int, std::__1::allocator<int> > {} *x_2_1_1; struct vector<double, std::__1::allocator<double> > {} *x_2_1_2; } x2; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_1_1; struct VectorClass {} *x_3_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_3_1_3; } x3; double x4; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_5_1_1; struct VectorClass {} *x_5_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_5_1_3; } x5; struct vector<ProbIndex, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_6_1_1; struct ProbIndex {} *x_6_1_2; struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 withPositionID:(unsigned int)arg2 withMaxCol:(unsigned int)arg3 withValue:(id)arg4;
- (void)buildEvaluateMachineLearningAlgorithm;
- (BOOL)updateModel:(id)arg1;
- (void)boundResult:(id)arg1;
- (id)evalDict:(id)arg1;
- (id)evalArray:(id)arg1;
- (id)evalNSObjectV:(id)arg1;
- (id)evalString:(id)arg1;
- (id)fileProtectionClassRequest:(id)arg1;
- (id)initWithModel:(id)arg1 withPropertyList:(id)arg2;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)dealloc;

@end
