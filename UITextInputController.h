/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSDictionary, UITextRange, _UITextInputControllerTokenizer, _UITextKitTextRange, UIResponder<UITextInput>, _UITextUndoManager, UIView<UITextInput>, _UITextServiceSession, NSHashTable, <UITextInputControllerDelegate>, UIView<UITextInputPrivate>, UITextPosition, UITextInputTraits, <UITextInputDelegate>, NSArray, _UITextUndoOperationTyping, <UITextInputTokenizer>, UITextChecker, UIView, NSLayoutManager;

@interface UITextInputController : NSObject <UITextInput_Internal, UITextInput, UITextInputAdditions> {
    <UITextInputDelegate> *_inputDelegate;
    _UITextKitTextRange *_selectedTextRange;
    _UITextInputControllerTokenizer *_tokenizer;
    NSLayoutManager *_layoutManager;
    NSHashTable *_observedScrollViews;
    _UITextServiceSession *_definitionSession;
    _UITextServiceSession *_learnSession;
    UITextInputTraits *_textInputTraits;
    struct _NSRange { 
        unsigned int location; 
        unsigned int length; 
    } _markedTextRange;
    struct _NSRange { 
        unsigned int location; 
        unsigned int length; 
    } _markedTextSelection;
    struct { 
        unsigned int delegateRespondsToTextInputShouldBeginEditing : 1; 
        unsigned int delegateRespondsToTextInputShouldChangeCharactersInRangeReplacementText : 1; 
        unsigned int delegateRespondsToTextInputDidChange : 1; 
        unsigned int delegateRespondsToTextInputDidChangeSelection : 1; 
        unsigned int delegateRespondsToTextInputWillChangeSelectionFromCharacterRangeToCharacterRange : 1; 
        unsigned int delegateRespondsToTextInputEditorDidChangeSelection : 1; 
        unsigned int delegateRespondsToTextInputPrepareAttributedTextForInsertion : 1; 
        unsigned int textOrSelectionChangeOriginatesWithKeyboard : 1; 
        unsigned int showingTextStyleOptions : 1; 
        unsigned int undoRedoInProgress : 1; 
        unsigned int textOrSelectionChangeOriginatesWithMarkedText : 1; 
        unsigned int nextSelectionChangeMustUpdate : 1; 
        unsigned int hasTextAlternatives : 1; 
    } _tiFlags;
    NSArray *_extraItemsBeforeTextStyleOptions;
    UIView<UITextInput> *_firstTextView;
    _UITextUndoManager *_undoManager;
    _UITextUndoOperationTyping *_undoOperationForCoalescing;
    UITextChecker *_textChecker;
    BOOL _allowsEditingTextAttributes;
    BOOL _continuousSpellCheckingEnabled;
    NSDictionary *_emptyStringAttributes;
    NSDictionary *_typingAttributes;
    <UITextInputControllerDelegate> *_delegate;
    struct _NSRange { 
        unsigned int location; 
        unsigned int length; 
    } _previousSelectedRange;
}

@property(getter=_proxyTextInput,readonly) UIResponder<UITextInput> * __content;
@property(readonly) UIView<UITextInputPrivate> * _textSelectingContainer;
@property struct _NSRange { unsigned int x1; unsigned int x2; } selectedRange;
@property BOOL allowsEditingTextAttributes;
@property(copy) NSDictionary * typingAttributes;
@property(retain) NSLayoutManager * layoutManager;
@property <UITextInputControllerDelegate> * delegate;
@property BOOL continuousSpellCheckingEnabled;
@property struct _NSRange { unsigned int x1; unsigned int x2; } previousSelectedRange;
@property(getter=_emptyStringAttributes,setter=_setEmptyStringAttributes:,copy) NSDictionary * emptyStringAttributes;
@property int autocapitalizationType;
@property int autocorrectionType;
@property int spellCheckingType;
@property int keyboardType;
@property int keyboardAppearance;
@property int returnKeyType;
@property BOOL enablesReturnKeyAutomatically;
@property(getter=isSecureTextEntry) BOOL secureTextEntry;
@property(copy) UITextRange * selectedTextRange;
@property(readonly) UITextRange * markedTextRange;
@property(copy) NSDictionary * markedTextStyle;
@property(readonly) UITextPosition * beginningOfDocument;
@property(readonly) UITextPosition * endOfDocument;
@property <UITextInputDelegate> * inputDelegate;
@property(readonly) <UITextInputTokenizer> * tokenizer;
@property(readonly) UIView * textInputView;
@property int selectionAffinity;
@property(getter=isEditable,readonly) BOOL editable;
@property(getter=isEditing,readonly) BOOL editing;
@property(getter=_caretRect,readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } caretRect;


- (BOOL)_isSecureTextEntry;
- (id)_selectedAttributedText;
- (void)changeWillBeUndone:(id)arg1;
- (void)_setUndoRedoInProgress:(BOOL)arg1;
- (void)undoDidChangeText;
- (void)undoWillChangeText;
- (void)_ensureSelectionVisible;
- (void)preheatTextChecker;
- (void)_selectionDidScroll:(id)arg1;
- (void)_toggleFontTrait:(int)arg1;
- (void)_removeShortcutController;
- (BOOL)_delegateShouldChangeTextInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 replacementText:(id)arg2;
- (void)_copySelectionToClipboard;
- (void)removeTextStylingFromString:(id)arg1;
- (id)_selectedText;
- (id)textRangeForNSRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)coalesceInTextView:(id)arg1 affectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2 replacementRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (BOOL)_undoRedoInProgress;
- (BOOL)isCoalescing;
- (void)_undoManagerWillUndo:(id)arg1;
- (id)_fixupTypingAttributeForAttributes:(id)arg1;
- (id)_emptyStringAttributes;
- (id)_attributesForReplacementInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (id)_whitelistedTypingAttributes;
- (id)_characterPositionForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)_rectsForRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_caretRectForOffset:(unsigned int)arg1;
- (unsigned int)_validCaretPositionFromCharacterIndex:(unsigned int)arg1 downstream:(BOOL)arg2;
- (BOOL)_shouldConsiderTextViewForGeometry:(id)arg1;
- (void)checkSpellingForWordInRange:(id)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })previousSelectedRange;
- (BOOL)continuousSpellCheckingEnabled;
- (void)removeSpellingMarkersFromWordInRange:(id)arg1;
- (void)removeSpellingMarkersForCurrentWord;
- (void)_insertAttributedText:(id)arg1 fromKeyboard:(BOOL)arg2;
- (void)removeAlternativesForCurrentWord;
- (void)checkSpellingForSelectionChangeIfNecessary;
- (void)_insertText:(id)arg1 fromKeyboard:(BOOL)arg2;
- (void)registerUndoOperationForType:(int)arg1 actionName:(id)arg2 affectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 replacementText:(id)arg4;
- (struct _NSRange { unsigned int x1; unsigned int x2; })nsRangeForTextRange:(id)arg1;
- (id)_newAttributedStringForInsertionOfText:(id)arg1 inRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)_sendDelegateWillChangeNotificationsForText:(BOOL)arg1 selection:(BOOL)arg2;
- (void)_setSelectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)_invalidateTypingAttributes;
- (void)_coordinateSelectionChange:(id)arg1;
- (void)_sendDelegateChangeNotificationsForText:(BOOL)arg1 selection:(BOOL)arg2;
- (void)_setSelectedTextRange:(id)arg1;
- (void)_ensureSelectionValid;
- (void)_forceUnmarkTextDueToEditing;
- (void)_setEmptyStringAttributes:(id)arg1;
- (void)_teardownTextContainerView:(id)arg1;
- (void)_setupTextContainerView:(id)arg1;
- (void)_cancelDictationIfNecessaryForChangeInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)_updateFirstTextView;
- (void)setPreviousSelectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)_textContainerDidChangeView:(id)arg1;
- (void)_commonInitWithLayoutManager:(id)arg1;
- (void)stopCoalescing;
- (void)_clearSelectionUI;
- (void)_removeDefinitionController;
- (BOOL)_mightHaveSelection;
- (void)_registerUndoOperationForReplacementWithActionName:(id)arg1 replacementText:(id)arg2;
- (void)_insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2 replacingRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 resultLength:(unsigned int*)arg4;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_rangeForBackwardsDelete;
- (BOOL)_shouldHandleResponderAction:(SEL)arg1;
- (BOOL)_canHandleResponderAction:(SEL)arg1;
- (void)_addToTypingAttributes:(id)arg1 value:(id)arg2;
- (id)textChecker;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_selectedRange;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_caretRect;
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;
- (id)_rangeOfLineEnclosingPosition:(id)arg1;
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;
- (BOOL)_hasMarkedTextOrRangedSelection;
- (BOOL)_selectionAtWordStart;
- (void)_phraseBoundaryGesture:(id)arg1;
- (void)_setInternalGestureRecognizers;
- (id)_setSelectionRangeWithHistory:(id)arg1;
- (id)_setHistory:(id)arg1 withExtending:(BOOL)arg2 withAnchor:(int)arg3 withAffinityDownstream:(BOOL)arg4;
- (BOOL)_isEmptySelection;
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(BOOL)arg2;
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(BOOL)arg2;
- (id)_keyInput;
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;
- (int)_indexForTextPosition:(id)arg1;
- (id)_fullRange;
- (id)_selectableText;
- (BOOL)_usesAsynchronousProtocol;
- (BOOL)_hasMarkedText;
- (id)_newPhraseBoundaryGestureRecognizer;
- (id)_firstTextView;
- (id)_textColorForCaretSelection;
- (id)_fontForCaretSelection;
- (int)_selectionAffinity;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (id)_positionFromPosition:(id)arg1 inDirection:(int)arg2 offset:(int)arg3 withAffinityDownstream:(BOOL)arg4;
- (BOOL)_selectionAtDocumentEnd;
- (BOOL)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(BOOL)arg3;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_nsrangeForTextRange:(id)arg1;
- (void)_resetShowingTextStyle:(id)arg1;
- (BOOL)_selectionAtDocumentStart;
- (void)_selectAll;
- (void)_replaceCurrentWordWithText:(id)arg1;
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;
- (id)_fullText;
- (id)_positionAtStartOfWords:(unsigned int)arg1 beforePosition:(id)arg2;
- (id)_rangeOfEnclosingWord:(id)arg1;
- (unsigned long)_characterAfterCaretSelection;
- (id)_wordContainingCaretSelection;
- (unsigned long)_characterInRelationToCaretSelection:(int)arg1;
- (void)_deleteForwardAndNotify:(BOOL)arg1;
- (void)_deleteBackwardAndNotify:(BOOL)arg1;
- (void)_expandSelectionToBackwardDeletionCluster;
- (void)_moveCurrentSelection:(int)arg1;
- (unsigned long)_characterInRelationToRangedSelection:(int)arg1;
- (unsigned long)_characterBeforeCaretSelection;
- (void)_setGestureRecognizers;
- (void)_unmarkText;
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)_deleteToEndOfLine;
- (void)_deleteToStartOfLine;
- (void)_deleteByWord;
- (id)_moveUp:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveDown:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveRight:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(BOOL)arg1 withHistory:(id)arg2;
- (void)_setCaretSelectionAtEndOfSelection;
- (void)_extendCurrentSelection:(int)arg1;
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)setContinuousSpellCheckingEnabled:(BOOL)arg1;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)_reanalyze:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_promptForReplace:(id)arg1;
- (void)select:(id)arg1;
- (void)updateSelection;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_selectedNSRange;
- (void)forwardInvocation:(id)arg1;
- (void)_showTextStyleOptions:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleBoldface:(id)arg1;
- (void)_addShortcut:(id)arg1;
- (void)_define:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)replace:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (void)selectAll:(id)arg1;
- (id)_proxyTextInput;
- (BOOL)allowsEditingTextAttributes;
- (void)setAllowsEditingTextAttributes:(BOOL)arg1;
- (void)setLayoutManager:(id)arg1;
- (void)selectAll;
- (int)selectionAffinity;
- (id)textStylingAtPosition:(id)arg1 inDirection:(int)arg2;
- (BOOL)_hasDictationPlaceholder;
- (struct _NSRange { unsigned int x1; unsigned int x2; })markedRange;
- (id)_textStorage;
- (void)_selectionGeometryChanged;
- (void)endSelectionChange;
- (void)beginSelectionChange;
- (id)metadataDictionariesForDictationResults;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (id)insertDictationResultPlaceholder;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)characterRangeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1 withinRange:(id)arg2;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)selectionRectsForRange:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (void)setBaseWritingDirection:(int)arg1 forRange:(id)arg2;
- (int)baseWritingDirectionForPosition:(id)arg1 inDirection:(int)arg2;
- (id)tokenizer;
- (void)setInputDelegate:(id)arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(int)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(int)arg2;
- (int)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (int)comparePosition:(id)arg1 toPosition:(id)arg2;
- (id)positionFromPosition:(id)arg1 inDirection:(int)arg2 offset:(int)arg3;
- (id)positionFromPosition:(id)arg1 offset:(int)arg2;
- (void)unmarkText;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (id)markedTextStyle;
- (id)markedTextRange;
- (id)selectedTextRange;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)deleteBackward;
- (void)insertText:(id)arg1;
- (id)_layoutManager;
- (void)clearText;
- (BOOL)hasText;
- (int)atomStyle;
- (BOOL)drawsAsAtom;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)setSelectedTextRange:(id)arg1;
- (id)_filteredAttributedTextInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)addTextAlternativesDisplayStyleToRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)setSelectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)delegateWillChangeAttributedText:(id)arg1;
- (id)inputDelegate;
- (id)textInRange:(id)arg1;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)endOfDocument;
- (id)beginningOfDocument;
- (id)typingAttributes;
- (void)didEndEditing;
- (void)_invalidateEmptyStringAttributes;
- (void)setTypingAttributes:(id)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })selectedRange;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionClipRect;
- (id)selectionView;
- (id)interactionAssistant;
- (void)_textStorageDidProcessEditing:(id)arg1;
- (id)initWithLayoutManager:(id)arg1;
- (id)layoutManager;
- (BOOL)isEditing;
- (id)_parentScrollView;
- (BOOL)isEditable;
- (BOOL)_isDisplayingShortcutViewController;
- (void)decreaseSize:(id)arg1;
- (void)increaseSize:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)undoManager;
- (id)delegate;
- (BOOL)respondsToSelector:(SEL)arg1;
- (void)dealloc;
- (void)setDelegate:(id)arg1;

@end
