/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TSDAudioHUDController>, TSKAVPlayerController, TSDMovieInfo, CALayer;

@interface TSDAudioRep : TSDMediaRep <TSKMediaPlayerControllerDelegate, TSDAudioHUDControllerDelegate> {
    TSKAVPlayerController *mPlayerController;
    CALayer *mPlayPauseButtonLayer;
    CALayer *mAudioImageLayer;
    float mDynamicVolume;
    BOOL mIsChangingDynamicVolume;
    <TSDAudioHUDController> *mAudioHUDController;
}

@property(readonly) TSDMovieInfo * movieInfo;
@property(readonly) TSKAVPlayerController * playerController;
@property(readonly) <TSDAudioHUDController> * audioHUDController;
@property(readonly) float volume;

+ (float)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2;

- (BOOL)isDraggable;
- (id)movieInfo;
- (float)volume;
- (id)playerController;
- (Class)layerClass;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)dealloc;
- (id)audioHUDController;
- (id)textureWithContext:(id)arg1;
- (BOOL)shouldAllowReplacementFromDrop;
- (void)updatePlayButtonForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setupPlayerControllerForAudioHUDController:(id)arg1;
- (BOOL)p_isEditingAnimations;
- (void)p_updateAudioHUDWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)hitPlayPauseButtonWithPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)p_teardownAudioHUD;
- (void)p_updateButtonForPlaying:(BOOL)arg1 pressed:(BOOL)arg2;
- (BOOL)p_isPlaying;
- (BOOL)p_shouldShowPlayPauseLayers;
- (void)dynamicVolumeChangeDidEnd;
- (void)dynamicVolumeUpdateToValue:(float)arg1;
- (void)dynamicVolumeChangeDidBegin;
- (void)playbackDidStopForPlayerController:(id)arg1;
- (void)playerController:(id)arg1 playbackDidFailWithError:(id)arg2;
- (BOOL)canResetMediaSize;
- (void)p_teardownPlayerController;
- (void)p_setupPlayerControllerIfNecessary;
- (BOOL)p_shouldPlayerControllerExistThroughoutSelection;
- (void)p_updateEndTime;
- (void)p_updateStartTime;
- (void)p_updateVolume;
- (void)p_updateRepeatMode;
- (BOOL)shouldAllowReplacementFromPaste;
- (BOOL)shouldShowMediaReplaceUI;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(BOOL)arg4 forAlphaOnly:(BOOL)arg5 drawChildren:(BOOL)arg6;
- (BOOL)exclusivelyProvidesGuidesWhileAligning;
- (BOOL)providesGuidesWhileAligning;
- (BOOL)shouldCreateSelectionKnobs;
- (id)hitRepChrome:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateLayerGeometryFromLayout:(id)arg1;
- (void)willBeginReadMode;
- (void)processChangedProperty:(int)arg1;
- (void)addKnobsToArray:(id)arg1;
- (BOOL)shouldShowDragHUD;
- (BOOL)shouldShowSizesInRulers;
- (BOOL)directlyManagesLayerContent;
- (id)newTrackerForKnob:(id)arg1;
- (void)updatePositionsOfKnobs:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsForStandardKnobs;
- (void)didEndZooming;
- (void)willBeginZooming;
- (BOOL)shouldShowKnobs;
- (BOOL)shouldShowSelectionHighlight;
- (void)becameNotSelected;
- (void)becameSelected;
- (void)willUpdateLayer:(id)arg1;
- (void)willBeRemoved;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;

@end
