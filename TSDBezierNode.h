/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDBezierNode : NSObject  {
    struct CGPoint { 
        float x; 
        float y; 
    } mIn;
    struct CGPoint { 
        float x; 
        float y; 
    } mNode;
    struct CGPoint { 
        float x; 
        float y; 
    } mOut;
    int mReflectedState;
    BOOL mSelected;
    int mType;
}

@property struct CGPoint { float x1; float x2; } nodePoint;
@property struct CGPoint { float x1; float x2; } inControlPoint;
@property struct CGPoint { float x1; float x2; } outControlPoint;
@property int reflectedState;
@property(readonly) BOOL isCollapsed;
@property int type;
@property(getter=isSelected) BOOL selected;

+ (id)bezierNodeWithPoint:(struct CGPoint { float x1; float x2; })arg1 inControlPoint:(struct CGPoint { float x1; float x2; })arg2 outControlPoint:(struct CGPoint { float x1; float x2; })arg3;
+ (id)bezierNodeWithPoint:(struct CGPoint { float x1; float x2; })arg1;

- (void)transformUsingAffineTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (id)typeString;
- (void)setNode:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isCollapsed;
- (void)setSelected:(BOOL)arg1;
- (BOOL)isSelected;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)moveToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (int)type;
- (void)setType:(int)arg1;
- (id)description;
- (BOOL)underPoint:(struct CGPoint { float x1; float x2; })arg1 withTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg2 andTolerance:(float)arg3 returningType:(int*)arg4;
- (void)swapControlPoints;
- (void)updateReflectedState;
- (void)collapse;
- (void)setInControlPointFromReflection:(struct CGPoint { float x1; float x2; })arg1 constrain:(BOOL)arg2;
- (void)setOutControlPoint:(struct CGPoint { float x1; float x2; })arg1 reflect:(int)arg2 constrain:(BOOL)arg3;
- (void)setInControlPoint:(struct CGPoint { float x1; float x2; })arg1 reflect:(int)arg2 constrain:(BOOL)arg3;
- (void)balanceControlPoints;
- (id)reflectedStateString;
- (int)reflectedState;
- (void)setReflectedState:(int)arg1;
- (void)setOutControlPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setInControlPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setNodePoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })outControlPoint;
- (struct CGPoint { float x1; float x2; })nodePoint;
- (struct CGPoint { float x1; float x2; })inControlPoint;

@end
