/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

@class NSArray, NSLocale, NSString, NSTimeZone;

@interface NSCalendar : NSObject <NSCopying, NSSecureCoding> {
}

@property(copy,readonly) NSString * calendarIdentifier;
@property(copy) NSLocale * locale;
@property(copy) NSTimeZone * timeZone;
@property unsigned int firstWeekday;
@property unsigned int minimumDaysInFirstWeek;
@property(copy,readonly) NSArray * eraSymbols;
@property(copy,readonly) NSArray * longEraSymbols;
@property(copy,readonly) NSArray * monthSymbols;
@property(copy,readonly) NSArray * shortMonthSymbols;
@property(copy,readonly) NSArray * veryShortMonthSymbols;
@property(copy,readonly) NSArray * standaloneMonthSymbols;
@property(copy,readonly) NSArray * shortStandaloneMonthSymbols;
@property(copy,readonly) NSArray * veryShortStandaloneMonthSymbols;
@property(copy,readonly) NSArray * weekdaySymbols;
@property(copy,readonly) NSArray * shortWeekdaySymbols;
@property(copy,readonly) NSArray * veryShortWeekdaySymbols;
@property(copy,readonly) NSArray * standaloneWeekdaySymbols;
@property(copy,readonly) NSArray * shortStandaloneWeekdaySymbols;
@property(copy,readonly) NSArray * veryShortStandaloneWeekdaySymbols;
@property(copy,readonly) NSArray * quarterSymbols;
@property(copy,readonly) NSArray * shortQuarterSymbols;
@property(copy,readonly) NSArray * standaloneQuarterSymbols;
@property(copy,readonly) NSArray * shortStandaloneQuarterSymbols;
@property(copy,readonly) NSString * AMSymbol;
@property(copy,readonly) NSString * PMSymbol;

+ (id)currentCalendar;
+ (void)initialize;
+ (BOOL)supportsSecureCoding;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)calendarWithIdentifier:(id)arg1;
+ (id)autoupdatingCurrentCalendar;
+ (id)CalGregorianCalendarForTimeZone:(id)arg1;
+ (id)sharedAutoupdatingCurrentCalendar;
+ (id)CalGregorianGMTCalendar;
+ (id)overlayCalendarForCalendarIdentifier:(id)arg1 timezone:(id)arg2;
+ (id)CalCalendarWithUnsanitizedCalendarIdentifier:(id)arg1;
+ (id)_mapkit_gregorianCalendar;
+ (void)__ck_setTestCalendar:(id)arg1;
+ (id)__ck_currentCalendar;

- (id)shortStandaloneMonthSymbols;
- (id)standaloneMonthSymbols;
- (id)shortMonthSymbols;
- (id)monthSymbols;
- (struct _NSRange { unsigned int x1; unsigned int x2; })maximumRangeOfUnit:(unsigned int)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfUnit:(unsigned int)arg1 inUnit:(unsigned int)arg2 forDate:(id)arg3;
- (id)initWithCalendarIdentifier:(id)arg1;
- (unsigned int)minimumDaysInFirstWeek;
- (unsigned int)firstWeekday;
- (BOOL)rangeOfUnit:(unsigned int)arg1 startDate:(id*)arg2 interval:(double*)arg3 forDate:(id)arg4;
- (id)components:(unsigned int)arg1 fromDate:(id)arg2 toDate:(id)arg3 options:(unsigned int)arg4;
- (id)locale;
- (id)timeZone;
- (id)PMSymbol;
- (id)AMSymbol;
- (void)setLocale:(id)arg1;
- (id)dateFromComponents:(id)arg1;
- (id)components:(unsigned int)arg1 fromDate:(id)arg2;
- (id)dateByAddingComponents:(id)arg1 toDate:(id)arg2 options:(unsigned int)arg3;
- (id)calendarIdentifier;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)setTimeZone:(id)arg1;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (unsigned char)_diffComponents:(double)arg1 :(double)arg2 :(unsigned long)arg3 :(const char *)arg4 :(void*)arg5;
- (unsigned char)_addComponents:(double*)arg1 :(unsigned long)arg2 :(const char *)arg3 :(void*)arg4;
- (unsigned char)_decomposeAbsoluteTime:(double)arg1 :(const char *)arg2 :(void*)arg3;
- (unsigned char)_composeAbsoluteTime:(double*)arg1 :(const char *)arg2 :(void*)arg3;
- (unsigned char)_rangeOfUnit:(unsigned int)arg1 startTime:(double*)arg2 interval:(double*)arg3 forAT:(double)arg4;
- (long)_ordinalityOfUnit:(unsigned int)arg1 inUnit:(unsigned int)arg2 forAT:(double)arg3;
- (struct { int x1; int x2; })_rangeOfUnit:(unsigned int)arg1 inUnit:(unsigned int)arg2 forAT:(double)arg3;
- (struct { int x1; int x2; })_maximumRangeOfUnit:(unsigned int)arg1;
- (struct { int x1; int x2; })_minimumRangeOfUnit:(unsigned int)arg1;
- (id)shortStandaloneQuarterSymbols;
- (id)standaloneQuarterSymbols;
- (id)shortQuarterSymbols;
- (id)quarterSymbols;
- (id)veryShortStandaloneWeekdaySymbols;
- (id)shortStandaloneWeekdaySymbols;
- (id)standaloneWeekdaySymbols;
- (id)veryShortWeekdaySymbols;
- (id)veryShortStandaloneMonthSymbols;
- (id)veryShortMonthSymbols;
- (id)longEraSymbols;
- (id)shortWeekdaySymbols;
- (id)weekdaySymbols;
- (id)eraSymbols;
- (id)_gregorianStartDate;
- (void)_setGregorianStartDate:(id)arg1;
- (id)_copyTimeZone;
- (id)_copyLocale;
- (BOOL)date:(id)arg1 matchesComponents:(id)arg2;
- (id)dateBySettingHour:(int)arg1 minute:(int)arg2 second:(int)arg3 toDate:(id)arg4 options:(unsigned int)arg5;
- (id)dateBySettingUnit:(unsigned int)arg1 value:(int)arg2 toDate:(id)arg3 options:(unsigned int)arg4;
- (id)nextDateAfterDate:(id)arg1 matchingHour:(int)arg2 minute:(int)arg3 second:(int)arg4 options:(unsigned int)arg5;
- (id)nextDateAfterDate:(id)arg1 matchingUnit:(unsigned int)arg2 value:(int)arg3 options:(unsigned int)arg4;
- (id)dateByAddingUnit:(unsigned int)arg1 value:(int)arg2 toDate:(id)arg3 options:(unsigned int)arg4;
- (id)components:(unsigned int)arg1 fromDateComponents:(id)arg2 toDateComponents:(id)arg3 options:(unsigned int)arg4;
- (BOOL)rangeOfWeekendStartDate:(out id*)arg1 interval:(out double*)arg2 containingDate:(id)arg3;
- (BOOL)isDate:(id)arg1 equalToDate:(id)arg2 toUnitGranularity:(unsigned int)arg3;
- (id)componentsInTimeZone:(id)arg1 fromDate:(id)arg2;
- (id)startOfDayForDate:(id)arg1;
- (id)dateWithEra:(int)arg1 yearForWeekOfYear:(int)arg2 weekOfYear:(int)arg3 weekday:(int)arg4 hour:(int)arg5 minute:(int)arg6 second:(int)arg7 nanosecond:(int)arg8;
- (id)dateWithEra:(int)arg1 year:(int)arg2 month:(int)arg3 day:(int)arg4 hour:(int)arg5 minute:(int)arg6 second:(int)arg7 nanosecond:(int)arg8;
- (void)getHour:(out int*)arg1 minute:(out int*)arg2 second:(out int*)arg3 nanosecond:(out int*)arg4 fromDate:(id)arg5;
- (void)getEra:(out int*)arg1 yearForWeekOfYear:(out int*)arg2 weekOfYear:(out int*)arg3 weekday:(out int*)arg4 fromDate:(id)arg5;
- (void)getEra:(out int*)arg1 year:(out int*)arg2 month:(out int*)arg3 day:(out int*)arg4 fromDate:(id)arg5;
- (id)dateBySettingHour:(int)arg1 minute:(int)arg2 second:(int)arg3 ofDate:(id)arg4 options:(unsigned int)arg5;
- (int)component:(unsigned int)arg1 fromDate:(id)arg2;
- (id)dateBySettingUnit:(unsigned int)arg1 value:(int)arg2 ofDate:(id)arg3 options:(unsigned int)arg4;
- (id)nextDateAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned int)arg3;
- (void)setGregorianStartDate:(id)arg1;
- (id)gregorianStartDate;
- (void)enumerateDatesStartingAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned int)arg3 usingBlock:(id)arg4;
- (BOOL)isDateInWeekend:(id)arg1;
- (BOOL)nextWeekendStartDate:(out id*)arg1 interval:(out double*)arg2 options:(unsigned int)arg3 afterDate:(id)arg4;
- (unsigned int)ordinalityOfUnit:(unsigned int)arg1 inUnit:(unsigned int)arg2 forDate:(id)arg3;
- (struct _NSRange { unsigned int x1; unsigned int x2; })minimumRangeOfUnit:(unsigned int)arg1;
- (void)setMinimumDaysInFirstWeek:(unsigned int)arg1;
- (void)setFirstWeekday:(unsigned int)arg1;
- (int)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularity:(unsigned int)arg3;
- (BOOL)isDate:(id)arg1 inSameDayAsDate:(id)arg2;
- (BOOL)isDateInYesterday:(id)arg1;
- (BOOL)isDateInTomorrow:(id)arg1;
- (BOOL)isDateInToday:(id)arg1;
- (unsigned long)_cfTypeID;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)date:(id)arg1 isSameYearAsDate:(id)arg2;
- (BOOL)date:(id)arg1 isSameDayAsDate:(id)arg2;
- (id)_timeOnlyComponentsForDate:(id)arg1;
- (id)_dateOnlyComponentsForDate:(id)arg1;
- (id)CalDateFromComponents:(id)arg1 inTimeZone:(id)arg2;
- (BOOL)dateIsFirstOfYear:(id)arg1;
- (BOOL)dateIsFirstOfMonth:(id)arg1;
- (int)daysInMonthContainingDate:(id)arg1;
- (int)calendarDaysFromDate:(id)arg1 toDate:(id)arg2;
- (id)dateBySanityCheckingDateRoundedToDay:(id)arg1;
- (int)secondsInDay;
- (int)daysInWeek;
- (int)monthsInYearForDate:(id)arg1;
- (int)minutesInHour;
- (int)secondsInMinute;
- (int)hoursInDay;
- (id)CalOccurrencesForBirthday:(id)arg1 inDateRange:(id)arg2;
- (BOOL)date:(id)arg1 isSameYearAsDate:(id)arg2;
- (BOOL)date:(id)arg1 isSameDayAsDate:(id)arg2;
- (id)_timeOnlyComponentsForDate:(id)arg1;
- (id)_dateOnlyComponentsForDate:(id)arg1;
- (unsigned int)__ck_unitOfDisambiguityFromDate:(id)arg1 toDate:(id)arg2;

@end
