/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSValue;

@interface UIKBRenderGeometry : NSObject <NSCopying> {
    BOOL _detachedVariants;
    int _roundRectCorners;
    float _roundRectRadius;
    int _popupBias;
    int _flickDirection;
    NSValue *_splitLeftRect;
    NSValue *_splitRightRect;
    struct CGPoint { 
        float x; 
        float y; 
    } _popupSource;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _frame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _paddedFrame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _displayFrame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _symbolFrame;
}

@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } frame;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } paddedFrame;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } displayFrame;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } symbolFrame;
@property struct CGPoint { float x1; float x2; } popupSource;
@property float roundRectRadius;
@property int roundRectCorners;
@property int popupBias;
@property int flickDirection;
@property BOOL detachedVariants;
@property(retain) NSValue * splitLeftRect;
@property(retain) NSValue * splitRightRect;
@property(readonly) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } displayInsets;
@property(readonly) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } paddedInsets;

+ (id)geometryWithShape:(id)arg1;
+ (id)geometryWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 paddedFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;

- (unsigned int)adjustForTranslucentGapsWithSize:(struct CGSize { float x1; float x2; })arg1 inFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })paddedInsets;
- (id)similarShape;
- (id)iPadVariantGeometries:(unsigned int)arg1;
- (id)iPhoneVariantGeometries:(unsigned int)arg1;
- (void)applyShadowInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)overlayWithGeometry:(id)arg1;
- (void)setDetachedVariants:(BOOL)arg1;
- (float)roundRectRadius;
- (BOOL)detachedVariants;
- (int)popupBias;
- (int)roundRectCorners;
- (struct CGPoint { float x1; float x2; })popupSource;
- (id)initWithShape:(id)arg1;
- (void)applyInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setPopupSource:(struct CGPoint { float x1; float x2; })arg1;
- (unsigned int)adjustForTranslucentGapsInFrameWithSize_10Key:(struct CGSize { float x1; float x2; })arg1 centerX:(float)arg2 isInBottomRow:(BOOL)arg3;
- (id)copyForPopupDirection:(int)arg1 scale:(float)arg2;
- (id)copyForFlickDirection:(int)arg1 scale:(float)arg2;
- (void)adjustToTopWithInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)makeIntegralWithScale:(float)arg1;
- (void)applyOffset:(struct CGPoint { float x1; float x2; })arg1;
- (id)_copyForDirection:(int)arg1 positionFactor:(float)arg2 sizeFactor:(float)arg3 scale:(float)arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })symbolFrame;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })displayInsets;
- (int)flickDirection;
- (void)setFlickDirection:(int)arg1;
- (id)splitRightRect;
- (id)splitLeftRect;
- (void)setSplitRightRect:(id)arg1;
- (void)setSplitLeftRect:(id)arg1;
- (void)setRoundRectRadius:(float)arg1;
- (void)setRoundRectCorners:(int)arg1;
- (void)setSymbolFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setPopupBias:(int)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })displayFrame;
- (void)setPaddedFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setDisplayFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })paddedFrame;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (BOOL)isEqual:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frame;
- (id)description;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;

@end
