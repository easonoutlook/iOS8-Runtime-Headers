/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSTLayout, TSUPointerKeyDictionary, TSDInfoGeometry, TSTTableInfo, NSMutableDictionary;

@interface TSTTablePartitioner : NSObject <TSDPartitioner> {
    TSTTableInfo *mTableInfo;
    TSDInfoGeometry *mInfoGeometry;
    float mFirstPartitionWidth;
    struct CGSize { 
        float width; 
        float height; 
    } mScaleToFit;
    TSTLayout *mScaledLayout;
    TSUPointerKeyDictionary *mHintMatricesByCanvas;
    NSMutableDictionary *mPartitioningPassCache;
}

@property(readonly) TSTLayout * scaledLayout;
@property(readonly) TSTTableInfo * tableInfo;
@property(readonly) float inlineTableWidth;
@property struct CGSize { float x1; float x2; } scaleToFit;
@property(readonly) BOOL scaleIsValid;
@property(copy) TSDInfoGeometry * infoGeometry;


- (void)dealloc;
- (id)initWithInfo:(id)arg1;
- (float)inlineTableWidth;
- (id)hintCacheKeyForPartitioningPass:(id)arg1 andHintID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (id)partitioningPassForFirstPartitionSize:(struct CGSize { float x1; float x2; })arg1;
- (void)p_flushCacheAfterPartitioningFinished:(id)arg1 lastHint:(id)arg2 horizontally:(BOOL)arg3;
- (BOOL)shouldReuseLayout:(id)arg1 forSize:(struct CGSize { float x1; float x2; })arg2 parentLayout:(id)arg3 hint:(id)arg4;
- (id)hintCacheKeyForHint:(id)arg1;
- (id)partitioningPassForHint:(id)arg1 withPreviousHint:(id)arg2;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })measureCellRangeForNextPartitionOfSize:(struct CGSize { float x1; float x2; })arg1 previousHint:(id)arg2 horizontally:(BOOL)arg3;
- (BOOL)p_didFinishPartitioningHint:(id)arg1 horizontally:(BOOL)arg2;
- (void)validateScaledLayout;
- (void)setInfoGeometry:(id)arg1;
- (id)scaledLayout;
- (BOOL)scaleIsValid;
- (id)tableInfo;
- (id)hintForLayout:(id)arg1;
- (BOOL)didHint:(id)arg1 syncWithNextHint:(id)arg2 horizontally:(BOOL)arg3 delta:(int)arg4;
- (id)nextLayoutForSize:(struct CGSize { float x1; float x2; })arg1 parentLayout:(id)arg2 previousHint:(id)arg3 horizontally:(BOOL)arg4 outFinished:(out BOOL*)arg5;
- (id)layoutForHint:(id)arg1 parentLayout:(id)arg2;
- (id)nextHintForSize:(struct CGSize { float x1; float x2; })arg1 parentLayout:(id)arg2 previousHint:(id)arg3 horizontally:(BOOL)arg4 outFinished:(out BOOL*)arg5;
- (id)infoGeometry;
- (void)setScaleToFit:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })scaleToFit;

@end
