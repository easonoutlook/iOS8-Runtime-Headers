/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <TSWPFootnoteHeightMeasurer>, TSWPPadding, TSWPStorage, <TSWPFootnoteMarkProvider>, <TSWPOffscreenColumn>, NSMutableArray, TSDCanvas, TSDLayout, TSPObject<TSDHint>;

@interface TSWPStorageMeasurer : NSObject <TSWPLayoutTarget, TSWPLayoutOwner, TSWPColumnMetrics> {
    TSWPStorage *_storage;
    NSMutableArray *_columns;
    struct CGSize { 
        float width; 
        float height; 
    } _minSize;
    struct CGSize { 
        float width; 
        float height; 
    } _maxSize;
    unsigned int _flags;
    struct CGPoint { 
        float x; 
        float y; 
    } _anchor;
}

@property(retain,readonly) NSMutableArray * columns;
@property(retain,readonly) <TSWPOffscreenColumn> * previousTargetLastColumn;
@property(readonly) const /* Warning: unhandled struct encoding: '{TSWPTopicNumberHints={map<const TSWPListStyle *' */ struct * previousTargetTopicNumbers; /* unknown property attribute:  true> >=L}}}II} */
@property(retain,readonly) <TSWPOffscreenColumn> * nextTargetFirstColumn;
@property(readonly) const struct * nextTargetTopicNumbers; /* unknown property attribute:  true> >=L}}}II} */
@property(readonly) <TSWPFootnoteHeightMeasurer> * footnoteHeightMeasurer;
@property(readonly) <TSWPFootnoteMarkProvider> * footnoteMarkProvider;
@property(readonly) TSPObject<TSDHint> * nextTargetFirstChildHint;
@property(readonly) struct CGSize { float x1; float x2; } minSize;
@property(readonly) struct CGSize { float x1; float x2; } maxSize;
@property(readonly) struct CGSize { float x1; float x2; } currentSize;
@property(readonly) struct CGPoint { float x1; float x2; } position;
@property(readonly) struct CGPoint { float x1; float x2; } anchorPoint;
@property(readonly) unsigned int autosizeFlags;
@property(readonly) int verticalAlignment;
@property(readonly) int naturalAlignment;
@property(readonly) int naturalDirection;
@property(readonly) BOOL wantsLineFragments;
@property(readonly) unsigned int pageNumber;
@property(readonly) unsigned int pageCount;
@property(readonly) BOOL textIsVertical;
@property(readonly) BOOL layoutIsValid;
@property(readonly) float maxAnchorY;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } maskRect;
@property(retain) NSMutableArray * anchoredDrawablesForRelayout;
@property(readonly) TSDCanvas * canvas;
@property(readonly) TSDLayout * parentLayoutForInlineAttachments;
@property(readonly) BOOL shouldHyphenate;
@property(readonly) struct __CFLocale { }* hyphenationLocale;
@property(readonly) struct CGSize { float x1; float x2; } adjustedInsets;
@property(readonly) TSWPPadding * layoutMargins;
@property(readonly) unsigned int columnCount;
@property(readonly) BOOL alwaysStartsNewTarget;
@property(readonly) BOOL shrinkTextToFit;
@property(readonly) BOOL columnsAreLeftToRight;
@property(readonly) float textScaleFactor;


- (int)verticalAlignment;
- (id)columns;
- (unsigned int)pageNumber;
- (unsigned int)columnCount;
- (id).cxx_construct;
- (unsigned int)pageCount;
- (struct CGSize { float x1; float x2; })minSize;
- (struct CGPoint { float x1; float x2; })anchorPoint;
- (struct CGSize { float x1; float x2; })maxSize;
- (struct CGPoint { float x1; float x2; })position;
- (void)dealloc;
- (struct CGSize { float x1; float x2; })currentSize;
- (struct CGSize { float x1; float x2; })measuredSizeWithFlags:(unsigned int)arg1;
- (id)pLayoutWithMinSize:(struct CGSize { float x1; float x2; })arg1 maxSize:(struct CGSize { float x1; float x2; })arg2 anchor:(struct CGPoint { float x1; float x2; })arg3 flags:(unsigned int)arg4;
- (BOOL)layoutIsValid;
- (BOOL)wantsLineFragments;
- (int)naturalDirection;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isLayoutOffscreen;
- (int)naturalAlignment;
- (BOOL)isLastTarget;
- (const struct TSWPTopicNumberHints { struct map<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> >, std::__1::less<const TSWPListStyle *>, std::__1::allocator<std::__1::pair<const TSWPListStyle *const, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > { struct __tree<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true>, std::__1::allocator<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > { struct __tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; unsigned int x2; unsigned int x3; }*)previousTargetTopicNumbers;
- (void)addAttachmentLayout:(id)arg1;
- (id)nextTargetFirstColumn;
- (const struct TSWPTopicNumberHints { struct map<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> >, std::__1::less<const TSWPListStyle *>, std::__1::allocator<std::__1::pair<const TSWPListStyle *const, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > { struct __tree<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true>, std::__1::allocator<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > { struct __tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; unsigned int x2; unsigned int x3; }*)nextTargetTopicNumbers;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)nextTargetFirstChildHint;
- (float)maxAnchorY;
- (id)currentInlineDrawableLayouts;
- (id)textWrapper;
- (id)footnoteMarkProvider;
- (id)footnoteHeightMeasurer;
- (id)previousTargetLastColumn;
- (id)validatedLayoutForInlineDrawable:(id)arg1;
- (unsigned int)autosizeFlags;
- (id)validatedLayoutForAnchoredDrawable:(id)arg1;
- (id)currentAnchoredDrawableLayouts;
- (void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(int)arg2 afterCharIndex:(unsigned int)arg3;
- (void)layoutManagerNeedsLayout:(id)arg1;
- (BOOL)caresAboutStorageChanges;
- (id)columnMetricsForCharIndex:(unsigned int)arg1 outRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg2;
- (BOOL)columnsAreLeftToRight;
- (BOOL)shrinkTextToFit;
- (BOOL)alwaysStartsNewTarget;
- (id)layoutMargins;
- (float)positionForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2 outWidth:(float*)arg3 outGap:(float*)arg4;
- (float)gapForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2;
- (float)widthForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2;
- (struct CGSize { float x1; float x2; })adjustedInsets;
- (BOOL)textIsVertical;
- (id)initWithStorage:(id)arg1;

@end
