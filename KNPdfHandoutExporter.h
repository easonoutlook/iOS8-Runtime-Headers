/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface KNPdfHandoutExporter : KNPdfExporter  {
    BOOL mPrintingRuledLines;
    BOOL mPrintingNotes;
    BOOL mPrintingDivider;
    BOOL mIsPrintingNote;
}

@property(getter=isPrintingNotes) BOOL printingNotes;
@property(getter=isPrintingRuledLines) BOOL printingRuledLines;
@property(getter=isPrintingDivider) BOOL printingDivider;


- (void)setPrintingDivider:(BOOL)arg1;
- (BOOL)isPrintingDivider;
- (void)setPrintingNotes:(BOOL)arg1;
- (void)setPrintingRuledLines:(BOOL)arg1;
- (BOOL)isPrintingNotes;
- (BOOL)isPrintingRuledLines;
- (void)p_drawRuledLinesForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 pageRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 numberOfLines:(unsigned int)arg3 context:(struct CGContext { }*)arg4;
- (void)p_drawDividerLineForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 pageRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 context:(struct CGContext { }*)arg3;
- (void)p_drawNotesForNode:(id)arg1 index:(unsigned int)arg2 forRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 unscaledClipRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 scaledClipRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg5 context:(struct CGContext { }*)arg6;
- (BOOL)incrementPage;
- (BOOL)drawCurrentPageInContext:(struct CGContext { }*)arg1 viewScale:(float)arg2 unscaledClipRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 createPage:(BOOL)arg4;
- (id)currentInfos;
- (id)initWithDocumentRoot:(id)arg1;

@end
