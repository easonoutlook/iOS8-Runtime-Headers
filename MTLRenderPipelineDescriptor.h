/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/Metal.framework/Metal
 */

@class MTLVertexDescriptor, NSString, <MTLFunction>;

@interface MTLRenderPipelineDescriptor : NSObject <NSCopying> {
    struct MTLRenderPipelineDescriptorPrivate { id x1[4]; unsigned int x2[4]; unsigned int x3[6]; unsigned int x4; unsigned int x5; union { unsigned int x_6_1_1; float x_6_1_2; } x6; union { unsigned int x_7_1_1; struct { unsigned int x_2_2_1 : 1; unsigned int x_2_2_2 : 1; unsigned int x_2_2_3 : 1; unsigned int x_2_2_4 : 1; unsigned int x_2_2_5 : 1; unsigned int x_2_2_6 : 27; } x_7_1_2; } x7; id x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; id x13; id x14; id x15; } *_private;
}

@property(copy) NSString * label;
@property(retain) <MTLFunction> * vertexFunction;
@property(retain) <MTLFunction> * fragmentFunction;
@property(copy) MTLVertexDescriptor * vertexDescriptor;
@property unsigned int sampleCount;
@property unsigned int sampleMask;
@property float sampleCoverage;
@property(getter=isAlphaToCoverageEnabled) BOOL alphaToCoverageEnabled;
@property(getter=isAlphaToOneEnabled) BOOL alphaToOneEnabled;
@property(getter=isDepthWriteEnabled) BOOL depthWriteEnabled;
@property(getter=isStencilWriteEnabled) BOOL stencilWriteEnabled;
@property(getter=isVisibilityResultEnabled) BOOL visibilityResultEnabled;


- (void)reset;
- (void)setLabel:(id)arg1;
- (id)label;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (BOOL)validate;
- (void)setSampleCount:(unsigned int)arg1;
- (unsigned int)sampleCount;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (id)serializeFragmentData;
- (void)setVertexDescriptor:(id)arg1;
- (id)fastBlendDescriptorAtIndex:(unsigned int)arg1;
- (unsigned int)pixelFormatAtIndex:(unsigned int)arg1;
- (void)setPixelFormat:(unsigned int)arg1 atIndex:(unsigned int)arg2;
- (id)copyBlendDescriptorAtIndex:(unsigned int)arg1;
- (void)setBlendDescriptor:(id)arg1 atIndex:(unsigned int)arg2;
- (void)setVisibilityResultEnabled:(BOOL)arg1;
- (BOOL)isVisibilityResultEnabled;
- (void)setStencilWriteEnabled:(BOOL)arg1;
- (BOOL)isStencilWriteEnabled;
- (void)setDepthWriteEnabled:(BOOL)arg1;
- (BOOL)isDepthWriteEnabled;
- (void)setAlphaToOneEnabled:(BOOL)arg1;
- (BOOL)isAlphaToOneEnabled;
- (void)setAlphaToCoverageEnabled:(BOOL)arg1;
- (BOOL)isAlphaToCoverageEnabled;
- (void)setSampleCoverage:(float)arg1;
- (float)sampleCoverage;
- (void)setSampleMask:(unsigned int)arg1;
- (unsigned int)sampleMask;
- (const struct MTLRenderPipelineDescriptorPrivate { id x1[4]; unsigned int x2[4]; unsigned int x3[6]; unsigned int x4; unsigned int x5; union { unsigned int x_6_1_1; float x_6_1_2; } x6; union { unsigned int x_7_1_1; struct { unsigned int x_2_2_1 : 1; unsigned int x_2_2_2 : 1; unsigned int x_2_2_3 : 1; unsigned int x_2_2_4 : 1; unsigned int x_2_2_5 : 1; unsigned int x_2_2_6 : 27; } x_7_1_2; } x7; id x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; id x13; id x14; id x15; }*)_descriptorPrivate;
- (void)setFragmentFunction:(id)arg1;
- (void)setVertexFunction:(id)arg1;
- (id)vertexDescriptor;
- (id)fragmentFunction;
- (id)vertexFunction;
- (id)description;
- (void)dealloc;
- (id)init;

@end
