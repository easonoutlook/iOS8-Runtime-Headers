/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/AppLaunchStats.framework/AppLaunchStats
 */

@class AppLaunchStatsSaveAndRestore, NSObject<OS_dispatch_queue>, NSDate, NSMutableArray, NSMutableDictionary;

@interface AppLaunchStatsState : NSObject <DuetLoggerProtocol, DuetSaveAndRestore> {
    boolisDeviceInCall;
    boolisDeviceUnderThermalPressure;
    boolisDeviceInGoodCellularCondition;
    boolisDataResourceAvailable;
    boolisFetchPowerResourceAvailable;
    boolisFetchPushPowerResourceAvailable;
    boolisDevicePhoneType;
    booldoUniformBudget;
    boolisWIFIConnected;
    boolisBatteryChargerConnected;
    boolhasCellConnected;
    boolhasWifiConnected;
    NSObject<OS_dispatch_queue> *stateQueue;
    int thermalStatusToken;
    long long globalDataBudgetCap;
    long long globalPowerBudgetCap;
    long long BGDataBudgetCap;
    AppLaunchStatsSaveAndRestore *saveAndRestoreContext;
    NSDate *startTimeStamp;
    NSDate *startTimeStampOOB;
    NSMutableDictionary *appsAliveInLSTDict;
    NSMutableArray *fireDates;
    NSMutableArray *cacheAppsforFullDebug;
    NSMutableArray *dailyLaunchArrays;
    NSMutableArray *recentLaunchArrays;
    NSMutableArray *weeklyLaunchArrays;
    NSMutableArray *appForecastArray;
    NSMutableArray *dataForecastArray;
    unsigned long long appForecastQuality;
    unsigned long long dataForecastQuality;
    NSMutableArray *powerFetchForecastArray;
    NSMutableArray *powerPushForecastArray;
    NSMutableArray *dailyAppForecastSlots;
    NSMutableArray *dailyDataBudgetSlots;
    NSMutableArray *dailyDataBGBudgetSlots;
    NSMutableArray *dailyDataNDISCBudgetSlots;
    NSMutableArray *dailyPowerFetchBudgetSlots;
    NSMutableArray *dailyPowerPushBudgetSlots;
    NSMutableArray *dailyPowerNDISCBudgetSlots;
    long long endofdayDataBudget;
    long long endofdayBGDataBudget;
    long long endofdayNDISCDataBudget;
    BOOL _enableLiveListCheck;
    BOOL _enableBlackListCheck;
    BOOL _enableOpportunisticFetchCheck;
    BOOL _enableForeGroundAppCheck;
    BOOL _enableBudgetCheck;
    float _globalNonactivePWPC;
    float _globalFetchPWPC;
    float _globalPushPWPC;
    float _dataWifiMultiplier;
    float _dataCellMultiplier;
    long long globalDataCarryCap;
    long long BGDataCarryCap;
    long long _globalMinSlotData;
    long long _BGMinSlotData;
    long long _globalTimeThreshold;
}

@property bool isDeviceInCall;
@property bool isDeviceUnderThermalPressure;
@property(readonly) bool isDeviceInGoodCellularCondition;
@property bool isDataResourceAvailable;
@property bool isFetchPowerResourceAvailable;
@property bool isFetchPushPowerResourceAvailable;
@property bool doUniformBudget;
@property(readonly) bool isWIFIConnected;
@property bool isBatteryChargerConnected;
@property(readonly) bool hasCellConnected;
@property(readonly) bool hasWifiConnected;
@property(retain) NSMutableDictionary * appsAliveInLSTDict;
@property(retain) NSMutableArray * fireDates;
@property(readonly) NSMutableArray * cacheAppsforFullDebug;
@property(retain) NSMutableArray * dailyLaunchArrays;
@property(retain) NSMutableArray * recentLaunchArrays;
@property(retain) NSMutableArray * weeklyLaunchArrays;
@property(retain) NSMutableArray * appForecastArray;
@property(retain) NSMutableArray * dataForecastArray;
@property unsigned long long appForecastQuality;
@property unsigned long long dataForecastQuality;
@property(retain) NSMutableArray * powerFetchForecastArray;
@property(retain) NSMutableArray * powerPushForecastArray;
@property(retain) NSMutableArray * dailyAppForecastSlots;
@property(retain) NSMutableArray * dailyDataBudgetSlots;
@property(retain) NSMutableArray * dailyDataBGBudgetSlots;
@property(retain) NSMutableArray * dailyDataNDISCBudgetSlots;
@property(retain) NSMutableArray * dailyPowerFetchBudgetSlots;
@property(retain) NSMutableArray * dailyPowerPushBudgetSlots;
@property(retain) NSMutableArray * dailyPowerNDISCBudgetSlots;
@property(readonly) long long globalMinSlotData;
@property(readonly) long long globalDataCarryCap;
@property(readonly) long long globalDataBudgetCap;
@property(readonly) long long BGDataBudgetCap;
@property(readonly) long long BGMinSlotData;
@property(readonly) long long BGDataCarryCap;
@property(readonly) long long globalTimeThreshold;
@property(readonly) float globalNonactivePWPC;
@property(readonly) float globalFetchPWPC;
@property(readonly) float globalPushPWPC;
@property(readonly) float dataWifiMultiplier;
@property(readonly) float dataCellMultiplier;
@property(readonly) BOOL enableLiveListCheck;
@property BOOL enableBlackListCheck;
@property(readonly) BOOL enableOpportunisticFetchCheck;
@property(readonly) BOOL enableForeGroundAppCheck;
@property(readonly) BOOL enableBudgetCheck;
@property long long endofdayDataBudget;
@property long long endofdayBGDataBudget;
@property long long endofdayNDISCDataBudget;


- (BOOL)enableBudgetCheck;
- (BOOL)enableForeGroundAppCheck;
- (BOOL)enableOpportunisticFetchCheck;
- (void)setEnableBlackListCheck:(BOOL)arg1;
- (BOOL)enableBlackListCheck;
- (BOOL)enableLiveListCheck;
- (float)dataCellMultiplier;
- (float)dataWifiMultiplier;
- (float)globalPushPWPC;
- (float)globalFetchPWPC;
- (float)globalNonactivePWPC;
- (long long)globalTimeThreshold;
- (long long)BGMinSlotData;
- (long long)globalMinSlotData;
- (void)setEndofdayNDISCDataBudget:(long long)arg1;
- (long long)endofdayNDISCDataBudget;
- (void)setEndofdayBGDataBudget:(long long)arg1;
- (long long)endofdayBGDataBudget;
- (void)setEndofdayDataBudget:(long long)arg1;
- (long long)endofdayDataBudget;
- (long long)BGDataCarryCap;
- (long long)BGDataBudgetCap;
- (long long)globalDataBudgetCap;
- (long long)globalDataCarryCap;
- (void)setDailyDataNDISCBudgetSlots:(id)arg1;
- (id)dailyDataNDISCBudgetSlots;
- (void)setDailyPowerNDISCBudgetSlots:(id)arg1;
- (id)dailyPowerNDISCBudgetSlots;
- (void)setDailyPowerPushBudgetSlots:(id)arg1;
- (id)dailyPowerPushBudgetSlots;
- (void)setDailyPowerFetchBudgetSlots:(id)arg1;
- (id)dailyPowerFetchBudgetSlots;
- (void)setDailyDataBGBudgetSlots:(id)arg1;
- (id)dailyDataBGBudgetSlots;
- (void)setDailyDataBudgetSlots:(id)arg1;
- (id)dailyDataBudgetSlots;
- (void)setDailyAppForecastSlots:(id)arg1;
- (void)setPowerPushForecastArray:(id)arg1;
- (void)setPowerFetchForecastArray:(id)arg1;
- (void)setDataForecastArray:(id)arg1;
- (void)setAppForecastArray:(id)arg1;
- (void)setWeeklyLaunchArrays:(id)arg1;
- (void)setRecentLaunchArrays:(id)arg1;
- (void)setDailyLaunchArrays:(id)arg1;
- (id)cacheAppsforFullDebug;
- (void)setAppsAliveInLSTDict:(id)arg1;
- (id)appsAliveInLSTDict;
- (bool)hasWifiConnected;
- (bool)hasCellConnected;
- (void)setIsBatteryChargerConnected:(bool)arg1;
- (bool)isBatteryChargerConnected;
- (bool)isWIFIConnected;
- (void)setDoUniformBudget:(bool)arg1;
- (bool)doUniformBudget;
- (bool)isFetchPushPowerResourceAvailable;
- (bool)isFetchPowerResourceAvailable;
- (bool)isDataResourceAvailable;
- (bool)isDeviceInGoodCellularCondition;
- (void)setIsDeviceUnderThermalPressure:(bool)arg1;
- (bool)isDeviceUnderThermalPressure;
- (void)setIsDeviceInCall:(bool)arg1;
- (bool)isDeviceInCall;
- (bool)isChargeOnWifiOn;
- (bool)hasResourcesAvailable:(bool)arg1 forTriggerType:(int)arg2;
- (id)getOutOfBandAppList;
- (bool)isOutOfBand;
- (bool)getAppsAliveInLSTList:(id)arg1;
- (void)addPredictedSlotsToDailyPowerBudgetQueue:(id)arg1 forcastquality:(long long)arg2 batteryCapacity:(id)arg3;
- (void)addPredictedSlotsToDailyDataBudgetQueue:(id)arg1 forcastquality:(long long)arg2;
- (void)addPredictedSlotsToDailyAppForecastQueue:(id)arg1;
- (id)popFirstSlotInDailyBudgetQueue:(id)arg1;
- (BOOL)getInCallStatus;
- (int)addToOutOfBandAppList:(int)arg1 withCacheDict:(id)arg2 withAppList:(id)arg3;
- (void)convertPCdistributionToInt:(id)arg1 fetchOver:(float)arg2 array:(id)arg3 dailyInt:(int)arg4;
- (long long)calculateDailyDataBudgetFor:(const char *)arg1;
- (long long)calculateSlotMinDataBudget:(const char *)arg1;
- (void)addPredictedSlotsToDailyOutOfBandQueue:(id)arg1;
- (id)dailyAppForecastSlots;
- (void)setFireDates:(id)arg1;
- (id)fireDates;
- (void)updateAppsAliveInLSTList:(id)arg1;
- (void)resetAppsAliveInLSTList;
- (void)setIsFetchPushPowerResourceAvailable:(bool)arg1;
- (void)setIsFetchPowerResourceAvailable:(bool)arg1;
- (void)setIsDataResourceAvailable:(bool)arg1;
- (id)powerPushForecastArray;
- (id)powerFetchForecastArray;
- (unsigned long long)appForecastQuality;
- (void)setAppForecastQuality:(unsigned long long)arg1;
- (id)appForecastArray;
- (unsigned long long)dataForecastQuality;
- (id)dataForecastArray;
- (void)setDataForecastQuality:(unsigned long long)arg1;
- (id)weeklyLaunchArrays;
- (id)dailyLaunchArrays;
- (id)recentLaunchArrays;
- (void)restore:(id)arg1;
- (void)saveContext:(id)arg1;
- (int)reloadConfiguration;
- (void)logLight:(struct __asl_object_s { }*)arg1 withMsg:(struct __asl_object_s { }*)arg2 withLevel:(int)arg3;
- (void)logAll:(struct __asl_object_s { }*)arg1 withMsg:(struct __asl_object_s { }*)arg2 withLevel:(int)arg3;
- (void)save:(id)arg1;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;

@end
