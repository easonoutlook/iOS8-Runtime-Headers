/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSMutableDictionary, NSSet, KNMacUILayout, KNSlideCollectionSelection;

@interface KNUIState : NSObject <NSCopying> {
    KNSlideCollectionSelection *mSlideTreeSelection;
    float mIPadCanvasViewScale;
    struct CGPoint { 
        float x; 
        float y; 
    } mIPadCanvasOffset;
    float mDesktopCanvasViewScale;
    struct CGPoint { 
        float x; 
        float y; 
    } mDesktopCanvasOffset;
    BOOL mHasPhoneCanvasViewScale;
    float mPhoneCanvasViewScale;
    BOOL mHasPhoneCanvasOffset;
    struct CGPoint { 
        float x; 
        float y; 
    } mPhoneCanvasOffset;
    BOOL mHasPhone568CanvasViewScale;
    float mPhone568CanvasViewScale;
    BOOL mHasPhone568CanvasOffset;
    struct CGPoint { 
        float x; 
        float y; 
    } mPhone568CanvasOffset;
    KNMacUILayout *mDocumentUILayout;
    BOOL mSlideViewFitsContentInWindow;
    float mLightTableZoomScale;
    BOOL mLightTableHidesSkippedSlides;
    struct CGPoint { 
        float x; 
        float y; 
    } mDesktopMainWindowOrigin;
    struct CGSize { 
        float width; 
        float height; 
    } mDesktopMainContentSize;
    float mDesktopNavigatorViewWidth;
    float mDesktopOutlineViewWidth;
    float mDesktopPresenterNotesViewHeight;
    NSMutableDictionary *mChartUIState;
    NSSet *mCollapsedSlideNodes;
    BOOL mShowSlideGuides;
    BOOL mShowMasterGuides;
    BOOL mShowsComments;
    BOOL mShowsRuler;
}

@property(retain) KNSlideCollectionSelection * slideTreeSelection;
@property float canvasViewScale;
@property struct CGPoint { float x1; float x2; } canvasOffset;
@property(copy) KNMacUILayout * documentUILayout;
@property BOOL slideViewFitsContentInWindow;
@property float lightTableZoomScale;
@property BOOL lightTableHidesSkippedSlides;
@property struct CGPoint { float x1; float x2; } desktopMainWindowOrigin;
@property struct CGSize { float x1; float x2; } desktopMainContentSize;
@property float desktopNavigatorViewWidth;
@property float desktopOutlineViewWidth;
@property float desktopPresenterNotesHeight;
@property(copy) NSSet * collapsedSlideNodes;
@property BOOL showSlideGuides;
@property BOOL showMasterGuides;
@property BOOL showsComments;
@property BOOL showsRuler;


- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)debugDescription;
- (void)dealloc;
- (id)init;
- (void)setShowsRuler:(BOOL)arg1;
- (void)setShowSlideGuides:(BOOL)arg1;
- (void)setShowMasterGuides:(BOOL)arg1;
- (void)setCollapsedSlideNodes:(id)arg1;
- (id)collapsedSlideNodes;
- (void)setDesktopPresenterNotesHeight:(float)arg1;
- (void)setDesktopOutlineViewWidth:(float)arg1;
- (void)setDesktopNavigatorViewWidth:(float)arg1;
- (void)setDesktopMainContentSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setDesktopMainWindowOrigin:(struct CGPoint { float x1; float x2; })arg1;
- (void)setLightTableHidesSkippedSlides:(BOOL)arg1;
- (void)setLightTableZoomScale:(float)arg1;
- (void)setSlideViewFitsContentInWindow:(BOOL)arg1;
- (void)setDocumentUILayout:(id)arg1;
- (id)archivedUIStateInContext:(id)arg1;
- (void)setCanvasOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setCanvasViewScale:(float)arg1;
- (BOOL)showsRuler;
- (BOOL)showMasterGuides;
- (BOOL)showSlideGuides;
- (float)desktopPresenterNotesHeight;
- (float)desktopOutlineViewWidth;
- (float)desktopNavigatorViewWidth;
- (struct CGSize { float x1; float x2; })desktopMainContentSize;
- (struct CGPoint { float x1; float x2; })desktopMainWindowOrigin;
- (BOOL)lightTableHidesSkippedSlides;
- (float)lightTableZoomScale;
- (BOOL)slideViewFitsContentInWindow;
- (id)documentUILayout;
- (struct CGPoint { float x1; float x2; })canvasOffset;
- (float)canvasViewScale;
- (void)saveToArchive:(struct UIStateArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Reference {} *x3; struct Reference {} *x4; struct Size {} *x5; struct Point {} *x6; float x7; float x8; struct RepeatedPtrField<TSP::Reference> { void **x_9_1_1; int x_9_1_2; int x_9_1_3; int x_9_1_4; } x9; struct Point {} *x10; struct Point {} *x11; struct Reference {} *x12; float x13; float x14; struct Point {} *x15; struct RepeatedPtrField<TSCH::ChartUIState> { void **x_16_1_1; int x_16_1_2; int x_16_1_3; int x_16_1_4; } x16; float x17; boolx18; boolx19; boolx20; boolx21; struct RepeatedPtrField<TSP::Reference> { void **x_22_1_1; int x_22_1_2; int x_22_1_3; int x_22_1_4; } x22; float x23; float x24; struct Size {} *x25; boolx26; boolx27; float x28; struct Point {} *x29; int x30; unsigned int x31[1]; }*)arg1 archiver:(id)arg2 context:(id)arg3;
- (void)loadFromArchive:(const struct UIStateArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Reference {} *x3; struct Reference {} *x4; struct Size {} *x5; struct Point {} *x6; float x7; float x8; struct RepeatedPtrField<TSP::Reference> { void **x_9_1_1; int x_9_1_2; int x_9_1_3; int x_9_1_4; } x9; struct Point {} *x10; struct Point {} *x11; struct Reference {} *x12; float x13; float x14; struct Point {} *x15; struct RepeatedPtrField<TSCH::ChartUIState> { void **x_16_1_1; int x_16_1_2; int x_16_1_3; int x_16_1_4; } x16; float x17; boolx18; boolx19; boolx20; boolx21; struct RepeatedPtrField<TSP::Reference> { void **x_22_1_1; int x_22_1_2; int x_22_1_3; int x_22_1_4; } x22; float x23; float x24; struct Size {} *x25; boolx26; boolx27; float x28; struct Point {} *x29; int x30; unsigned int x31[1]; }*)arg1 unarchiver:(id)arg2 context:(id)arg3;
- (id)slideTreeSelection;
- (void)setSlideTreeSelection:(id)arg1;
- (void)setShowsComments:(BOOL)arg1;
- (BOOL)showsComments;
- (void)setUIState:(id)arg1 forChart:(id)arg2;
- (id)UIStateForChart:(id)arg1;

@end
