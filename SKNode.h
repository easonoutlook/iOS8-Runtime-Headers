/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class SKNode, SKPhysicsBody, SKReachConstraints, SKScene, NSMutableArray, NSString, NSMutableDictionary, NSArray;

@interface SKNode : UIResponder <NSCopying, NSCoding> {
    BOOL _spritesNeedsRemove;
    void *csprite;
    SKNode *_parent;
    NSMutableArray *_children;
    NSMutableArray *_actions;
    NSMutableDictionary *_keyedActions;
    NSMutableDictionary *_keyedSubSprites;
    NSMutableDictionary *_info;
    BOOL _needsDelete;
    NSMutableArray *_deleteList;
    NSString *_name;
    NSMutableDictionary *_userData;
    NSArray *_constraints;
    SKReachConstraints *_reachConstraints;
}

@property BOOL _showBounds;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } _untransformedBounds;
@property struct CGPoint { float x1; float x2; } _anchorPoint;
@property(readonly) struct CGSize { float x1; float x2; } _size;
@property(retain) NSMutableDictionary * _info;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } frame;
@property struct CGPoint { float x1; float x2; } position;
@property float zPosition;
@property float zRotation;
@property float xScale;
@property float yScale;
@property float speed;
@property float alpha;
@property(getter=isPaused) BOOL paused;
@property(getter=isHidden) BOOL hidden;
@property(getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property(readonly) SKNode * parent;
@property(readonly) NSArray * children;
@property(copy) NSString * name;
@property(readonly) SKScene * scene;
@property(retain) SKPhysicsBody * physicsBody;
@property(retain) NSMutableDictionary * userData;
@property(copy) SKReachConstraints * reachConstraints;
@property(copy) NSArray * constraints;
@property float xRotation;
@property float yRotation;

+ (id)node;

- (id)parent;
- (void)setParent:(id)arg1;
- (float)zPosition;
- (BOOL)intersectsNode:(id)arg1;
- (void)removeChild:(id)arg1;
- (id)children;
- (BOOL)needsUpdate;
- (BOOL)isPaused;
- (void)setYScale:(float)arg1;
- (float)yScale;
- (void)setXScale:(float)arg1;
- (float)xScale;
- (void)insertChild:(id)arg1 atIndex:(int)arg2;
- (void)addChild:(id)arg1;
- (BOOL)hasChildren;
- (void)_update:(double)arg1;
- (void).cxx_destruct;
- (void)setUserData:(id)arg1;
- (id)userData;
- (void)setZPosition:(float)arg1;
- (void)setPaused:(BOOL)arg1;
- (void)removeAllActions;
- (id)_info;
- (struct CGSize { float x1; float x2; })_size;
- (void)setScale:(float)arg1;
- (BOOL)isUserInteractionEnabled;
- (id)constraints;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)_parent;
- (void)setAlpha:(float)arg1;
- (float)alpha;
- (void)setUserInteractionEnabled:(BOOL)arg1;
- (id)allIntersectionsWithNode:(id)arg1 useAlphaTest:(BOOL)arg2;
- (void)set_anchorPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_untransformedBounds;
- (BOOL)_showBounds;
- (void)set_showBounds:(BOOL)arg1;
- (void)updatePhysicsPositionAndScaleFromSprite;
- (void)_getWorldTransform:(float*)arg1 positionY:(float*)arg2 rotation:(float*)arg3 xScale:(float*)arg4 yScale:(float*)arg5;
- (id)childrenInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGPoint { float x1; float x2; })_anchorPoint;
- (BOOL)hasUniformAlphaAndIsVisible;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1 withRadius:(float)arg2;
- (void)setYRotation:(float)arg1;
- (float)yRotation;
- (void)setXRotation:(float)arg1;
- (float)xRotation;
- (id)containingView;
- (void)runAction:(id)arg1 completion:(id)arg2;
- (void)_performCleanup;
- (void)removeAllChildren;
- (void)removeChildrenInArray:(id)arg1;
- (void)removeChildAtIndex:(int)arg1;
- (BOOL)intersectsNode:(id)arg1 useAlphaTest:(BOOL)arg2;
- (id)nodesAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)nodeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_enumerateChildNodesWithName:(id)arg1 usingBlock:(id)arg2 stopPointer:(BOOL*)arg3;
- (void)_flippedChangedFrom:(BOOL)arg1 to:(BOOL)arg2;
- (BOOL)inParentHierarchy:(id)arg1;
- (void)setReachConstraints:(id)arg1;
- (void)addChild:(id)arg1 withKey:(id)arg2;
- (void)set_info:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })calculateAccumulatedFrame;
- (void)runAction:(id)arg1 withKey:(id)arg2;
- (id)reachConstraints;
- (struct CGPoint { float x1; float x2; })convertPointToParent:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertPointFromParent:(struct CGPoint { float x1; float x2; })arg1;
- (void)setZRotation:(float)arg1;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toNode:(id)arg2;
- (float)zRotation;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 fromNode:(id)arg2;
- (void)enumerateChildNodesWithName:(id)arg1 usingBlock:(id)arg2;
- (void)_scaleFactorChangedFrom:(float)arg1 to:(float)arg2;
- (struct SKCSprite { int (**x1)(); struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_2_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long x_2_2_1; } x_2_1_2; } x2; id x3; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 1; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; unsigned int x22 : 1; unsigned int x23 : 1; unsigned int x24 : 1; unsigned int x25 : 1; unsigned int x26 : 1; unsigned int x27 : 1; unsigned int x28 : 1; unsigned int x29 : 1; boolx30; unsigned int x31 : 1; unsigned int x32 : 1; unsigned int x33 : 1; unsigned int x34 : 1; unsigned int x35 : 1; unsigned int x36 : 1; unsigned int x37 : 1; unsigned int x38 : 1; unsigned int x39 : 1; unsigned int x40 : 1; float x41; struct SKCSprite {} *x42; unsigned int x43; unsigned int x44; unsigned int x45; id x46; id x47; boolx48; boolx49; struct __CVBuffer {} *x50; struct __CVBuffer {} *x51; struct __CVOpenGLESTextureCache {} *x52; id x53; id x54; id x55; unsigned int x56; unsigned int x57; unsigned int x58; struct { float x_59_1_1; float x_59_1_2; } x59; struct { float x_60_1_1; float x_60_1_2; } x60; struct { float x_61_1_1; float x_61_1_2; } x61; struct { struct { float x_1_2_1; float x_1_2_2; } x_62_1_1; struct { float x_2_2_1; float x_2_2_2; } x_62_1_2; } x62; boolx63; struct __CVBuffer {} *x64; struct __CVBuffer {} *x65; boolx66; struct { struct { union _GLKVector4 { struct { float x_1_4_1; float x_1_4_2; float x_1_4_3; float x_1_4_4; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; } x_1_3_2; struct { float x_3_4_1; float x_3_4_2; float x_3_4_3; float x_3_4_4; } x_1_3_3; float x_1_3_4[4]; } x_1_2_1; unsigned char x_1_2_2[4]; float x_1_2_3[3]; } x_67_1_1[4]; } x67; struct { /* ? */ } *x68; struct { /* ? */ } *x69; struct { struct { float x_1_2_1; float x_1_2_2; } x_70_1_1; struct { float x_2_2_1; float x_2_2_2; } x_70_1_2; struct { float x_3_2_1; float x_3_2_2; } x_70_1_3; struct { float x_4_2_1; float x_4_2_2; } x_70_1_4; } x70; struct { struct { float x_1_2_1; float x_1_2_2; } x_71_1_1; struct { float x_2_2_1; float x_2_2_2; } x_71_1_2; } x71; int x72; struct { struct { float x_1_2_1; float x_1_2_2; } x_73_1_1; struct { float x_2_2_1; float x_2_2_2; } x_73_1_2; } x73; struct SKCSprite {} *x74; union _GLKMatrix4 { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; float x_1_2_9; float x_1_2_10; float x_1_2_11; float x_1_2_12; float x_1_2_13; float x_1_2_14; float x_1_2_15; float x_1_2_16; } x_75_1_1; float x_75_1_2[16]; } x75; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > { struct __list_node_base<SKCSprite *, void *> { struct __list_node<SKCSprite *, void *> {} *x_1_2_1; struct __list_node<SKCSprite *, void *> {} *x_1_2_2; } x_76_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > > { unsigned long x_2_2_1; } x_76_1_2; } x76; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > {} *x77; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > {} *x78; unsigned int x79; unsigned int x80; boolx81; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > { struct __tree<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > { struct __tree_node<SKCSprite *, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<SKCSprite *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<SKCSprite *> > { unsigned long x_3_3_1; } x_1_2_3; } x_82_1_1; } x82; struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > { struct __hash_table<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > { struct unique_ptr<std::__1::__hash_node<SKCAction *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<SKCAction *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > > { struct __hash_node<SKCAction *, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<SKCAction *, void *> *>, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> > > { struct __hash_node_base<std::__1::__hash_node<SKCAction *, void *> *> { struct __hash_node<SKCAction *, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<SKCAction *> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<SKCAction *> > { float x_4_3_1; } x_1_2_4; } x_83_1_1; } x83; float x84; float x85; float x86; id x87; struct { float x_88_1_1; float x_88_1_2; } x88; id x89; boolx90; struct { struct { float x_1_2_1; float x_1_2_2; } x_91_1_1; struct { float x_2_2_1; float x_2_2_2; } x_91_1_2; } x91; struct { float x_92_1_1; float x_92_1_2; } x92; unsigned int x93; struct { float x_94_1_1; float x_94_1_2; } x94; struct { float x_95_1_1; float x_95_1_2; } x95; float x96; float x97; float x98; float x99; float x100; float x101; float x102; float x103; struct { float x_104_1_1; float x_104_1_2; float x_104_1_3; float x_104_1_4; } x104; struct { float x_105_1_1; float x_105_1_2; float x_105_1_3; float x_105_1_4; } x105; float x106; float x107; float x108; struct { struct { float x_1_2_1; float x_1_2_2; } x_109_1_1; struct { float x_2_2_1; float x_2_2_2; } x_109_1_2; } x109; id x110; float x111; id x112; }*)csprite;
- (void)removeFromParent;
- (void)setConstraints:(id)arg1;
- (BOOL)hasActions;
- (id)childNodeWithName:(id)arg1;
- (void)removeActionForKey:(id)arg1;
- (void)setPhysicsBody:(id)arg1;
- (void)setPhysicsField:(id)arg1;
- (id)physicsField;
- (id)physicsBody;
- (void)runAction:(id)arg1;
- (id)nodeAtPoint:(struct CGPoint { float x1; float x2; })arg1 recursive:(BOOL)arg2;
- (id)scene;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (struct CGPoint { float x1; float x2; })position;
- (BOOL)isHidden;
- (id)copy;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frame;
- (void)setHidden:(BOOL)arg1;
- (id)actionForKey:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;
- (id)description;
- (void)setSpeed:(float)arg1;
- (float)speed;
- (void)setPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)dealloc;
- (id)init;
- (void)removeAction:(id)arg1;

@end
