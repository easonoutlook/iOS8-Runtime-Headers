/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class TSDBezierNode, NSMutableArray, NSArray;

@interface TSDEditableBezierPathSource : TSDPathSource <TSDRealignablePathSource, TSDMixing> {
    NSMutableArray *mSubpaths;
    unsigned int mActiveSubpath;
    BOOL mHasLockedFlipTransform;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mLockedFlipTransform;
}

@property(readonly) struct CGPoint { float x1; float x2; } pathDelta;
@property(readonly) BOOL isCurved;
@property(retain) NSMutableArray * subpaths;
@property(retain) NSMutableArray * nodes;
@property(retain) NSArray * nodeTypes;
@property(readonly) TSDBezierNode * firstNode;
@property(readonly) TSDBezierNode * lastNode;
@property(getter=isClosed) BOOL closed;
@property(readonly) BOOL isOpen;
@property(readonly) BOOL closeIfEndpointsAreEqual;
@property(readonly) BOOL hasSelectedNode;
@property(readonly) BOOL allNodesSelected;
@property(readonly) BOOL canDeleteSelectedNodes;
@property(readonly) BOOL deletingSelectedNodesWillDeleteShape;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } nodeBounds;
@property(readonly) BOOL isCompound;
@property(readonly) struct CGPath { }* subpathForSelection;

+ (id)editableBezierPathSource;
+ (id)editableBezierPathSourceWithBezierPath:(id)arg1;
+ (id)editableBezierPathSourceWithPathSource:(id)arg1;

- (void)setBezierPath:(id)arg1;
- (void)removeNode:(id)arg1;
- (void)addNode:(id)arg1;
- (id)nodes;
- (id)initWithArchive:(const struct PathSourceArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct PointPathSourceArchive {} *x3; struct ScalarPathSourceArchive {} *x4; struct BezierPathSourceArchive {} *x5; struct CalloutPathSourceArchive {} *x6; struct ConnectionLinePathSourceArchive {} *x7; struct EditableBezierPathSourceArchive {} *x8; boolx9; boolx10; int x11; unsigned int x12[1]; }*)arg1;
- (BOOL)isCircular;
- (BOOL)isRectangular;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)curveToPoint:(struct CGPoint { float x1; float x2; })arg1 controlPoint1:(struct CGPoint { float x1; float x2; })arg2 controlPoint2:(struct CGPoint { float x1; float x2; })arg3;
- (id)lastNode;
- (BOOL)isOpen;
- (BOOL)isClosed;
- (void)setClosed:(BOOL)arg1;
- (void)setNodes:(id)arg1;
- (struct CGSize { float x1; float x2; })naturalSize;
- (id)firstNode;
- (void)lineToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)closePath;
- (void)moveToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)subpaths;
- (void)setNaturalSize:(struct CGSize { float x1; float x2; })arg1;
- (BOOL)isCurved;
- (void)truncateDelta:(struct CGPoint { float x1; float x2; })arg1;
- (void)truncateDeltaFromZeroBasedPath:(id)arg1;
- (void)prependDeltaFromZeroBasedPath:(id)arg1;
- (id)editableBezierPathStartingAtZero;
- (struct CGPoint { float x1; float x2; })pathDelta;
- (void)p_adjustZeroBasedPathUsingDelta:(struct CGPoint { float x1; float x2; })arg1;
- (void)p_adjustZeroBasedPathUsingDeltaFromPath:(id)arg1 isAdditive:(BOOL)arg2;
- (void)translateBezierPathToStartAtZero;
- (void)addTemporarySmoothNodes;
- (void)morphWithMorphInfo:(id)arg1;
- (void)updateSmoothNodes;
- (void)smoothCurveToPoint:(struct CGPoint { float x1; float x2; })arg1 controlPoint1:(struct CGPoint { float x1; float x2; })arg2 controlPoint2:(struct CGPoint { float x1; float x2; })arg3;
- (void)setNodeTypes:(id)arg1;
- (id)nodeTypes;
- (struct CGPath { }*)subpathForSelection;
- (void)cutAtSelectedNodes;
- (BOOL)canCutAtSelectedNodes;
- (void)splitSelectedNodes;
- (void)splitSelectedEdges;
- (void)deleteSelectedEdges;
- (void)closeSelectedNodes;
- (BOOL)canCloseSelectedNodes;
- (void)connectSelectedNodes;
- (BOOL)canConnectSelectedNodes;
- (void)selectSubpathForNode:(id)arg1 toggle:(BOOL)arg2;
- (void)toggleSelectedNodesToType:(int)arg1;
- (BOOL)bezierPathUnderPoint:(struct CGPoint { float x1; float x2; })arg1 withTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg2 tolerance:(float)arg3;
- (float)distanceToPoint:(struct CGPoint { float x1; float x2; })arg1 subpathIndex:(unsigned int*)arg2 elementIndex:(unsigned int*)arg3 tValue:(float*)arg4 threshold:(float)arg5;
- (BOOL)deletingSelectedNodesWillDeleteShape;
- (Class)preferredRepClass;
- (void)adjustGeometryForAlignToOrigin:(id)arg1;
- (id)splitEdge:(int)arg1 at:(float)arg2 fromSubpath:(int)arg3;
- (id)subpathsForConnectingUsingFirstSubpathFirstNode:(BOOL*)arg1 andSecondPathFirstNode:(BOOL*)arg2;
- (void)smoothAllNodes;
- (void)toggleNode:(id)arg1 toType:(int)arg2 prevNode:(id)arg3 nextNode:(id)arg4;
- (void)deleteSelectedNodesForced:(BOOL)arg1;
- (BOOL)isCompound;
- (void)setSubpaths:(id)arg1;
- (void)convertToHobby;
- (BOOL)closeIfEndpointsAreEqual;
- (void)smoothNode:(id)arg1;
- (void)sharpenAllNodes;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })nodeBounds;
- (id)insertNodeAtPoint:(struct CGPoint { float x1; float x2; })arg1 tolerance:(float)arg2;
- (id)bezierNodeUnderPoint:(struct CGPoint { float x1; float x2; })arg1 withTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg2 andTolerance:(float)arg3 returningType:(int*)arg4;
- (void)deselectAllNodes;
- (void)selectAllNodes;
- (void)deleteSelectedNodes;
- (BOOL)canDeleteSelectedNodes;
- (BOOL)hasSelectedNode;
- (BOOL)allNodesSelected;
- (void)offsetSelectedEdgesByDelta:(struct CGPoint { float x1; float x2; })arg1;
- (void)offsetSelectedNodesByDelta:(struct CGPoint { float x1; float x2; })arg1;
- (void)reverseDirection;
- (void)removeLastNode;
- (id)nodeAfterNode:(id)arg1;
- (id)nodePriorToNode:(id)arg1;
- (void)alignToOrigin;
- (void)setLockedFlipTransform:(BOOL)arg1;
- (struct CGPath { }*)pathWithoutFlips;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })pathFlipTransform;
- (id)bezierPathWithoutFlips;
- (id)mixedObjectWithFraction:(float)arg1 ofObject:(id)arg2;
- (int)mixingTypeWithObject:(id)arg1;
- (void)saveToArchive:(struct PathSourceArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct PointPathSourceArchive {} *x3; struct ScalarPathSourceArchive {} *x4; struct BezierPathSourceArchive {} *x5; struct CalloutPathSourceArchive {} *x6; struct ConnectionLinePathSourceArchive {} *x7; struct EditableBezierPathSourceArchive {} *x8; boolx9; boolx10; int x11; unsigned int x12[1]; }*)arg1;

@end
