/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class SKAction, SKKeyframeSequence, SKNode, UIColor, SKShader, SKTexture;

@interface SKEmitterNode : SKNode  {
    SKTexture *_particleTexture;
    struct SKCEmitterSprite { int (**x1)(); struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_2_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long x_2_2_1; } x_2_1_2; } x2; id x3; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 1; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; unsigned int x22 : 1; unsigned int x23 : 1; unsigned int x24 : 1; unsigned int x25 : 1; unsigned int x26 : 1; unsigned int x27 : 1; unsigned int x28 : 1; unsigned int x29 : 1; boolx30; unsigned int x31 : 1; unsigned int x32 : 1; unsigned int x33 : 1; unsigned int x34 : 1; unsigned int x35 : 1; unsigned int x36 : 1; unsigned int x37 : 1; unsigned int x38 : 1; unsigned int x39 : 1; unsigned int x40 : 1; float x41; struct SKCSprite {} *x42; unsigned int x43; unsigned int x44; unsigned int x45; id x46; id x47; boolx48; boolx49; struct __CVBuffer {} *x50; struct __CVBuffer {} *x51; struct __CVOpenGLESTextureCache {} *x52; id x53; id x54; id x55; unsigned int x56; unsigned int x57; unsigned int x58; struct { float x_59_1_1; float x_59_1_2; } x59; struct { float x_60_1_1; float x_60_1_2; } x60; struct { float x_61_1_1; float x_61_1_2; } x61; struct { struct { float x_1_2_1; float x_1_2_2; } x_62_1_1; struct { float x_2_2_1; float x_2_2_2; } x_62_1_2; } x62; boolx63; struct __CVBuffer {} *x64; struct __CVBuffer {} *x65; boolx66; struct { struct { union _GLKVector4 { struct { float x_1_4_1; float x_1_4_2; float x_1_4_3; float x_1_4_4; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; } x_1_3_2; struct { float x_3_4_1; float x_3_4_2; float x_3_4_3; float x_3_4_4; } x_1_3_3; float x_1_3_4[4]; } x_1_2_1; unsigned char x_1_2_2[4]; float x_1_2_3[3]; } x_67_1_1[4]; } x67; struct { /* ? */ } *x68; struct { /* ? */ } *x69; struct { struct { float x_1_2_1; float x_1_2_2; } x_70_1_1; struct { float x_2_2_1; float x_2_2_2; } x_70_1_2; struct { float x_3_2_1; float x_3_2_2; } x_70_1_3; struct { float x_4_2_1; float x_4_2_2; } x_70_1_4; } x70; struct { struct { float x_1_2_1; float x_1_2_2; } x_71_1_1; struct { float x_2_2_1; float x_2_2_2; } x_71_1_2; } x71; int x72; struct { struct { float x_1_2_1; float x_1_2_2; } x_73_1_1; struct { float x_2_2_1; float x_2_2_2; } x_73_1_2; } x73; struct SKCSprite {} *x74; union _GLKMatrix4 { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; float x_1_2_9; float x_1_2_10; float x_1_2_11; float x_1_2_12; float x_1_2_13; float x_1_2_14; float x_1_2_15; float x_1_2_16; } x_75_1_1; float x_75_1_2[16]; } x75; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > { struct __list_node_base<SKCSprite *, void *> { struct __list_node<SKCSprite *, void *> {} *x_1_2_1; struct __list_node<SKCSprite *, void *> {} *x_1_2_2; } x_76_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > > { unsigned long x_2_2_1; } x_76_1_2; } x76; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > {} *x77; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > {} *x78; unsigned int x79; unsigned int x80; boolx81; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > { struct __tree<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > { struct __tree_node<SKCSprite *, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<SKCSprite *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<SKCSprite *> > { unsigned long x_3_3_1; } x_1_2_3; } x_82_1_1; } x82; struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > { struct __hash_table<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > { struct unique_ptr<std::__1::__hash_node<SKCAction *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<SKCAction *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > > { struct __hash_node<SKCAction *, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<SKCAction *, void *> *>, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> > > { struct __hash_node_base<std::__1::__hash_node<SKCAction *, void *> *> { struct __hash_node<SKCAction *, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<SKCAction *> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<SKCAction *> > { float x_4_3_1; } x_1_2_4; } x_83_1_1; } x83; float x84; float x85; float x86; id x87; struct { float x_88_1_1; float x_88_1_2; } x88; id x89; boolx90; struct { struct { float x_1_2_1; float x_1_2_2; } x_91_1_1; struct { float x_2_2_1; float x_2_2_2; } x_91_1_2; } x91; struct { float x_92_1_1; float x_92_1_2; } x92; unsigned int x93; struct { float x_94_1_1; float x_94_1_2; } x94; struct { float x_95_1_1; float x_95_1_2; } x95; float x96; float x97; float x98; float x99; float x100; float x101; float x102; float x103; struct { float x_104_1_1; float x_104_1_2; float x_104_1_3; float x_104_1_4; } x104; struct { float x_105_1_1; float x_105_1_2; float x_105_1_3; float x_105_1_4; } x105; float x106; float x107; float x108; struct { struct { float x_1_2_1; float x_1_2_2; } x_109_1_1; struct { float x_2_2_1; float x_2_2_2; } x_109_1_2; } x109; id x110; float x111; id x112; struct SKCSprite {} *x113; id x114; struct PKCAether {} *x115; float x116; boolx117; struct SKCKeyframeSequence {} *x118; struct SKCKeyframeSequence {} *x119; struct SKCKeyframeSequence {} *x120; struct SKCKeyframeSequence {} *x121; struct SKCKeyframeSequence {} *x122; unsigned int x123; unsigned int x124; int x125; int x126; struct vector<SKCParticle *, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_127_1_1; struct SKCParticle {} **x_127_1_2; struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_3_2_1; } x_127_1_3; } x127; struct vector<SKCParticle *, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_128_1_1; struct SKCParticle {} **x_128_1_2; struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_3_2_1; } x_128_1_3; } x128; double x129; double x130; double x131; double x132; struct CGSize { float x_133_1_1; float x_133_1_2; } x133; float x134; float x135; float x136; struct { float x_137_1_1; float x_137_1_2; float x_137_1_3; float x_137_1_4; } x137; struct { float x_138_1_1; float x_138_1_2; float x_138_1_3; float x_138_1_4; } x138; struct { float x_139_1_1; float x_139_1_2; float x_139_1_3; float x_139_1_4; } x139; float x140; float x141; float x142; struct list<PKPoint, std::__1::allocator<PKPoint> > { struct __list_node_base<PKPoint, void *> { struct __list_node<PKPoint, void *> {} *x_1_2_1; struct __list_node<PKPoint, void *> {} *x_1_2_2; } x_143_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PKPoint, void *> > > { unsigned long x_2_2_1; } x_143_1_2; } x143; struct { float x_144_1_1; float x_144_1_2; } x144; struct { float x_145_1_1; float x_145_1_2; } x145; float x146; float x147; float x148; float x149; struct { float x_150_1_1; float x_150_1_2; } x150; float x151; float x152; float x153; float x154; float x155; float x156; float x157; float x158; float x159; float x160; float x161; float x162; id x163; int x164; unsigned int x165; } *_eSprite;
    SKNode *_target;
    SKKeyframeSequence *_colorSequence;
    SKKeyframeSequence *_colorBlendSequence;
    SKKeyframeSequence *_alphaSequence;
    SKKeyframeSequence *_scaleSequence;
    SKKeyframeSequence *_rotationSequence;
}

@property(retain) SKTexture * particleTexture;
@property float particleZPosition;
@property float particleZPositionRange;
@property float particleZPositionSpeed;
@property int particleBlendMode;
@property(retain) UIColor * particleColor;
@property float particleColorRedRange;
@property float particleColorGreenRange;
@property float particleColorBlueRange;
@property float particleColorAlphaRange;
@property float particleColorRedSpeed;
@property float particleColorGreenSpeed;
@property float particleColorBlueSpeed;
@property float particleColorAlphaSpeed;
@property(retain) SKKeyframeSequence * particleColorSequence;
@property float particleColorBlendFactor;
@property float particleColorBlendFactorRange;
@property float particleColorBlendFactorSpeed;
@property(retain) SKKeyframeSequence * particleColorBlendFactorSequence;
@property struct CGPoint { float x1; float x2; } particlePosition;
@property struct CGVector { float x1; float x2; } particlePositionRange;
@property float particleSpeed;
@property float particleSpeedRange;
@property float emissionAngle;
@property float emissionAngleRange;
@property float xAcceleration;
@property float yAcceleration;
@property float particleBirthRate;
@property unsigned int numParticlesToEmit;
@property float particleLifetime;
@property float particleLifetimeRange;
@property float particleRotation;
@property float particleRotationRange;
@property float particleRotationSpeed;
@property struct CGSize { float x1; float x2; } particleSize;
@property float particleScale;
@property float particleScaleRange;
@property float particleScaleSpeed;
@property(retain) SKKeyframeSequence * particleScaleSequence;
@property float particleAlpha;
@property float particleAlphaRange;
@property float particleAlphaSpeed;
@property(retain) SKKeyframeSequence * particleAlphaSequence;
@property(copy) SKAction * particleAction;
@property unsigned int fieldBitMask;
@property SKNode * targetNode;
@property(retain) SKShader * shader;


- (void).cxx_destruct;
- (void)setPaused:(BOOL)arg1;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)advanceSimulationTime:(double)arg1;
- (void)resetSimulation;
- (float)particleZPositionSpeed;
- (void)setPhysicsWorld:(id)arg1;
- (float)particleBirthRate;
- (void)setParticleDensity:(float)arg1;
- (float)particleDensity;
- (void)setDensityBased:(BOOL)arg1;
- (BOOL)densityBased;
- (void)setParticleZPositionRange:(float)arg1;
- (float)particleZPositionRange;
- (void)setParticleZPosition:(float)arg1;
- (float)particleZPosition;
- (id)targetNode;
- (void)setEmissionAngleRange:(float)arg1;
- (float)emissionAngleRange;
- (void)setEmissionAngle:(float)arg1;
- (float)emissionAngle;
- (void)setParticleSpeedRange:(float)arg1;
- (float)particleSpeedRange;
- (void)setParticleSpeed:(float)arg1;
- (float)particleSpeed;
- (void)setParticleBlendMode:(int)arg1;
- (int)particleBlendMode;
- (void)setParticleAlphaSpeed:(float)arg1;
- (float)particleAlphaSpeed;
- (void)setParticleAlphaRange:(float)arg1;
- (float)particleAlphaRange;
- (void)setParticleAlpha:(float)arg1;
- (float)particleAlpha;
- (void)setParticleScaleSpeed:(float)arg1;
- (float)particleScaleSpeed;
- (void)setParticleScaleRange:(float)arg1;
- (float)particleScaleRange;
- (void)setParticleScale:(float)arg1;
- (float)particleScale;
- (void)setParticleRotationSpeed:(float)arg1;
- (float)particleRotationSpeed;
- (void)setParticleRotationRange:(float)arg1;
- (float)particleRotationRange;
- (void)setParticleRotation:(float)arg1;
- (float)particleRotation;
- (void)setParticleLifetimeRange:(float)arg1;
- (float)particleLifetimeRange;
- (void)setParticleLifetime:(float)arg1;
- (float)particleLifetime;
- (void)setParticleColorBlendFactorSpeed:(float)arg1;
- (float)particleColorBlendFactorSpeed;
- (void)setParticleColorBlendFactorRange:(float)arg1;
- (float)particleColorBlendFactorRange;
- (void)setParticleColorBlendFactor:(float)arg1;
- (float)particleColorBlendFactor;
- (void)setParticleColorAlphaSpeed:(float)arg1;
- (float)particleColorAlphaSpeed;
- (void)setParticleColorBlueSpeed:(float)arg1;
- (float)particleColorBlueSpeed;
- (void)setParticleColorGreenSpeed:(float)arg1;
- (float)particleColorGreenSpeed;
- (void)setParticleColorRedSpeed:(float)arg1;
- (float)particleColorRedSpeed;
- (void)setParticleColorAlphaRange:(float)arg1;
- (float)particleColorAlphaRange;
- (void)setParticleColorBlueRange:(float)arg1;
- (float)particleColorBlueRange;
- (void)setParticleColorGreenRange:(float)arg1;
- (float)particleColorGreenRange;
- (void)setParticleColorRedRange:(float)arg1;
- (float)particleColorRedRange;
- (id)shader;
- (id)particleRotationSequence;
- (id)particleScaleSequence;
- (id)particleColorBlendFactorSequence;
- (id)particleColorSequence;
- (id)particleAlphaSequence;
- (unsigned int)fieldBitMask;
- (unsigned int)numParticlesToEmit;
- (struct CGVector { float x1; float x2; })particlePositionRange;
- (struct CGPoint { float x1; float x2; })particlePosition;
- (id)particleAction;
- (void)setShader:(id)arg1;
- (void)setParticleRotationSequence:(id)arg1;
- (void)setParticleScaleSequence:(id)arg1;
- (void)setParticleColorBlendFactorSequence:(id)arg1;
- (void)setParticleColorSequence:(id)arg1;
- (void)setParticleAlphaSequence:(id)arg1;
- (void)setFieldBitMask:(unsigned int)arg1;
- (void)setNumParticlesToEmit:(unsigned int)arg1;
- (void)setParticleAction:(id)arg1;
- (void)setParticleBirthRate:(float)arg1;
- (void)setParticleZPositionSpeed:(float)arg1;
- (void)setParticlePositionRange:(struct CGVector { float x1; float x2; })arg1;
- (void)setParticlePosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setParticleTexture:(id)arg1;
- (void)setTargetNode:(id)arg1;
- (id)particleTexture;
- (void)setParticleSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })particleSize;
- (id)particleColor;
- (void)setParticleColor:(id)arg1;
- (id)physicsWorld;
- (void)setYAcceleration:(float)arg1;
- (void)setXAcceleration:(float)arg1;
- (float)yAcceleration;
- (float)xAcceleration;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)init;

@end
