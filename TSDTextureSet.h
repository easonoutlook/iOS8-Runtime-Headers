/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSUNoCopyDictionary, NSMutableDictionary, NSMutableArray, NSDictionary, CALayer, TSDRep, NSArray;

@interface TSDTextureSet : NSObject <NSCopying> {
    struct CGPoint { 
        float x; 
        float y; 
    } mCenter;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mBounds;
    struct CGPoint { 
        float x; 
        float y; 
    } mOriginalPosition;
    BOOL mIsBaked;
    BOOL mShouldIncludeFinalTexturesInVisibleSet;
    BOOL mShouldTransformUsingTextureCenter;
    unsigned int mChunkCount;
    NSMutableArray *mTextures;
    NSMutableArray *mAllTextures;
    TSUNoCopyDictionary *mStageIndexForTexture;
    NSMutableDictionary *mFinalTextureForStage;
    NSMutableDictionary *mBoundingRectForStage;
    NSMutableDictionary *mContentRectForStage;
    NSMutableDictionary *mReverseFinalTextureForStage;
    TSUNoCopyDictionary *mFinalTexturesToStageMap;
    TSUNoCopyDictionary *mReverseFinalTexturesToStageMap;
    NSDictionary *mBakedAttributes;
    struct _NSRange { 
        unsigned int location; 
        unsigned int length; 
    } mActiveChunkIndices;
    CALayer *mLayer;
    BOOL mIsMagicMove;
    float mTextureOpacity;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mTextureContentRect;
    float mTextureAngle;
    int mTextureZOrder;
    BOOL mIsBackground;
    CALayer *mAlternateLayer;
    TSDRep *mRep;
    struct CGColorSpace { } *mColorSpace;
    int mMaxStageIndex;
    int _stageIndex;
}

@property(readonly) int maxStageIndex;
@property(readonly) int stageIndex;
@property(readonly) unsigned int chunkCount;
@property(readonly) NSArray * visibleTextures;
@property(readonly) NSArray * allTextures;
@property struct CGPoint { float x1; float x2; } center;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } boundingRect;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } frame;
@property(readonly) CALayer * layer;
@property(retain) CALayer * alternateLayer;
@property BOOL isMagicMove;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } textureContentRect;
@property float textureAngle;
@property int textureZOrder;
@property float textureOpacity;
@property BOOL isBackground;
@property BOOL isBaked;
@property BOOL shouldIncludeFinalTexturesInVisibleSet;
@property BOOL shouldTransformUsingTextureCenter;
@property TSDRep * rep;
@property(retain) NSDictionary * boundingRectForStage;
@property(retain) NSDictionary * contentRectForStage;
@property struct CGPoint { float x1; float x2; } originalPosition;
@property struct CGColorSpace { }* colorSpace;
@property(readonly) BOOL isRenderable;
@property(readonly) BOOL isImageSource;


- (struct CGColorSpace { }*)colorSpace;
- (void)teardown;
- (unsigned int)chunkCount;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingRect;
- (void)setCenter:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })center;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frame;
- (id)description;
- (id)layer;
- (void)dealloc;
- (id)init;
- (int)stageIndex;
- (int)textureZOrder;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textureContentRect;
- (void)setShouldTransformUsingTextureCenter:(BOOL)arg1;
- (BOOL)shouldTransformUsingTextureCenter;
- (BOOL)shouldIncludeFinalTexturesInVisibleSet;
- (int)maxStageIndex;
- (BOOL)isBaked;
- (void)setIsBackground:(BOOL)arg1;
- (BOOL)isBackground;
- (id)contentRectForStage;
- (id)boundingRectForStage;
- (id)allTextures;
- (void)addPerspectiveLayerToTexture:(id)arg1 withShowSize:(struct CGSize { float x1; float x2; })arg2;
- (void)renderIntoContext:(struct CGContext { }*)arg1 requiresTransparentBackground:(BOOL)arg2;
- (void)setContentRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forStage:(int)arg2;
- (BOOL)isBackgroundTexture:(id)arg1;
- (void)applyActionEffect:(id)arg1 viewScale:(float)arg2 isMagicMove:(BOOL)arg3 shouldBake:(BOOL)arg4 applyScaleOnly:(BOOL)arg5 ignoreScale:(BOOL)arg6 shouldCheckActionKeys:(BOOL)arg7;
- (void)adjustAnchorPointRelativeToCenterOfRotation;
- (void)setLayerGeometryFromRep:(id)arg1;
- (void)hideLayersOfFinalTextures;
- (id)finalTextureForStage:(int)arg1 reverse:(BOOL)arg2;
- (id)newFlattenedTexture;
- (id)visibleTexturesWithTextureType:(int)arg1;
- (id)firstVisibleTextureForTextureType:(int)arg1;
- (void)removeRenderable:(id)arg1;
- (id)visibleTexturesForStage:(int)arg1 isBuildIn:(BOOL)arg2 shouldFlatten:(BOOL)arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })contentRectForStage:(int)arg1 isBuildIn:(BOOL)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingRectForStage:(int)arg1 isBuildIn:(BOOL)arg2;
- (void)p_resetAttributesWithViewScale:(float)arg1;
- (void)p_applyPositionFromAttributes:(id)arg1 viewScale:(float)arg2;
- (id)visibleTextures;
- (id)newFlattenedTextureFromTextures:(id)arg1 newRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)setContentRectForStage:(id)arg1;
- (void)setBoundingRectForStage:(id)arg1;
- (void)setAlternateLayer:(id)arg1;
- (int)stageIndexForTexture:(id)arg1;
- (float)textureOpacity;
- (void)setOriginalPosition:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })originalPosition;
- (void)renderLayerContentsIfNeeded;
- (BOOL)isRenderable;
- (void)resetAnchorPoint;
- (BOOL)isImageSource;
- (void)setRep:(id)arg1;
- (void)addRenderable:(id)arg1;
- (void)setTextureOpacity:(float)arg1;
- (void)setIsMagicMove:(BOOL)arg1;
- (float)textureAngle;
- (BOOL)isMagicMove;
- (void)setTextureZOrder:(int)arg1;
- (void)setTextureContentRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setTextureAngle:(float)arg1;
- (id)alternateLayer;
- (void)setShouldIncludeFinalTexturesInVisibleSet:(BOOL)arg1;
- (void)setIsBaked:(BOOL)arg1;
- (void)setBoundingRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forStage:(int)arg2;
- (void)setBoundingRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)addRenderable:(id)arg1 forStage:(int)arg2;
- (void)addFinalTexture:(id)arg1 forStage:(int)arg2 reverse:(BOOL)arg3;
- (id)rep;

@end
