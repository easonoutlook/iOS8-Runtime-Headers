/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/StoreBookkeeper.framework/StoreBookkeeper
 */

@class NSOperationQueue, NSObject<OS_dispatch_queue>, SBKStoreAuthenticationController, NSMutableArray, SSAccount, SBKTaskAssertion, NSString, NSURL, <SBKTransactionControllerDelegate>, SBKTransaction;

@interface SBKTransactionController : NSObject <ISStoreURLOperationDelegate> {
    BOOL _enabled;
    BOOL _shouldAuthenticateIfNecessary;
    BOOL _isResolvingError;
    <SBKTransactionControllerDelegate> *_delegate;
    NSString *_domain;
    NSURL *_requestURL;
    SBKStoreAuthenticationController *_authenticationController;
    SBKTransaction *_currentTransaction;
    SSAccount *_account;
    NSObject<OS_dispatch_queue> *_queue;
    NSOperationQueue *_operationQueue;
    NSMutableArray *_pendingTransactions;
    SBKTaskAssertion *_backgroundTaskAssertion;
    id _networkTypeObserver;
    int _conflictResolutionAttempts;
}

@property <SBKTransactionControllerDelegate> * delegate;
@property(copy,readonly) NSString * domain;
@property(readonly) NSURL * requestURL;
@property(getter=isEnabled,readonly) BOOL enabled;
@property(getter=isIdle,readonly) BOOL idle;
@property(retain) SBKStoreAuthenticationController * authenticationController;
@property BOOL shouldAuthenticateIfNecessary;
@property(retain) SBKTransaction * currentTransaction;
@property(retain) SSAccount * account;
@property(retain) NSObject<OS_dispatch_queue> * queue;
@property(retain) NSOperationQueue * operationQueue;
@property(retain) NSMutableArray * pendingTransactions;
@property BOOL isResolvingError;
@property(retain) SBKTaskAssertion * backgroundTaskAssertion;
@property id networkTypeObserver;
@property int conflictResolutionAttempts;


- (void)operation:(id)arg1 finishedWithOutput:(id)arg2;
- (void)operation:(id)arg1 didReceiveResponse:(id)arg2;
- (void)_beginBackgroundTask;
- (BOOL)isIdle;
- (void)setConflictResolutionAttempts:(int)arg1;
- (int)conflictResolutionAttempts;
- (void)setNetworkTypeObserver:(id)arg1;
- (id)networkTypeObserver;
- (void)setBackgroundTaskAssertion:(id)arg1;
- (void)setIsResolvingError:(BOOL)arg1;
- (BOOL)isResolvingError;
- (void)setPendingTransactions:(id)arg1;
- (id)pendingTransactions;
- (void)setCurrentTransaction:(id)arg1;
- (id)currentTransaction;
- (void)setShouldAuthenticateIfNecessary:(BOOL)arg1;
- (void)setAuthenticationController:(id)arg1;
- (id)authenticationController;
- (void)cancelAllTransactionsCancelCode:(int)arg1;
- (void)cancelAllTransactions;
- (void)cancelScheduledTransaction:(id)arg1;
- (void)scheduleTransaction:(id)arg1 withTransactionFinishedBlock:(id)arg2;
- (void)setRequestURL:(id)arg1;
- (id)initWithDomain:(id)arg1 requestURL:(id)arg2;
- (void)_onQueue_processOperationOutput:(id)arg1 operation:(id)arg2 operationAuthenticated:(BOOL)arg3;
- (BOOL)_sendFinishedBlockForTransaction:(id)arg1 success:(BOOL)arg2 cancelled:(BOOL)arg3 error:(id)arg4 handledAsFinishedBlock:(BOOL*)arg5;
- (void)_onQueue_performDefaultErrorHandlingForError:(id)arg1;
- (void)_onQueue_performCancelErrorHandlingForError:(id)arg1;
- (void)_onQueue_performRetryErrorHandlingForError:(id)arg1;
- (BOOL)shouldAuthenticateIfNecessary;
- (void)_processDataInResponse:(id)arg1;
- (void)_onQueue_currentTransactionDidFinish;
- (void)_delegateTransactionDidCancel:(id)arg1 withError:(id)arg2;
- (void)_resolveError:(id)arg1 resolution:(int)arg2;
- (BOOL)_delegateTransactionDidFail:(id)arg1 withError:(id)arg2;
- (void)_delegateTransactionDidFinish:(id)arg1;
- (BOOL)_onQueue_clampsCanScheduleTransaction:(id)arg1 error:(id*)arg2;
- (void)_onQueue_assertIsTransactionValid:(id)arg1 error:(id*)arg2;
- (BOOL)_onQueue_isEnabledForTransaction:(id)arg1 error:(id*)arg2;
- (void)_onQueue_addPendingTransaction:(id)arg1;
- (BOOL)_onQueue_canScheduleTransaction:(id)arg1 error:(id*)arg2;
- (void)_enqueueStoreOperation:(id)arg1;
- (BOOL)_onQueue_authenticationCanProcessTransaction:(id)arg1 error:(id*)arg2;
- (void)_onQueue_processCurrentTransaction;
- (void)_onQueue_transactionDidCancel:(id)arg1 withError:(id)arg2;
- (id)backgroundTaskAssertion;
- (void)_onQueue_beginBackgroundTask;
- (void)_onQueue_resolveError:(id)arg1 resolution:(int)arg2;
- (void)_storeOperationDidComplete:(id)arg1;
- (void)_onQueue_cancelTransaction:(id)arg1 error:(id)arg2;
- (void)_onQueue_transactionDidFail:(id)arg1 withError:(id)arg2;
- (void)_onQueue_scheduleTransaction:(id)arg1 isRetry:(BOOL)arg2;
- (BOOL)_delegateShouldScheduleTransaction:(id)arg1 error:(id*)arg2;
- (void)scheduleTransaction:(id)arg1;
- (BOOL)_onQueue_isIdle;
- (void)_onQueue_cancelAllPendingTransactions:(id)arg1;
- (void)_onQueue_processPendingTransactions;
- (id)_onQueue_clampsController;
- (void)_onQueue_endBackgroundTask;
- (id)requestURL;
- (void)setDomain:(id)arg1;
- (void)setAccount:(id)arg1;
- (id)account;
- (id)operationQueue;
- (void)setQueue:(id)arg1;
- (id)queue;
- (void).cxx_destruct;
- (void)setOperationQueue:(id)arg1;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)arg1;
- (id)domain;
- (id)delegate;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (void)_networkTypeChangedNotification:(id)arg1;
- (void)_endBackgroundTask;
- (void)operation:(id)arg1 failedWithError:(id)arg2;

@end
