/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit
 */

@class NSMutableDictionary, NSString, SCNProgram, SCNShadableHelper, NSDictionary, SCNMaterialProperty;

@interface SCNMaterial : NSObject <SCNAnimatable, SCNShadable, NSCopying, NSSecureCoding> {
    id _reserved;
    struct __C3DMaterial { } *_material;
    SCNMaterialProperty *_ambient;
    SCNMaterialProperty *_diffuse;
    SCNMaterialProperty *_specular;
    SCNMaterialProperty *_emission;
    SCNMaterialProperty *_reflective;
    SCNMaterialProperty *_transparent;
    SCNMaterialProperty *_multiply;
    SCNMaterialProperty *_normal;
    NSMutableDictionary *_animations;
    NSString *_name;
    NSMutableDictionary *_valuesForUndefinedKeys;
    float _shininess;
    float _transparency;
    float _indexOfRefraction;
    float _fresnelExponent;
    int _transparencyMode;
    NSString *_lightingModelName;
    int _cullMode;
    SCNShadableHelper *_shadableHelper;
    BOOL _isPresentationInstance;
    BOOL _litPerPixel;
    BOOL _doubleSided;
    BOOL _locksAmbientWithDiffuse;
    BOOL _avoidsOverLighting;
    BOOL _writesToDepthBuffer;
    BOOL _readsFromDepthBuffer;
    int _fillMode;
}

@property(copy) NSString * name;
@property(readonly) SCNMaterialProperty * diffuse;
@property(readonly) SCNMaterialProperty * ambient;
@property(readonly) SCNMaterialProperty * specular;
@property(readonly) SCNMaterialProperty * emission;
@property(readonly) SCNMaterialProperty * transparent;
@property(readonly) SCNMaterialProperty * reflective;
@property(readonly) SCNMaterialProperty * multiply;
@property(readonly) SCNMaterialProperty * normal;
@property float shininess;
@property float transparency;
@property(copy) NSString * lightingModelName;
@property(getter=isLitPerPixel) BOOL litPerPixel;
@property(getter=isDoubleSided) BOOL doubleSided;
@property int cullMode;
@property int transparencyMode;
@property BOOL locksAmbientWithDiffuse;
@property BOOL writesToDepthBuffer;
@property BOOL readsFromDepthBuffer;
@property float fresnelExponent;
@property(copy) NSDictionary * shaderModifiers;
@property(retain) SCNProgram * program;

+ (BOOL)supportsSecureCoding;
+ (id)materialWithContents:(id)arg1;
+ (id)materialWithColor:(id)arg1;
+ (id)materialWithMaterialRef:(struct __C3DMaterial { }*)arg1;
+ (id)material;
+ (id)SCNJSExportProtocol;
+ (BOOL)accessInstanceVariablesDirectly;

- (int)fillMode;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)addAnimation:(id)arg1;
- (void)setDoubleSided:(BOOL)arg1;
- (BOOL)isDoubleSided;
- (id)properties;
- (id)content;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setColor:(id)arg1;
- (id)color;
- (void)setIdentifier:(id)arg1;
- (void)removeAllAnimations;
- (id)animationForKey:(id)arg1;
- (id)animationKeys;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)identifier;
- (struct __C3DMaterial { }*)materialRefCreateIfNeeded;
- (void)_customDecodingOfSCNMaterial:(id)arg1;
- (void)_customEncodingOfSCNMaterial:(id)arg1;
- (void)setIndexOfRefraction:(float)arg1;
- (float)indexOfRefraction;
- (void)setReadsFromDepthBuffer:(BOOL)arg1;
- (BOOL)readsFromDepthBuffer;
- (void)setWritesToDepthBuffer:(BOOL)arg1;
- (BOOL)writesToDepthBuffer;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(id)arg2;
- (void)_setupShadableHelperIfNeeded;
- (id)shaderModifiersUniformNames;
- (void)setShaderModifiers:(id)arg1;
- (id)shaderModifiers;
- (void)setFresnelExponent:(float)arg1;
- (float)fresnelExponent;
- (void)setAvoidsOverLighting:(BOOL)arg1;
- (BOOL)avoidsOverLighting;
- (void)setLocksAmbientWithDiffuse:(BOOL)arg1;
- (BOOL)locksAmbientWithDiffuse;
- (id)program;
- (void)setCullMode:(int)arg1;
- (int)cullMode;
- (void)setLitPerPixel:(BOOL)arg1;
- (BOOL)isLitPerPixel;
- (void)setLightingModelName:(id)arg1;
- (id)lightingModelName;
- (void)setTransparencyMode:(int)arg1;
- (int)transparencyMode;
- (void)setTransparency:(float)arg1;
- (float)transparency;
- (void)setShininess:(float)arg1;
- (float)shininess;
- (void)_setAttributes:(id)arg1;
- (id)_property:(id*)arg1;
- (void)_setupMaterialProperty:(id*)arg1;
- (id)normal;
- (id)multiply;
- (id)reflective;
- (id)transparent;
- (id)emission;
- (id)specular;
- (id)diffuse;
- (id)ambient;
- (Class)_materialPropertyClass;
- (struct __C3DEffectCommonProfile { struct __C3DEffectProfile { struct __CFRuntimeBase { unsigned int x_1_2_1; unsigned char x_1_2_2[4]; } x_1_1_1; long x_1_1_2; } x1; struct __C3DMaterial {} *x2; long x3; struct __C3DEffectSlot {} *x4; struct __C3DEffectSlot {} *x5; struct __C3DEffectSlot {} *x6; struct __C3DEffectSlot {} *x7; struct __C3DEffectSlot {} *x8; struct __C3DEffectSlot {} *x9; struct __C3DEffectSlot {} *x10; struct __C3DEffectSlot {} *x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; int x18; boolx19; boolx20; unsigned int x21 : 1; unsigned int x22 : 1; unsigned int x23 : 1; unsigned int x24 : 1; unsigned int x25 : 1; unsigned int x26 : 1; unsigned int x27 : 1; unsigned int x28 : 1; unsigned int x29 : 1; unsigned int x30 : 10; struct __C3DFXProgram {} *x31; }*)commonProfile;
- (id)presentationMaterial;
- (id)initPresentationMaterialWithMaterialRef:(struct __C3DMaterial { }*)arg1;
- (void)setProgram:(id)arg1;
- (struct __C3DMaterial { }*)materialRef;
- (id)initWithMaterialRef:(struct __C3DMaterial { }*)arg1;
- (struct __C3DAnimationChannel { struct __CFRuntimeBase { unsigned int x_1_1_1; unsigned char x_1_1_2[4]; } x1; struct __C3DAnimation {} *x2; struct __CFArray {} *x3; void *x4; struct __C3DModelTarget {} *x5; struct __CFString {} *x6; }*)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
- (void)_syncEntityObjCModel;
- (void)_syncObjCModel;
- (id)presentationInstance;
- (BOOL)isPausedOrPausedByInheritance;
- (struct __C3DAnimationChannel { struct __CFRuntimeBase { unsigned int x_1_1_1; unsigned char x_1_1_2[4]; } x1; struct __C3DAnimation {} *x2; struct __CFArray {} *x3; void *x4; struct __C3DModelTarget {} *x5; struct __CFString {} *x6; }*)copyAnimationChannelForKeyPath:(id)arg1;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(float)arg2;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(id)arg2;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager { struct __CFRuntimeBase { unsigned int x_1_1_1; unsigned char x_1_1_2[4]; } x1; struct __C3DModelValueStorage {} *x2; struct __CFDictionary {} *x3; struct __CFDictionary {} *x4; struct __CFSet {} *x5; struct __CFArray {} *x6; boolx7; boolx8; struct _C3DAnimationPendingEvent {} *x9; struct __C3DAllocator {} *x10; struct __CFDictionary {} *x11; double x12; double x13; struct _opaque_pthread_mutex_t { long x_14_1_1; BOOL x_14_1_2[40]; } x14; int x15; int x16; int x17; int x18; }*)animationManager;
- (void)_syncObjCAnimations;
- (void*)__CFObject;
- (struct __C3DScene { }*)sceneRef;
- (id)scene;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copy;
- (void)removeAnimationForKey:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (id)name;
- (void)setContent:(id)arg1;
- (void)setName:(id)arg1;
- (id)description;
- (id)contents;
- (void)setFillMode:(int)arg1;
- (void)dealloc;
- (void)setContents:(id)arg1;
- (id)init;

@end
