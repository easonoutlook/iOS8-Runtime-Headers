/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TSTTableRepDelegate>, TSTTableInfo, TSTEditingState, TSDKnobTracker<TSTTableKnobTrackerVisitorProtocol>, TSWPStorage, NSMutableArray, TSTAnimation, TSTTableSelection, TSTTableReferences, TSTTableCellTextEditingRep, <TSTTableChromeProvider>, CALayer, <TSTTableAnimationController>, TSTMasterLayout, NSMutableDictionary, <TSTCanvasReferenceController>, TSTCellRegion, NSSet, TSTSelectionDragController, TSDCanvasView, TSDTilingLayer, TSWPHyperlinkField, CAShapeLayer, TSTLayout, TSDEditorController, TSWPTextEditing, TSTSearchReference, TSTTableModel;

@interface TSTTableRep : TSWPTextHostRep <UITextFieldDelegate> {
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mCanvasVisibleRect;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mSearchSelectionBounds;
    TSDTilingLayer *mOverlayTableName;
    TSDTilingLayer *mOverlayFrozenHeaderCorner;
    TSDTilingLayer *mOverlayFrozenHeaderRows;
    TSDTilingLayer *mOverlayFrozenHeaderColumns;
    CALayer *mOverlayFrozenHeaderRowsMask;
    CALayer *mOverlayFrozenHeaderColumnsMask;
    CALayer *mOverlayFrozenHeaderTableBodyMask;
    CALayer *mOverlayFrozenHeaderTableNameMask;
    float mCurrentScreenScale;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    } mDirtyCellRange;
    BOOL mRecursivelyDrawingInContext;
    NSMutableArray *mAnimationStack;
    <TSTTableAnimationController> *mAnimationController;
    TSTTableCellTextEditingRep *mContainedTextEditingRep;
    TSWPTextEditing *mTableNameTextEditing;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    } mControlCellID;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    } mRatingsDragCellID;
    <TSTTableChromeProvider> *mTableChrome;
    TSTTableReferences *mReferences;
    CAShapeLayer *mHighlightedHyperlinkLayer;
    BOOL mIsAspectOperationInProgress;
    BOOL mIsZoomOperationInProgress;
    BOOL mIsZoomToEditOperationInProgress;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    } mZoomToEditVisibleCellRange;
    CAShapeLayer *mFindSelectionHighlightLayer;
    TSTTableSelection *mSourceFillSelection;
    TSTTableSelection *mTargetFillSelection;
    BOOL mWPEndedTableNameEditing;
    BOOL _settingSelection;
    TSTSelectionDragController *mCellDragController;
    BOOL mDragByHandleOnly;
    BOOL mSelectionUsesBezierPath;
    BOOL mSelectsCellOnInitialTap;
    BOOL mUsesWholeChromeResizer;
    <TSTCanvasReferenceController> *mCanvasReferenceController;
    <TSTTableRepDelegate> *mDelegate;
    TSDKnobTracker<TSTTableKnobTrackerVisitorProtocol> *mVisitorKnobTracker;
    NSSet *mVisibleFillKnobs;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    } mEditingHyperlinkCellID;
    TSWPStorage *mHyperlinkParentStorage;
    BOOL mHyperlinkModified;
    BOOL mInspectingHyperlinkInEditingStorage;
    TSWPHyperlinkField *mHyperlinkField;
    CAShapeLayer *mCellEditingMaskLayer;
    NSMutableDictionary *mChildTextReps;
}

@property(readonly) TSTTableInfo * tableInfo;
@property(readonly) TSTTableModel * tableModel;
@property(readonly) TSTEditingState * editingState;
@property(readonly) TSTLayout * tableLayout;
@property(readonly) TSTMasterLayout * masterLayout;
@property <TSTTableAnimationController> * animationController;
@property(readonly) <TSTTableRepDelegate> * delegate;
@property TSTSelectionDragController * cellDragController;
@property(readonly) struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } transformToCanvas;
@property(readonly) struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } transformFromCanvas;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } canvasVisibleRect;
@property(readonly) TSDCanvasView * canvasView;
@property(readonly) TSDEditorController * editorController;
@property(readonly) <TSTTableChromeProvider> * tableChrome;
@property(readonly) <TSTCanvasReferenceController> * canvasReferenceController;
@property(readonly) TSTCellRegion * selectionRegion;
@property(readonly) CALayer * layerForRep;
@property(readonly) TSDKnobTracker<TSTTableKnobTrackerVisitorProtocol> * visitorKnobTracker;
@property struct { unsigned short x1; unsigned char x2; unsigned char x3; } ratingsDragCellID;
@property(readonly) BOOL isZoomToEditOperationInProgress;
@property(readonly) TSTAnimation * currentAnimation;
@property(retain) TSTSearchReference * activeSearchReference;
@property(retain) NSMutableDictionary * childTextReps;

+ (Class)tableRepDelegateClass;

- (void)orientationDidChange:(id)arg1;
- (int)tilingMode;
- (id)tableLayout;
- (BOOL)isDraggable;
- (id).cxx_construct;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)animationController;
- (void)setAnimationController:(id)arg1;
- (id)delegate;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (id)description;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (void)setNeedsDisplay;
- (void)dealloc;
- (void)setChildTextReps:(id)arg1;
- (BOOL)isZoomToEditOperationInProgress;
- (id)visitorKnobTracker;
- (void)setRatingsDragCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })ratingsDragCellID;
- (void)setCellDragController:(id)arg1;
- (id)cellDragController;
- (id)p_textImageForPath:(struct CGPath { }*)arg1 shouldPulsate:(BOOL)arg2;
- (void)invalidateFrozenHeaders;
- (id)currentAnimation;
- (void)invalidateCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)updateDynamicModeForEditingSpillText;
- (BOOL)isFullyVisibleWithBorder:(int)arg1;
- (void)validateStrokesInEditingSpillingTextRange;
- (void)contentsRectForCellRangeAcrossSpaces:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 contentsCenterInfo:(struct { BOOL x1; float x2; float x3; float x4; float x5; float x6; float x7; }*)arg2 canvasFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg3 contentsRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsForCellSelection:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })canvasBoundsForCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)invalidateEditingCell;
- (void)asyncPostTextChangedInRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (BOOL)shouldCommitPendingTextEdit;
- (BOOL)shouldRestartTextEditing;
- (id)selectionRegion;
- (void)popAnimation;
- (void)pushAnimation:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_alignedLayerFrameForLayoutSpace:(id)arg1 transform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg2;
- (id)layerForRep;
- (id)p_tableNameOverlayLayers;
- (void)p_invalidateCellCommentBadges;
- (void)invalidateCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 fittingRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2 invalidateSize:(BOOL)arg3;
- (void)validateFrozenHeaderTableBodyMask;
- (void)validateFrozenHeaderColumns;
- (void)validateFrozenHeaderRows;
- (void)validateFrozenHeaderCorner;
- (void)validateTableName;
- (id)p_frozenHeaderOverlayLayers;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })canvasVisibleRect;
- (void)setNeedsDisplayInCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)dirtyCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)tableChrome;
- (void)validateVisibleRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })deviceBoundsForCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)childTextReps;
- (id)editorSelection;
- (void)invalidateTableName;
- (void)invalidateSelection;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformFromCanvas;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformToCanvas;
- (id)tableInfo;
- (id)editingState;
- (id)masterLayout;
- (BOOL)handlesEditMenu;
- (void)updateChildrenFromLayout;
- (id)repForDragging;
- (id)hitRepChrome:(struct CGPoint { float x1; float x2; })arg1;
- (id)canvasReferenceController;
- (id)additionalLayersOverLayer;
- (id)additionalLayersUnderLayer;
- (BOOL)canDrawInBackgroundDuringScroll;
- (void)screenScaleDidChange;
- (void)invalidateAnnotationColor;
- (BOOL)canDrawTilingLayerInBackground:(id)arg1;
- (void)invalidateComments;
- (id)childReps;
- (id)newCommandToApplyGeometry:(id)arg1 toInfo:(id)arg2;
- (id)itemsToAddToEditMenu;
- (id)canvasView;
- (id)overlayLayers;
- (void)updateFromLayout;
- (id)hitRep:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)canDrawInParallel;
- (BOOL)mustDrawOnMainThreadForInteractiveCanvas;
- (void)addAdditionalChildLayersToArray:(id)arg1;
- (void)viewScaleDidChange;
- (void)endDragInsertFromPalette;
- (void)beginDragInsertFromPalette;
- (id)editorController;
- (void)recursivelyDrawInContext:(struct CGContext { }*)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })layerFrameInScaledCanvas;
- (void)willBeRemoved;
- (void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(BOOL)arg3;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (id)tableModel;

@end
