/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, <TSUMultipleChoiceListChoiceProviding>;

@interface TSCHNumberFormat : NSObject <NSCopying, NSMutableCopying, TSCHDataFormatter, TSCHCustomFormatSupport> {
    struct { 
        int mFormatType; 
        union { 
            struct { 
                unsigned int mCurrencyCodeIndex : 16; 
                unsigned int mDecimalPlaces : 8; 
                unsigned int mNegativeStyle : 3; 
                unsigned int mShowThousandsSeparator : 1; 
                unsigned int mUseAccountingStyle : 1; 
            } mNumberFormatStruct; 
            struct { 
                unsigned int mFractionAccuracy : 8; 
            } mFractionFormatStruct; 
            struct { 
                unsigned int mBase : 8; 
                unsigned int mBasePlaces : 8; 
                unsigned int mBaseUseMinusSign : 1; 
            } mBaseFormatStruct; 
            struct { 
                unsigned int mSuppressDateFormat : 1; 
                unsigned int mSuppressTimeFormat : 1; 
                NSString *mDateTimeFormat; 
            } mDateFormatStruct; 
            struct { 
                unsigned int mUseAutomaticUnits : 1; 
                int mDurationUnitSmallest; 
                int mDurationUnitLargest; 
                int mDurationStyle; 
            } mDurationFormatStruct; 
            struct { 
                unsigned int mCustomFormatID; 
                struct { /* ? */ } *mData; 
            } mCustomFormatStruct; 
            struct { 
                double mMinimum; 
                double mMaximum; 
                double mIncrement; 
                int mDisplayFormatType; 
                unsigned int mOrientation : 2; 
                unsigned int mPosition : 2; 
            } mControlFormatStruct; 
            struct { 
                int mInitialValue; 
                unsigned int mMultipleChoiceListFormatID; 
                <TSUMultipleChoiceListChoiceProviding> *mData; 
            } mMultipleChoiceListFormatStruct; 
        } ; 
    } mFormatStruct;
    NSString *mPrefixString;
    NSString *mSuffixString;
}

@property(readonly) int formatType;
@property(readonly) unsigned int decimalPlaces;
@property(copy,readonly) NSString * currencyCode;
@property(readonly) BOOL useAccountingStyle;
@property(readonly) int negativeStyle;
@property(readonly) BOOL showThousandsSeparator;
@property(readonly) int fractionAccuracy;
@property(copy,readonly) NSString * prefixString;
@property(copy,readonly) NSString * suffixString;
@property(readonly) double scaleFactor;
@property(readonly) unsigned int base;
@property(readonly) unsigned int basePlaces;
@property(readonly) BOOL baseUseMinusSign;
@property(readonly) BOOL usesNumberFormatStruct;
@property(readonly) BOOL isCurrency;
@property(readonly) BOOL isPercentage;
@property(readonly) BOOL isFraction;
@property(readonly) BOOL isBase;

+ (id)automaticDecimalPlaces;
+ (BOOL)defaultBaseUseMinusSign;
+ (unsigned int)defaultBasePlaces;
+ (unsigned int)defaultBase;
+ (int)defaultNegativeNumberStyle;
+ (id)defaultCurrencyCode;
+ (int)defaultFractionAccuracy;
+ (id)defaultDecimalNumberFormat;
+ (int)labelFormatTypeFromTSUFormatType:(int)arg1;
+ (id)numberFormatWithFormatStruct:(struct { int x1; union { struct { unsigned int x_1_2_1 : 16; unsigned int x_1_2_2 : 8; unsigned int x_1_2_3 : 3; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_2_1_1; struct { unsigned int x_2_2_1 : 8; } x_2_1_2; struct { unsigned int x_3_2_1 : 8; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 1; } x_2_1_3; struct { unsigned int x_4_2_1 : 1; unsigned int x_4_2_2 : 1; id x_4_2_3; } x_2_1_4; struct { unsigned int x_5_2_1 : 1; int x_5_2_2; int x_5_2_3; int x_5_2_4; } x_2_1_5; struct { unsigned int x_6_2_1; struct { /* ? */ } *x_6_2_2; } x_2_1_6; struct { double x_7_2_1; double x_7_2_2; double x_7_2_3; int x_7_2_4; unsigned int x_7_2_5 : 2; unsigned int x_7_2_6 : 2; } x_2_1_7; struct { int x_8_2_1; unsigned int x_8_2_2; id x_8_2_3; } x_2_1_8; } x2; })arg1 prefixString:(id)arg2 suffixString:(id)arg3;
+ (id)numberFormatWithFormatType:(int)arg1 decimalPlaces:(unsigned int)arg2 showThousandsSeparator:(BOOL)arg3;
+ (id)instanceWithArchive:(const struct FormatStructArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; unsigned int x4; unsigned int x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x6; unsigned int x7; unsigned int x8; unsigned int x9; boolx10; boolx11; boolx12; boolx13; unsigned int x14; unsigned int x15; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x16; unsigned int x17; unsigned int x18; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x19; double x20; unsigned int x21; unsigned int x22; double x23; double x24; double x25; unsigned int x26; unsigned int x27; boolx28; boolx29; boolx30; boolx31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_37_1_1; int x_37_1_2; int x_37_1_3; int x_37_1_4; } x37; struct IndexSet {} *x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; boolx43; int x44; unsigned int x45[2]; }*)arg1 unarchiver:(id)arg2;

- (int)valueType;
- (struct { int x1; union { struct { unsigned int x_1_2_1 : 16; unsigned int x_1_2_2 : 8; unsigned int x_1_2_3 : 3; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_2_1_1; struct { unsigned int x_2_2_1 : 8; } x_2_1_2; struct { unsigned int x_3_2_1 : 8; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 1; } x_2_1_3; struct { unsigned int x_4_2_1 : 1; unsigned int x_4_2_2 : 1; id x_4_2_3; } x_2_1_4; struct { unsigned int x_5_2_1 : 1; int x_5_2_2; int x_5_2_3; int x_5_2_4; } x_2_1_5; struct { unsigned int x_6_2_1; struct { /* ? */ } *x_6_2_2; } x_2_1_6; struct { double x_7_2_1; double x_7_2_2; double x_7_2_3; int x_7_2_4; unsigned int x_7_2_5 : 2; unsigned int x_7_2_6 : 2; } x_2_1_7; struct { int x_8_2_1; unsigned int x_8_2_2; id x_8_2_3; } x_2_1_8; } x2; })formatStruct;
- (id)prefixString;
- (BOOL)baseUseMinusSign;
- (unsigned int)basePlaces;
- (id)suffixString;
- (BOOL)isCustom;
- (int)fractionAccuracy;
- (int)negativeStyle;
- (BOOL)showThousandsSeparator;
- (id)currencyCode;
- (unsigned int)decimalPlaces;
- (int)formatType;
- (unsigned int)base;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id).cxx_construct;
- (double)scaleFactor;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)init;
- (BOOL)supportsAutoMinMax;
- (BOOL)p_baseUseMinusSignIfAvailable;
- (unsigned int)p_basePlacesIfAvailable;
- (unsigned int)p_baseIfAvailable;
- (BOOL)p_useAccountingStyleIfAvailable;
- (const struct { id x1; id x2; id x3; id x4; double x5; unsigned int x6 : 8; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned short x14; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; }*)p_customFormatData;
- (BOOL)p_hasValidDecimalPlaces;
- (id)p_formatTypeDescription;
- (BOOL)isPercentage;
- (id)p_formattedBodyStringForDouble:(double)arg1;
- (BOOL)isScientific;
- (BOOL)p_baseUseMinusSign;
- (unsigned int)p_basePlaces;
- (unsigned int)p_base;
- (BOOL)isBase;
- (int)p_fractionAccuracyIfAvailable;
- (int)p_fractionAccuracy;
- (BOOL)p_showThousandsSeparatorIfAvailable;
- (BOOL)p_showThousandsSeparator;
- (int)p_negativeStyleIfAvailable;
- (int)p_negativeStyle;
- (BOOL)p_useAccountingStyle;
- (id)p_currencyCodeIfAvailable;
- (id)p_currencyCode;
- (unsigned int)p_decimalPlaces;
- (unsigned int)p_decimalPlacesIfAvailable;
- (BOOL)isCurrency;
- (BOOL)isFraction;
- (BOOL)usesNumberFormatStruct;
- (id)initWithFormatStruct:(struct { int x1; union { struct { unsigned int x_1_2_1 : 16; unsigned int x_1_2_2 : 8; unsigned int x_1_2_3 : 3; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_2_1_1; struct { unsigned int x_2_2_1 : 8; } x_2_1_2; struct { unsigned int x_3_2_1 : 8; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 1; } x_2_1_3; struct { unsigned int x_4_2_1 : 1; unsigned int x_4_2_2 : 1; id x_4_2_3; } x_2_1_4; struct { unsigned int x_5_2_1 : 1; int x_5_2_2; int x_5_2_3; int x_5_2_4; } x_2_1_5; struct { unsigned int x_6_2_1; struct { /* ? */ } *x_6_2_2; } x_2_1_6; struct { double x_7_2_1; double x_7_2_2; double x_7_2_3; int x_7_2_4; unsigned int x_7_2_5 : 2; unsigned int x_7_2_6 : 2; } x_2_1_7; struct { int x_8_2_1; unsigned int x_8_2_2; id x_8_2_3; } x_2_1_8; } x2; })arg1 prefixString:(id)arg2 suffixString:(id)arg3;
- (id)upgradedNumberFormatFromPreUFFOrUnity1_0;
- (id)bakeableNumberFormat;
- (BOOL)isCompatibleWithDataFormatter:(id)arg1;
- (id)chartFormattedInspectorStringForValue:(id)arg1;
- (id)chartFormattedStringForValue:(id)arg1;
- (id)dataFormatterForDocumentRoot:(id)arg1;
- (id)numberFormatByResettingToDefaultNegativeStyleIfAvailable;
- (unsigned int)customFormatListKey;
- (id)initWithArchive:(const struct FormatStructArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; unsigned int x4; unsigned int x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x6; unsigned int x7; unsigned int x8; unsigned int x9; boolx10; boolx11; boolx12; boolx13; unsigned int x14; unsigned int x15; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x16; unsigned int x17; unsigned int x18; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x19; double x20; unsigned int x21; unsigned int x22; double x23; double x24; double x25; unsigned int x26; unsigned int x27; boolx28; boolx29; boolx30; boolx31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_37_1_1; int x_37_1_2; int x_37_1_3; int x_37_1_4; } x37; struct IndexSet {} *x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; boolx43; int x44; unsigned int x45[2]; }*)arg1 unarchiver:(id)arg2;
- (void)saveToArchive:(struct FormatStructArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; unsigned int x4; unsigned int x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x6; unsigned int x7; unsigned int x8; unsigned int x9; boolx10; boolx11; boolx12; boolx13; unsigned int x14; unsigned int x15; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x16; unsigned int x17; unsigned int x18; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x19; double x20; unsigned int x21; unsigned int x22; double x23; double x24; double x25; unsigned int x26; unsigned int x27; boolx28; boolx29; boolx30; boolx31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_37_1_1; int x_37_1_2; int x_37_1_3; int x_37_1_4; } x37; struct IndexSet {} *x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; boolx43; int x44; unsigned int x45[2]; }*)arg1 archiver:(id)arg2;
- (BOOL)useAccountingStyle;

@end
