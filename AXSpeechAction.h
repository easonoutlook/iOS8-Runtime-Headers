/* Generated by RuntimeBrowser.
   Image: /usr/lib/libAXSpeechManager.dylib
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class TTSSpeechRequest, NSString, NSMutableArray;

@interface AXSpeechAction : NSObject  {
    NSString *_string;
    float _pitch;
    float _volume;
    float _speakingRate;
    NSString *_language;
    BOOL _shouldQueue;
    BOOL _cannotInterrupt;
    BOOL _shouldDetectLanguage;
    BOOL _shouldProcessEmoji;
    BOOL _shouldProcessEmoticons;
    BOOL _shouldPrecomposeString;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _completionCallback;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _onPauseCallback;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _onResumeCallback;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _onWillSpeakRangeCallback;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _onSpeechStartCallback;

    TTSSpeechRequest *_speechRequest;
    BOOL _useCompactVoice;
    NSString *_voiceIdentifier;
    NSString *_processedString;
    NSMutableArray *_emojiRangeReplacements;
    int _wordCallbackPostProcessedOffset;
}

@property BOOL shouldQueue;
@property BOOL cannotInterrupt;
@property BOOL shouldDetectLanguage;
@property BOOL shouldProcessEmoji;
@property BOOL shouldProcessEmoticons;
@property BOOL shouldPrecomposeString;
@property(copy) NSString * string;
@property(retain) NSString * language;
@property(retain) NSString * voiceIdentifier;
@property BOOL useCompactVoice;
@property(copy) id completionCallback;
@property(copy) id onPauseCallback;
@property(copy) id onResumeCallback;
@property(copy) id onWillSpeakRangeCallback;
@property(copy) id onSpeechStartCallback;
@property float speakingRate;
@property float pitch;
@property float volume;
@property int wordCallbackPostProcessedOffset;
@property(retain) TTSSpeechRequest * speechRequest;
@property(retain) NSString * processedString;
@property(retain) NSMutableArray * emojiRangeReplacements;

+ (id)actionWithString:(id)arg1 shouldQueue:(BOOL)arg2;

- (void)setWordCallbackPostProcessedOffset:(int)arg1;
- (int)wordCallbackPostProcessedOffset;
- (void)setUseCompactVoice:(BOOL)arg1;
- (BOOL)useCompactVoice;
- (void)setOnSpeechStartCallback:(id)arg1;
- (id)onSpeechStartCallback;
- (void)setOnWillSpeakRangeCallback:(id)arg1;
- (id)onWillSpeakRangeCallback;
- (void)setOnResumeCallback:(id)arg1;
- (id)onResumeCallback;
- (void)setOnPauseCallback:(id)arg1;
- (id)onPauseCallback;
- (void)setCompletionCallback:(id)arg1;
- (id)completionCallback;
- (void)setShouldDetectLanguage:(BOOL)arg1;
- (BOOL)shouldDetectLanguage;
- (void)setShouldPrecomposeString:(BOOL)arg1;
- (BOOL)shouldPrecomposeString;
- (void)setShouldProcessEmoticons:(BOOL)arg1;
- (BOOL)shouldProcessEmoticons;
- (void)setShouldProcessEmoji:(BOOL)arg1;
- (BOOL)shouldProcessEmoji;
- (void)setCannotInterrupt:(BOOL)arg1;
- (BOOL)cannotInterrupt;
- (void)setSpeakingRate:(float)arg1;
- (float)speakingRate;
- (void)setEmojiRangeReplacements:(id)arg1;
- (id)emojiRangeReplacements;
- (id)processedString;
- (void)preprocessAction;
- (void)setProcessedString:(id)arg1;
- (id)_detectLanguageFromContent;
- (void)setPitch:(float)arg1;
- (float)pitch;
- (void)setShouldQueue:(BOOL)arg1;
- (BOOL)shouldQueue;
- (void)setVolume:(float)arg1;
- (float)volume;
- (void)setSpeechRequest:(id)arg1;
- (id)speechRequest;
- (id)voiceIdentifier;
- (void)setVoiceIdentifier:(id)arg1;
- (void)setLanguage:(id)arg1;
- (id)language;
- (void)setString:(id)arg1;
- (id)string;
- (id)description;
- (void)dealloc;
- (id)init;

@end
