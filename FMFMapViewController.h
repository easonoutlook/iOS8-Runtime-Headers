/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/FMFUI.framework/FMFUI
 */

@class FMFMapViewDelegateInternal, MKMapView, UIToolbar, FMFNoLocationView, UIColor, FMF3HiddenMapTrackingHandler, <FMFMapViewControllerDelegate>, NSSet, UIBarButtonItem, UIView, MKUserTrackingBarButtonItem, FMFRefreshBarButtonItem, FMFSession, UIImageView;

@interface FMFMapViewController : UIViewController <FMFSessionDelegate, FMFMapViewDelegateInternalDelegate, FMF3HiddenMapTrackingHandlerDelegate, FMFNoLocationViewDelegate> {
    BOOL _shouldZoomToFitNewLocations;
    BOOL _shouldZoomToFitMeAndLocations;
    BOOL _showFloatingMapLocationButton;
    BOOL _isSimpleMap;
    BOOL _canShowNoLocation;
    BOOL __refreshingIsPaused;
    BOOL __blockDidReceiveAnimation;
    BOOL __isRenderingInitialMap;
    <FMFMapViewControllerDelegate> *_delegate;
    MKMapView *_mapView;
    UIColor *_annotationTintColor;
    FMFSession *_fmfSession;
    FMFMapViewDelegateInternal *_mapViewDelegate;
    NSSet *__preloadedHandles;
    FMFNoLocationView *_noLocationView;
    NSSet *__internalHandlesShowingLocations;
    UIToolbar *_toolbar;
    MKUserTrackingBarButtonItem *_userLocationButton;
    UIBarButtonItem *_openInMapsBarButtonItem;
    UIBarButtonItem *_infoBarButtonItem;
    FMF3HiddenMapTrackingHandler *_hiddenMap;
    UIToolbar *_floatingLocationToolbar;
    UIView *_floatingToolbarView;
    FMFRefreshBarButtonItem *_refreshButton;
    UIImageView *_cachedMapView;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _edgeInsets;
}

@property <FMFMapViewControllerDelegate> * delegate;
@property BOOL shouldZoomToFitNewLocations;
@property BOOL shouldZoomToFitMeAndLocations;
@property BOOL showFloatingMapLocationButton;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property(copy) NSSet * handlesShowingLocations;
@property(retain) MKMapView * mapView;
@property(copy) UIColor * annotationTintColor;
@property(retain) FMFSession * fmfSession;
@property(retain) FMFMapViewDelegateInternal * mapViewDelegate;
@property(retain) NSSet * _preloadedHandles;
@property BOOL isSimpleMap;
@property BOOL canShowNoLocation;
@property(retain) FMFNoLocationView * noLocationView;
@property(retain) NSSet * _internalHandlesShowingLocations;
@property BOOL _refreshingIsPaused;
@property BOOL _blockDidReceiveAnimation;
@property BOOL _isRenderingInitialMap;
@property(retain) UIToolbar * toolbar;
@property(retain) MKUserTrackingBarButtonItem * userLocationButton;
@property(retain) UIBarButtonItem * openInMapsBarButtonItem;
@property(retain) UIBarButtonItem * infoBarButtonItem;
@property(retain) FMF3HiddenMapTrackingHandler * hiddenMap;
@property(retain) UIToolbar * floatingLocationToolbar;
@property(retain) UIView * floatingToolbarView;
@property(retain) FMFRefreshBarButtonItem * refreshButton;
@property(retain) UIImageView * cachedMapView;

+ (id)smallAnnotationViewImageWithTintColor:(id)arg1;
+ (id)smallAnnotationViewImage;
+ (struct CGSize { float x1; float x2; })annotationImageSize;

- (void)loadDelegate;
- (void)didStopAbilityToGetLocationForHandle:(id)arg1;
- (void)didReceiveLocation:(id)arg1;
- (id)floatingToolbarView;
- (id)floatingLocationToolbar;
- (id)infoBarButtonItem;
- (id)openInMapsBarButtonItem;
- (BOOL)showFloatingMapLocationButton;
- (void)zoomAndSelectHandle:(id)arg1;
- (void)setHandlesShowingLocations:(id)arg1;
- (void)setShowFloatingMapLocationButton:(BOOL)arg1;
- (void)resumeRefreshingLocations;
- (void)stopRefreshingLocations;
- (void)hiddenMapTrackerDidUpdateMapToTrackingType:(int)arg1;
- (void)mapViewDidFinishRenderingMap;
- (void)didUpdateUserLocation:(id)arg1;
- (void)reZoomToFit;
- (void)regionDidChangeAnimated:(BOOL)arg1;
- (void)regionWillChangeAnimated:(BOOL)arg1;
- (void)didDeselectLocation:(id)arg1;
- (void)didSelectLocation:(id)arg1;
- (id)annotationTintColor;
- (id)_selectedHandleAnnotation;
- (void)setShouldZoomToFitMeAndLocations:(BOOL)arg1;
- (void)didReceiveLocationForDelegateCallback:(id)arg1;
- (BOOL)sessionContainsHandle:(id)arg1;
- (void)setFmfSession:(id)arg1;
- (id)refreshButton;
- (void)removeAnnotationsFromMapForHandle:(id)arg1;
- (void)stopShowingLocationsForHandles:(id)arg1;
- (void)addFloatingToolbar;
- (void)set_refreshingIsPaused:(BOOL)arg1;
- (BOOL)_blockDidReceiveAnimation;
- (BOOL)shouldZoomToFitNewLocations;
- (id)locationOnMapForHandle:(id)arg1;
- (BOOL)mapHasUserLocations;
- (id)noLocationView;
- (BOOL)canShowNoLocation;
- (void)_updateTitleViewLocation:(id)arg1;
- (void)updateRefreshForLocation:(id)arg1;
- (void)updateMapWithNewLocation:(id)arg1 animated:(BOOL)arg2;
- (void)set_internalHandlesShowingLocations:(id)arg1;
- (id)_preloadedHandles;
- (void)setMapViewDelegate:(id)arg1;
- (id)_internalHandlesShowingLocations;
- (id)fmfSession;
- (BOOL)_refreshingIsPaused;
- (void)removeHandlesFromSession;
- (BOOL)_isRenderingInitialMap;
- (void)hideCachedMap;
- (void)updateNoLocationView;
- (void)setCanShowNoLocation:(BOOL)arg1;
- (BOOL)shouldZoomToFitMeAndLocations;
- (id)mapViewDelegate;
- (void)loadCachedLocationsForHandles;
- (void)addHandlesToSession;
- (void)set_blockDidReceiveAnimation:(BOOL)arg1;
- (id)handlesShowingLocations;
- (void)setUserLocationButton:(id)arg1;
- (id)hiddenMap;
- (void)setHiddenMap:(id)arg1;
- (id)_internalAnnotationTintColor;
- (void)setFloatingLocationToolbar:(id)arg1;
- (void)setFloatingToolbarView:(id)arg1;
- (void)setCachedMapView:(id)arg1;
- (void)setNoLocationView:(id)arg1;
- (id)userLocationButton;
- (void)setInfoBarButtonItem:(id)arg1;
- (void)infoButtonTapped:(id)arg1;
- (void)setOpenInMapsBarButtonItem:(id)arg1;
- (void)openInMapsButtonTapped:(id)arg1;
- (void)enablePreloadedHandles;
- (void)setRefreshButton:(id)arg1;
- (void)refreshButtonTapped:(id)arg1;
- (id)cachedMapView;
- (BOOL)isSimpleMap;
- (void)set_isRenderingInitialMap:(BOOL)arg1;
- (void)setShouldZoomToFitNewLocations:(BOOL)arg1;
- (void)setIsSimpleMap:(BOOL)arg1;
- (void)set_preloadedHandles:(id)arg1;
- (void)initializeDefaults;
- (id)personImageForNoLocationView;
- (void)dismiss:(id)arg1;
- (id)titleViewForSelectedHandle;
- (id)annotationImageForHandle:(id)arg1;
- (void)startShowingLocationsForHandles:(id)arg1;
- (id)initWithDelegate:(id)arg1 handles:(id)arg2;
- (void)setAnnotationTintColor:(id)arg1;
- (id)initSimpleMapWithDelegate:(id)arg1 handles:(id)arg2;
- (void)zoomToFit;
- (void).cxx_destruct;
- (void)setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setToolbar:(id)arg1;
- (id)toolbar;
- (void)viewWillDisappear:(BOOL)arg1;
- (void)viewDidAppear:(BOOL)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)arg1;
- (void)loadView;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;
- (void)didReceiveMemoryWarning;
- (id)delegate;
- (id)mapView;
- (void)setMapView:(id)arg1;
- (void)destroySession;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)init;

@end
