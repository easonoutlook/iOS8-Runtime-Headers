/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class <GEORoutePreloadSession>, VKPolylineOverlayPainter, VKMapModel, VKCamera, VKMapCameraController, VKStyleManager, <VKTrackableAnnotation>, GEOMapRegion, NSArray, VKAnchorWrapper, <VKRouteMatchedAnnotationPresentation>, <VKInteractiveMapDelegate>;

@interface VKMapCanvas : VKScreenCanvas <VKMapModelDelegate, VKOverlayContainerRouteDelegate, VKInteractiveMap> {
    VKMapModel *_map;
    VKMapCameraController *_cameraController;
    <VKInteractiveMapDelegate> *_delegate;
    struct CGSize { 
        float width; 
        float height; 
    } _lastCanvasSize;
    VKCamera *_defaultTrackingCamera;
    float _lastValidCanvasSizeZoomLevel;
    BOOL _hasLastValidCanvasSizeZoomLevel;
}

@property BOOL shouldLoadFallbackTiles;
@property BOOL shouldLoadMapMargin;
@property <VKInteractiveMapDelegate> * delegate;
@property BOOL staysCenteredDuringPinch;
@property BOOL staysCenteredDuringRotation;
@property BOOL isPitchable;
@property(getter=isPitched,readonly) BOOL pitched;
@property BOOL trafficEnabled;
@property(retain) VKStyleManager * styleManager;
@property int mapType;
@property(readonly) double minimumZoomLevel;
@property(readonly) double maximumZoomLevel;
@property BOOL dynamicMapModesEnabled;
@property(retain) GEOMapRegion * mapRegion;
@property(readonly) double yaw;
@property struct { double x1; double x2; double x3; } centerCoordinate;
@property BOOL allowDatelineWraparound;
@property int trackingCameraPanStyle;
@property double trackingZoomScale;
@property(retain) VKCamera * defaultTrackingCamera;
@property BOOL labelMarkerSelectionEnabled;
@property(retain) VKPolylineOverlayPainter * focusedLabelsPolylinePainter;
@property(retain) <GEORoutePreloadSession> * routePreloadSession;
@property(readonly) VKMapModel * map;
@property BOOL debugDynamicMapModesEnabled;
@property <VKRouteMatchedAnnotationPresentation> * routeLineSplitAnnotation;
@property double userZoomFocusStyleGroundspanMeters;
@property double userZoomFocusStyleMinGroundspanMeters;
@property double userZoomFocusStyleMaxGroundspanMeters;
@property(getter=isFullyPitched,readonly) BOOL fullyPitched;
@property int shieldSize;
@property int navigationShieldSize;
@property int shieldIdiom;
@property BOOL showsPointsOfInterest;
@property BOOL showsBuildings;
@property struct PolylineCoordinate { unsigned int x1; float x2; } routeUserOffset;
@property(retain) NSArray * externalTrafficIncidents;
@property BOOL localizeLabels;
@property int labelScaleFactor;
@property(readonly) GEOMapRegion * mapRegionOfInterest;
@property(readonly) double presentationYaw;
@property(readonly) double pitch;
@property(readonly) double altitude;
@property int annotationTrackingZoomStyle;
@property(getter=isAnimatingToTrackAnnotation,readonly) BOOL animatingToTrackAnnotation;
@property(readonly) <VKTrackableAnnotation> * trackingAnnotation;
@property(getter=isTrackingHeading,readonly) BOOL trackingHeading;
@property(readonly) NSArray * visibleTileSets;
@property(getter=isFullyDrawn,readonly) BOOL fullyDrawn;
@property(readonly) VKAnchorWrapper * externalAnchors;

+ (BOOL)supportsMapType:(int)arg1 scale:(int)arg2;

- (id)defaultTrackingCamera;
- (void)cameraController:(id)arg1 canZoomOutDidChange:(BOOL)arg2;
- (void)cameraController:(id)arg1 canZoomInDidChange:(BOOL)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (void)cameraController:(id)arg1 pouncingToCameraPosition:(struct VKPoint { double x1; double x2; double x3; })arg2 orientation:(const struct { double x1[4][4]; }*)arg3;
- (void)gglWillDrawWithTimestamp;
- (struct CGPoint { float x1; float x2; })_centerScreenPoint;
- (void)overlayContainer:(id)arg1 updatedMatchedSection:(struct fast_shared_ptr<vk::RouteLineSection> { struct _fast_shared_ptr_control {} *x1; })arg2 index:(struct PolylineCoordinate { unsigned int x1; float x2; }*)arg3;
- (void)mapModel:(id)arg1 didUpdateContainsOverlay:(BOOL)arg2;
- (void)mapModel:(id)arg1 didUpdateNavigationPuckSize:(float)arg2;
- (void)mapModel:(id)arg1 willTransitionFrom:(int)arg2 to:(int)arg3 duration:(double)arg4;
- (void)mapModel:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (double)mapModelZoomScale:(id)arg1;
- (BOOL)mapModelInNavAtDefaultZoom:(id)arg1;
- (void)mapModelDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapModelDidFinishLoadingTiles:(id)arg1;
- (void)mapModelDidStartLoadingTiles:(id)arg1;
- (void)mapModelDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(BOOL)arg2;
- (void)mapModelWillBecomFullyDrawn:(id)arg1;
- (void)mapModelDidBecomePartiallyDrawn:(id)arg1;
- (id)mapModel:(id)arg1 painterForOverlay:(id)arg2;
- (void)mapModel:(id)arg1 needsPanByOffset:(struct CGPoint { float x1; float x2; })arg2 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg3 animated:(BOOL)arg4 duration:(double)arg5 completionHandler:(id)arg6;
- (BOOL)mapModelInNav:(id)arg1;
- (struct VKPoint { double x1; double x2; double x3; })screenPointForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)navTileSource;
- (void)setDefaultTrackingCamera:(id)arg1;
- (void)_updateViewTransform;
- (void)stopRegionAnimation;
- (BOOL)trackingCanZoomOut;
- (BOOL)trackingCanZoomIn;
- (void)setStylesheetMapDisplayStyle:(unsigned int)arg1;
- (void)setCenterCoordinate:(struct { double x1; double x2; double x3; })arg1;
- (void)setMapRegion:(id)arg1;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (double)userZoomFocusStyleMaxGroundspanMeters;
- (void)setUserZoomFocusStyleMaxGroundspanMeters:(double)arg1;
- (double)userZoomFocusStyleMinGroundspanMeters;
- (void)setUserZoomFocusStyleMinGroundspanMeters:(double)arg1;
- (double)userZoomFocusStyleGroundspanMeters;
- (void)setUserZoomFocusStyleGroundspanMeters:(double)arg1;
- (void)setDebugDynamicMapModesEnabled:(BOOL)arg1;
- (BOOL)debugDynamicMapModesEnabled;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { struct VKPoint { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2; BOOL x3; }*)arg2;
- (void)goToTileX:(int)arg1 Y:(int)arg2 Z:(int)arg3 tileSize:(int)arg4;
- (BOOL)isFullyDrawn;
- (void)stopSnappingAnimations;
- (BOOL)isPointValidForGesturing:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePanWithTranslation:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1 panAtStartPoint:(BOOL)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2;
- (void)resetRenderQueue:(struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (BOOL)currentSceneRequiresMSAA;
- (void)setFocusedLabelsPolylinePainter:(id)arg1;
- (id)focusedLabelsPolylinePainter;
- (BOOL)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (void)setCurrentLocationText:(id)arg1;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (BOOL)isAnimatingToTrackAnnotation;
- (void)setTrackingZoomScale:(double)arg1;
- (double)trackingZoomScale;
- (id)labelMarkers;
- (id)selectedLabelMarker;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)panWithOffset:(struct CGPoint { float x1; float x2; })arg1 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg2 animated:(BOOL)arg3 duration:(double)arg4 completionHandler:(id)arg5;
- (BOOL)isFullyPitched;
- (BOOL)isPitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 selectableLabelsOnly:(BOOL)arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 avoidCurrent:(BOOL)arg2;
- (id)routePreloadSession;
- (void)setRoutePreloadSession:(id)arg1;
- (void)preloadNavigationSceneResourcesWithDevice:(const struct shared_ptr<ggl::Device> { struct Device {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (int)trackingCameraPanStyle;
- (void)setTrackingCameraPanStyle:(int)arg1;
- (void)setShouldLimitTrackingCameraHeight:(BOOL)arg1;
- (void)transitionToTracking:(BOOL)arg1 mapMode:(int)arg2 pounceCompletionHandler:(id)arg3;
- (void)pauseTracking;
- (void)stopTracking;
- (void)updateCameraContext:(id)arg1;
- (void)edgeInsetsWillBeginAnimating;
- (void)edgeInsetsDidEndAnimating;
- (struct CGPoint { float x1; float x2; })convertCoordinateToCameraModelPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertCoordinateToPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertMapPointToPoint:(struct { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToMapPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinate:(struct CGPoint { float x1; float x2; })arg1;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4 completion:(id)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4;
- (void)setYaw:(double)arg1 animated:(BOOL)arg2;
- (id)initShouldRasterize:(BOOL)arg1 contentScale:(float)arg2 target:(id)arg3 device:(const struct shared_ptr<ggl::Device> { struct Device {} *x1; struct __shared_weak_count {} *x2; }*)arg4 inBackground:(BOOL)arg5 locale:(id)arg6;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(id)arg6 completion:(id)arg7;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (void)setCenterCoordinate:(struct { double x1; double x2; double x3; })arg1 animated:(BOOL)arg2;
- (id)consoleString:(BOOL)arg1;
- (id)mapRegionOfInterest;
- (id)mapRegion;
- (void)setMapRegion:(id)arg1 animated:(BOOL)arg2;
- (double)altitude;
- (double)presentationYaw;
- (void)_setStyleTransitionProgress:(float)arg1 targetStyle:(unsigned int)arg2 step:(int)arg3;
- (float)_styleTransitionProgress;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(unsigned int)arg2 setupHandler:(id)arg3;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned int)arg1 toStyle:(unsigned int)arg2;
- (void)resetTileContainers;
- (BOOL)canEnter3DMode;
- (void)stylesheetAnimationDidEnd:(BOOL)arg1;
- (void)transferCamera:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (id)externalAnchors;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(BOOL)arg2 animated:(BOOL)arg3;
- (void)stopTrackingAnnotation;
- (BOOL)isTrackingHeading;
- (id)trackingAnnotation;
- (void)deselectLabelMarker;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (id)routeLineSplitAnnotation;
- (void)addOverlay:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (id)overlays;
- (void)addPersistentOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (id)persistentOverlays;
- (void)selectAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)removeAnnotationMarker:(id)arg1;
- (id)annotationMarkers;
- (id)selectedAnnotationMarker;
- (void)setAnnotationMarkerDeselectionCallback:(id)arg1;
- (id)annotationMarkerDeselectionCallback;
- (void)setExternalTrafficIncidents:(id)arg1;
- (id)externalTrafficIncidents;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (void)setAnnotationTrackingZoomStyle:(int)arg1;
- (int)annotationTrackingZoomStyle;
- (void)setCanonicalSkyHeight:(double)arg1;
- (void)setDynamicMapModesEnabled:(BOOL)arg1;
- (BOOL)dynamicMapModesEnabled;
- (void)setDesiredMapMode:(int)arg1 immediate:(BOOL)arg2;
- (void)setShowsBuildings:(BOOL)arg1;
- (BOOL)showsBuildings;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (BOOL)showsPointsOfInterest;
- (void)setShieldIdiom:(int)arg1;
- (int)shieldIdiom;
- (void)setNavigationShieldSize:(int)arg1;
- (int)navigationShieldSize;
- (void)setShieldSize:(int)arg1;
- (int)shieldSize;
- (double)zoomLevelAdjustmentForTileSize:(int)arg1;
- (double)currentZoomLevelForTileSize:(int)arg1;
- (double)currentZoomLevel;
- (double)maximumZoomLevelForTileSize:(int)arg1;
- (double)maximumZoomLevel;
- (double)topDownMinimumZoomLevelForTileSize:(int)arg1;
- (double)minimumZoomLevelForTileSize:(int)arg1;
- (double)minimumZoomLevel;
- (BOOL)canZoomOutForTileSize:(int)arg1;
- (BOOL)canZoomInForTileSize:(int)arg1;
- (id)detailedDescription;
- (BOOL)shouldLoadMapMargin;
- (void)setShouldLoadMapMargin:(BOOL)arg1;
- (BOOL)shouldLoadFallbackTiles;
- (void)setShouldLoadFallbackTiles:(BOOL)arg1;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)clearSceneIsEffectivelyHidden:(BOOL)arg1;
- (void)clearScene;
- (void)setMapType:(int)arg1;
- (BOOL)isPitchable;
- (void)setIsPitchable:(BOOL)arg1;
- (BOOL)staysCenteredDuringRotation;
- (void)setStaysCenteredDuringRotation:(BOOL)arg1;
- (BOOL)staysCenteredDuringPinch;
- (void)setLabelScaleFactor:(int)arg1;
- (int)labelScaleFactor;
- (void)setLocalizeLabels:(BOOL)arg1;
- (BOOL)localizeLabels;
- (void)setStaysCenteredDuringPinch:(BOOL)arg1;
- (BOOL)currentZoomLevelAllowsRotation;
- (id)map;
- (void)updateCameraForFrameResize;
- (void)setTrafficEnabled:(BOOL)arg1;
- (BOOL)trafficEnabled;
- (void)setTargetDisplay:(int)arg1;
- (int)targetDisplay;
- (void)reloadStylesheet;
- (void)setStyleManager:(id)arg1;
- (id)styleManager;
- (void)setStylesheetName:(id)arg1;
- (BOOL)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
- (id)visibleTileSets;
- (int)mapType;
- (void)forceSceneLoad;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (BOOL)labelMarkerSelectionEnabled;
- (void)setApplicationState:(unsigned int)arg1;
- (void)_resetMaximumZoomLevel;
- (void)_setMaximumZoomLevel:(double)arg1;
- (void)setAllowDatelineWraparound:(BOOL)arg1;
- (BOOL)allowDatelineWraparound;
- (double)yaw;
- (double)pitch;
- (id)annotationCoordinateTest;
- (id)annotationRectTest;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (id).cxx_construct;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;
- (id)delegate;
- (void)setHidden:(BOOL)arg1;
- (void)setNeedsDisplay;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (void)setContentsScale:(float)arg1;

@end
