/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSTTableFilterSet, TSWPShapeStyle, TSWPStorage, NSString, TSTSortRuleReferenceTracker, TSCECalculationEngine, TSCEOwnerFormulaMap, TSTTableStyle, TSDFill, TSTConditionalStyleFormulaOwner, TSTTableDataStore, TSTCellDictionary, TSKDocumentRoot, TSTTableSortOrder, TSTHiddenStateFormulaOwner, TSWPParagraphStyle, TSCECellCoordinateVector, TSTCellStyle, NSArray, TSTCell, TSDStroke;

@interface TSTTableModel : TSPObject <TSTTableStrokeProviding> {
    TSTTableDataStore *mDataStore;
    struct __CFUUID { } *mTableID;
    struct __CFUUID { } *mFromTableID;
    unsigned short mNumberOfRows;
    unsigned short mNumberOfColumns;
    unsigned short mNumberOfHeaderRows;
    unsigned short mNumberOfHeaderColumns;
    unsigned short mNumberOfFooterRows;
    BOOL mHeaderRowsFrozen;
    BOOL mHeaderColumnsFrozen;
    unsigned short mNumberOfHiddenRows;
    unsigned short mNumberOfHiddenColumns;
    unsigned short mNumberOfUserHiddenRows;
    unsigned short mNumberOfUserHiddenColumns;
    unsigned short mNumberOfFilteredRows;
    float mDefaultRowHeight;
    float mDefaultColumnWidth;
    NSString *mTableName;
    BOOL mTableNameEnabled;
    float mTableNameHeight;
    BOOL mTableNameBorderEnabled;
    BOOL mRepeatingHeaderRowsEnabled;
    BOOL mRepeatingHeaderColumnsEnabled;
    TSTHiddenStateFormulaOwner *mHiddenStateFormulaOwnerForRows;
    TSTHiddenStateFormulaOwner *mHiddenStateFormulaOwnerForColumns;
    TSTSortRuleReferenceTracker *mSortRuleReferenceTracker;
    unsigned int mPresetID;
    BOOL mStyleApplyClearsAll;
    struct { 
        TSTTableStyle *tableStyle; 
        TSTCellStyle *bodyCellStyle; 
        TSTCellStyle *headerRowCellStyle; 
        TSTCellStyle *headerColumnCellStyle; 
        TSTCellStyle *footerRowCellStyle; 
        TSWPParagraphStyle *bodyTextStyle; 
        TSWPParagraphStyle *headerRowTextStyle; 
        TSWPParagraphStyle *headerColumnTextStyle; 
        TSWPParagraphStyle *footerRowTextStyle; 
        TSWPParagraphStyle *tableNameStyle; 
        TSWPShapeStyle *tableNameShapeStyle; 
    } mStyles;
    struct _TSTDefaultCellBlock { 
        TSTCell *defaultBodyCell; 
        TSTCell *defaultHeaderRowCell; 
        TSTCell *defaultHeaderColumnCell; 
        TSTCell *defaultFooterRowCell; 
    } mDefaultCells;
    TSCEOwnerFormulaMap *mFormulasForUndo;
    TSCECalculationEngine *mCalcEngine;
    TSTCellDictionary *mCellsPendingWrite;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } mCellsToInvalidateAfterRecalcLock;
    TSCECellCoordinateVector *mCellsToInvalidateAfterRecalc;
    TSCECellCoordinateVector *mCellsToInvalidateNonoverflowingAfterRecalc;
    TSTConditionalStyleFormulaOwner *mConditionalStyleFormulaOwner;
    TSWPStorage *mDeprecatedProvider;
    BOOL mWasUnarchivedFromAProvidedTable;
    TSTTableFilterSet *mFilterSet;
    TSTTableSortOrder *mSortOrder;
    TSCEOwnerFormulaMap *_formulasForUndo;
}

@property(readonly) TSKDocumentRoot * documentRoot;
@property TSCECalculationEngine * calcEngine;
@property(retain) TSCEOwnerFormulaMap * formulasForUndo;
@property(readonly) struct __CFUUID { }* tableID;
@property(readonly) struct __CFUUID { }* fromTableID;
@property(retain) NSString * tableName;
@property BOOL tableNameEnabled;
@property float tableNameHeight;
@property BOOL tableNameBorderEnabled;
@property(readonly) TSDStroke * tableNameBorderStroke;
@property BOOL repeatingHeaderRowsEnabled;
@property BOOL repeatingHeaderColumnsEnabled;
@property BOOL styleApplyClearsAll;
@property(readonly) BOOL hasTableBorder;
@property(readonly) BOOL hasAlternatingRows;
@property(readonly) int tableWritingDirection;
@property unsigned short numberOfRows;
@property unsigned short numberOfColumns;
@property unsigned short numberOfHeaderRows;
@property unsigned short numberOfFooterRows;
@property unsigned short numberOfHeaderColumns;
@property(readonly) unsigned short numberOfHiddenRows;
@property(readonly) unsigned short numberOfHiddenColumns;
@property(readonly) unsigned short numberOfUserHiddenRows;
@property(readonly) unsigned short numberOfUserHiddenColumns;
@property(readonly) unsigned short numberOfVisibleBodyRows;
@property(readonly) unsigned short numberOfVisibleBodyColumns;
@property unsigned int presetID;
@property BOOL headerRowsFrozen;
@property BOOL headerColumnsFrozen;
@property(readonly) TSTTableStyle * tableStyle;
@property(readonly) TSTCellStyle * bodyCellStyle;
@property(readonly) TSTCellStyle * headerRowCellStyle;
@property(readonly) TSTCellStyle * headerColumnCellStyle;
@property(readonly) TSTCellStyle * footerRowCellStyle;
@property(readonly) TSWPParagraphStyle * bodyTextStyle;
@property(readonly) TSWPParagraphStyle * headerRowTextStyle;
@property(readonly) TSWPParagraphStyle * headerColumnTextStyle;
@property(readonly) TSWPParagraphStyle * footerRowTextStyle;
@property(readonly) TSWPParagraphStyle * tableNameStyle;
@property(readonly) TSWPShapeStyle * tableNameShapeStyle;
@property(readonly) TSTCell * defaultBodyCell;
@property(readonly) TSTCell * defaultHeaderRowCell;
@property(readonly) TSTCell * defaultHeaderColumnCell;
@property(readonly) TSTCell * defaultFooterRowCell;
@property(readonly) TSDFill * backgroundFill;
@property(readonly) TSDFill * bodyFill;
@property(readonly) TSDFill * headerColumnsFill;
@property(readonly) TSDFill * headerRowsFill;
@property(readonly) TSDFill * footerRowsFill;
@property TSTConditionalStyleFormulaOwner * conditionalStyleFormulaOwner;
@property(readonly) TSTHiddenStateFormulaOwner * hiddenStateFormulaOwnerForRows;
@property(readonly) TSTHiddenStateFormulaOwner * hiddenStateFormulaOwnerForColumns;
@property(readonly) TSTSortRuleReferenceTracker * sortRuleReferenceTracker;
@property(copy) TSTTableFilterSet * filterSet;
@property BOOL wasUnarchivedFromAProvidedTable;
@property(readonly) TSTCellDictionary * cellsPendingWrite;
@property(readonly) TSCECellCoordinateVector * cellsToInvalidateAfterRecalc;
@property(readonly) TSCECellCoordinateVector * cellsToInvalidateNonoverflowingAfterRecalc;
@property(copy) TSTTableSortOrder * sortOrder;
@property NSArray * rowHeights;
@property NSArray * columnWidths;
@property(readonly) TSDStroke * borderStrokeEvenIfNotVisible;
@property(readonly) TSDStroke * defaultHorizontalBorderStroke;
@property(readonly) TSDStroke * defaultVerticalBorderStroke;
@property(readonly) TSDStroke * bodyColumnStroke;
@property(readonly) TSDStroke * bodyRowStroke;
@property(readonly) TSDStroke * headerColumnBorderStroke;
@property(readonly) TSDStroke * headerColumnBodyColumnStroke;
@property(readonly) TSDStroke * headerColumnBodyRowStroke;
@property(readonly) TSDStroke * headerColumnSeparatorStroke;
@property(readonly) TSDStroke * headerRowBorderStroke;
@property(readonly) TSDStroke * headerRowBodyColumnStroke;
@property(readonly) TSDStroke * headerRowBodyRowStroke;
@property(readonly) TSDStroke * headerRowSeparatorStroke;
@property(readonly) TSDStroke * footerRowBorderStroke;
@property(readonly) TSDStroke * footerRowBodyColumnStroke;
@property(readonly) TSDStroke * footerRowBodyRowStroke;
@property(readonly) TSDStroke * footerRowSeparatorStroke;

+ (void)load;
+ (void)chooseUniqueNameForTables:(id)arg1 inContainer:(id)arg2 forPaste:(BOOL)arg3;
+ (struct __CFDictionary { }*)newIDMapForPastedTablesInDrawables:(id)arg1 calculationEngine:(id)arg2;
+ (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForTableArea:(int)arg1 givenTableSize:(struct { unsigned short x1; unsigned short x2; })arg2 numberOfHeaderRows:(unsigned short)arg3 numberOfFooterRows:(unsigned short)arg4 numberOfHeaderColumns:(unsigned short)arg5;
+ (int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalRows:(unsigned short)arg5;
+ (id)unnamedTableString;

- (unsigned short)numberOfHiddenRows;
- (id)columnWidths;
- (id)bodyTextStyle;
- (void)setBodyTextStyle:(id)arg1;
- (id)documentRoot;
- (id)tableStyle;
- (id)tableName;
- (void)setNumberOfColumns:(unsigned short)arg1;
- (id).cxx_construct;
- (void)setNumberOfRows:(unsigned short)arg1;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })range;
- (id)sortOrder;
- (void)setSortOrder:(id)arg1;
- (unsigned short)numberOfRows;
- (void)validate;
- (unsigned short)numberOfColumns;
- (void)dealloc;
- (id)init;
- (void)setTableName:(id)arg1;
- (void)setFormulasForUndo:(id)arg1;
- (id)formulasForUndo;
- (void)setCalcEngine:(id)arg1;
- (id)cellsToInvalidateNonoverflowingAfterRecalc;
- (id)cellsToInvalidateAfterRecalc;
- (id)cellsPendingWrite;
- (void)setWasUnarchivedFromAProvidedTable:(BOOL)arg1;
- (BOOL)wasUnarchivedFromAProvidedTable;
- (unsigned short)numberOfUserHiddenColumns;
- (unsigned short)numberOfUserHiddenRows;
- (unsigned short)numberOfHiddenColumns;
- (void)transformStrokes:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1 transformedObjects:(id)arg2 inBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })minPopulatedCellRange;
- (void)private_validateMergeCellsPedantically;
- (void)validateStyles;
- (void)moveCalcEngineReferencesFromSourceTable:(struct __CFUUID { }*)arg1 sourceRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2 sourceOffset:(struct { int x1; int x2; })arg3;
- (BOOL)cellWasModifiedInCurrentRecalcCycle:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (BOOL)hasFormulas;
- (struct { struct { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })referenceToHiddenStateFromColumn:(unsigned char)arg1 toColumn:(unsigned char)arg2;
- (struct { struct { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })referenceToHiddenStateFromRow:(unsigned short)arg1 toRow:(unsigned short)arg2;
- (void)copyPasteboardCustomFormatsToDocumentAndUpdateCellsInRegion:(id)arg1;
- (void)remapTableIDsInFormulasWithMap:(struct __CFDictionary { }*)arg1 calcEngine:(id)arg2;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)defaultStrokesForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 outTopStroke:(id*)arg2 outLeftStroke:(id*)arg3 outBottomStroke:(id*)arg4 outRightStroke:(id*)arg5;
- (id)footerRowsFill;
- (id)headerRowsFill;
- (id)headerColumnsFill;
- (id)bodyFill;
- (id)backgroundFill;
- (id)mergedGridIndicesForDirection:(int)arg1;
- (BOOL)hasMergeRanges;
- (unsigned short)numberOfVisibleBodyColumns;
- (unsigned short)numberOfVisibleBodyRows;
- (int)hidingStateForColumn:(unsigned char)arg1;
- (int)hidingStateForRow:(unsigned short)arg1;
- (BOOL)isColumnHidden:(unsigned char)arg1 forAction:(int)arg2;
- (BOOL)isRowHidden:(unsigned short)arg1 forAction:(int)arg2;
- (void)setRowHeights:(id)arg1;
- (void)setColumnWidths:(id)arg1;
- (id)rowHeights;
- (void)setWidth:(float)arg1 ofColumn:(unsigned char)arg2;
- (void)setHeight:(float)arg1 ofRow:(unsigned short)arg2;
- (id)rowNameForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 cellRangeContainingName:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; }*)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)columnNameForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 cellRangeContainingName:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; }*)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)applyCellDiff:(id)arg1 atCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (int)defaultCell:(id)arg1 forTableArea:(int)arg2;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2;
- (id)bandedFillObject;
- (BOOL)useBandedFill;
- (id)defaultHeaderColumnCell;
- (id)defaultHeaderRowCell;
- (id)defaultFooterRowCell;
- (id)defaultBodyCell;
- (void)clearFromTableID;
- (BOOL)hasActiveFilters;
- (void)setFilterRulesAtAbsoluteIndices:(id)arg1 enabled:(BOOL)arg2;
- (void)enableFilterSet:(BOOL)arg1;
- (void)enableFilter:(BOOL)arg1 atIndex:(unsigned int)arg2;
- (void)enableRule:(BOOL)arg1 atIndex:(unsigned int)arg2 inFilterIndex:(unsigned int)arg3;
- (void)mutateFormulaFiltersUsingBlock:(id)arg1;
- (void)setNeedsFilterFormulaRewriteForImport:(BOOL)arg1;
- (BOOL)needsFilterFormulaRewriteForImport;
- (id)removeFilterRules:(id)arg1;
- (id)duplicateFilterSet;
- (void)setFilterSet:(id)arg1;
- (void)resetSortRuleReferenceTrackerForInsert;
- (void)setConditionalStyleFormulaOwner:(id)arg1;
- (id)tableNameBorderStroke;
- (int)tableWritingDirection;
- (BOOL)hasAlternatingRows;
- (BOOL)hasTableBorder;
- (void)setFooterRowTextStyle:(id)arg1;
- (void)setHeaderColumnTextStyle:(id)arg1;
- (void)setHeaderRowTextStyle:(id)arg1;
- (void)setFooterRowCellStyle:(id)arg1;
- (void)setHeaderColumnCellStyle:(id)arg1;
- (void)setHeaderRowCellStyle:(id)arg1;
- (void)setBodyCellStyle:(id)arg1;
- (void)setHeaderColumnsFrozen:(BOOL)arg1;
- (void)setHeaderRowsFrozen:(BOOL)arg1;
- (void)setNumberOfHeaderColumns:(unsigned short)arg1;
- (void)setNumberOfFooterRows:(unsigned short)arg1;
- (void)setNumberOfHeaderRows:(unsigned short)arg1;
- (void)setRepeatingHeaderColumnsEnabled:(BOOL)arg1;
- (void)setRepeatingHeaderRowsEnabled:(BOOL)arg1;
- (void)setTableNameEnabled:(BOOL)arg1;
- (void)bakeFormulas;
- (void)setDrawableIsBeingCopied:(BOOL)arg1;
- (id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(BOOL)arg5;
- (id)footerRowSeparatorStroke;
- (id)footerRowBodyRowStroke;
- (id)footerRowBodyColumnStroke;
- (id)footerRowBorderStroke;
- (id)headerRowSeparatorStroke;
- (id)headerRowBodyRowStroke;
- (id)headerRowBodyColumnStroke;
- (id)headerRowBorderStroke;
- (id)headerColumnSeparatorStroke;
- (id)headerColumnBodyRowStroke;
- (id)headerColumnBodyColumnStroke;
- (id)headerColumnBorderStroke;
- (id)bodyRowStroke;
- (id)bodyColumnStroke;
- (id)defaultVerticalBorderStroke;
- (id)defaultHorizontalBorderStroke;
- (id)borderStrokeEvenIfNotVisible;
- (id)allRichTextPayloadStorages;
- (void)p_scaleStrokesOnCell:(id)arg1 atCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 transformedObjects:(id)arg3 scale:(float)arg4;
- (void)p_scaleStrokeFromProperty:(int)arg1 style:(id)arg2 pmap:(id)arg3 scale:(float)arg4;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (void)setTableNameShapeStyle:(id)arg1;
- (void)setTableNameStyle:(id)arg1;
- (void)setPresetID:(unsigned int)arg1;
- (id)sortRuleReferenceTracker;
- (id)hiddenStateFormulaOwnerForColumns;
- (id)hiddenStateFormulaOwnerForRows;
- (void)defaultStrokesForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalColumns:(unsigned short)arg5 totalRows:(unsigned short)arg6 tableArea:(int)arg7 outTopStroke:(id*)arg8 outLeftStroke:(id*)arg9 outBottomStroke:(id*)arg10 outRightStroke:(id*)arg11;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyColumnRange;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })headerColumnRange;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyRowRange;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })footerRowRange;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })headerRowRange;
- (void)p_clearDataListEntriesInRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 ignoreSizeChecks:(BOOL)arg2;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyRange;
- (id)defaultTextStyleForTableArea:(int)arg1;
- (id)defaultCellStyleForTableArea:(int)arg1;
- (void)p_fetchCellHoldingReadLock:(void*)arg1 returnCode:(void*)arg2;
- (id)conditionalStyleFormulaOwner;
- (id)defaultCellForTableArea:(int)arg1;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3 avoidNames:(id)arg4;
- (void)setStorageParentToInfo:(id)arg1;
- (void)dirtyFilterState;
- (void)setFilterSetType:(int)arg1;
- (id)replaceRule:(id)arg1 atRuleIndex:(unsigned int)arg2 inFilter:(unsigned int)arg3;
- (id)removeRulesWithIndices:(id)arg1 inFilter:(unsigned int)arg2;
- (id)addRules:(id)arg1 atRuleIndices:(id)arg2 inFilter:(unsigned int)arg3 isNew:(BOOL)arg4;
- (id)addRules:(id)arg1 inFilter:(unsigned int)arg2;
- (void)filterSetUpdated;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForTableArea:(int)arg1;
- (id)dataStore;
- (id)filterSet;
- (void)setStyleApplyClearsAll:(BOOL)arg1;
- (BOOL)styleApplyClearsAll;
- (void)setTableNameHeight:(float)arg1;
- (float)tableNameHeight;
- (void)setTableNameBorderEnabled:(BOOL)arg1;
- (BOOL)tableNameBorderEnabled;
- (BOOL)tableNameEnabled;
- (unsigned short)numberOfFooterRows;
- (unsigned short)numberOfHeaderColumns;
- (unsigned short)numberOfHeaderRows;
- (BOOL)headerColumnsFrozen;
- (BOOL)headerRowsFrozen;
- (BOOL)repeatingHeaderColumnsEnabled;
- (BOOL)repeatingHeaderRowsEnabled;
- (struct __CFUUID { }*)fromTableID;
- (id)initWithContext:(id)arg1 rows:(unsigned short)arg2 columns:(unsigned short)arg3 styles:(id)arg4 tableInfo:(id)arg5;
- (void)setupDefaultCells;
- (void)resetStyles:(id)arg1;
- (id)tableNameShapeStyle;
- (id)tableNameStyle;
- (id)footerRowTextStyle;
- (id)headerColumnTextStyle;
- (id)headerRowTextStyle;
- (id)footerRowCellStyle;
- (id)headerColumnCellStyle;
- (id)headerRowCellStyle;
- (id)bodyCellStyle;
- (void)p_releaseExistingDefaultStyles;
- (int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)setTableID:(struct __CFUUID { }*)arg1;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (unsigned int)presetID;
- (id)calcEngine;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1;
- (void)upgradeFromPreUFF;
- (struct __CFUUID { }*)tableID;
- (void)saveToArchiver:(id)arg1;
- (id)initFromUnarchiver:(id)arg1;
- (void)setTableStyle:(id)arg1;

@end
