/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@class PCPersistentTimer, SBFPasscodeLockAssertionManager, NSString, SBFPasscodeLockDisableAssertion;

@interface SBFDeviceLockController : NSObject  {
    int _lockState;
    BOOL _isBlockedForThermalCondition;
    double _lastLockDate;
    BOOL _isPermanentlyBlocked;
    double _deviceLockUnblockTime;
    PCPersistentTimer *_deviceLockUnblockTimer;
    BOOL _cachedPasscodeLockedOrBlocked;
    BOOL _hasBeenUnlockedOnceSinceBoot;
    SBFPasscodeLockAssertionManager *_assertionManager;
    SBFPasscodeLockDisableAssertion *_transientPasscodeCheckingAssertion;
    BOOL _okToSendNotifications;
    NSString *_lastIncorrectPasscodeAttempt;
}

+ (id)_lockStateDefaults;

- (void)_uncachePasscodeIfNecessary;
- (void)_cachePassword:(id)arg1;
- (void)_removeDeviceLockDisableAssertion:(id)arg1;
- (void)_addDeviceLockDisableAssertion:(id)arg1;
- (void)_keybagLockStateChangedTo:(int)arg1;
- (void)_notifyOfFirstUnlock;
- (void)enablePasscodeLockImmediately;
- (BOOL)deviceHasBeenPasscodeUnlockedOnceSinceBoot;
- (BOOL)isPasscodeLockedCached;
- (BOOL)isPermanentlyBlocked:(double*)arg1;
- (void)setBlockedForThermalCondition:(BOOL)arg1;
- (void)_sendBlockStateChangeNotification;
- (BOOL)isBlockedForThermalCondition;
- (id)lastLockDate;
- (BOOL)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(BOOL)arg2;
- (void)_wipeDevice;
- (void)_lockStateChangedFrom:(int)arg1 to:(int)arg2;
- (void)_setLockState:(int)arg1;
- (void)_enablePasscodeLockImmediately:(BOOL)arg1;
- (BOOL)_shouldLockDeviceNow;
- (BOOL)isPasscodeLockedOrBlocked;
- (void)_scheduleUnblockTimer;
- (void)_unblockTimerFired;
- (BOOL)_temporarilyBlocked;
- (void)_noteBlockedReasonsMayHaveChanged;
- (void)_clearUnblockTimer;
- (void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(BOOL)arg1;
- (void)_updateDeviceLockedState;
- (BOOL)_shouldSuppressLockOnInit;
- (BOOL)deviceHasPasscodeSet;
- (void)_setDeviceLockUnblockTime:(double)arg1;
- (BOOL)isPasscodeLocked;
- (void)_clearBlockedState;
- (void)synchronize;
- (id)description;
- (void)dealloc;
- (id)init;
- (BOOL)isBlocked;

@end
