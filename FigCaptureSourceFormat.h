/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@class NSArray, NSDictionary;

@interface FigCaptureSourceFormat : NSObject <NSCoding> {
    NSDictionary *_formatDictionary;
    struct opaqueCMFormatDescription { } *_formatDescription;
}

@property(readonly) unsigned long mediaType;
@property(readonly) struct opaqueCMFormatDescription { }* formatDescription;
@property(getter=isExperimental,readonly) BOOL experimental;
@property(getter=isDefaultActiveFormat,readonly) BOOL defaultActiveFormat;
@property(readonly) int videoFormatIndex;
@property(readonly) unsigned long videoFormat;
@property(readonly) struct { int x1; int x2; } videoDimensions;
@property(readonly) struct { int x1; int x2; } sensorDimensions;
@property(readonly) int videoFormatIndexForVideoStabilization;
@property(readonly) float videoMinSupportedFrameRate;
@property(readonly) float videoMaxSupportedFrameRate;
@property(readonly) float videoDefaultMinFrameRate;
@property(readonly) float videoDefaultMaxFrameRate;
@property(readonly) float videoFieldOfView;
@property(getter=isVideoBinned,readonly) BOOL videoBinned;
@property(getter=isVideoStabilizationSupported,readonly) BOOL videoStabilizationSupported;
@property(getter=isVideoZoomSupported,readonly) BOOL videoZoomSupported;
@property(readonly) float videoMaxZoomFactor;
@property(readonly) float videoZoomFactorUpscaleThreshold;
@property(readonly) float videoZoomFactorVISUpscaleThreshold;
@property(getter=isVideoZoomDynamicSensorCropSupported,readonly) BOOL videoZoomDynamicSensorCropSupported;
@property(getter=isVideoLowLightBinningSwitchSupported,readonly) BOOL videoLowLightBinningSwitchSupported;
@property(readonly) int videoRawBitDepth;
@property(readonly) float videoScaleFactor;
@property(readonly) int temporalNoiseReductionMode;
@property(readonly) float minISO;
@property(readonly) float maxISO;
@property(readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } minExposureDuration;
@property(readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } maxExposureDuration;
@property(getter=isPhotoFormat,readonly) BOOL photoFormat;
@property(getter=isHighResPhotoFormat,readonly) BOOL highResPhotoFormat;
@property(readonly) BOOL needsPreviewDPCC;
@property(readonly) BOOL usesPreviewSizedThumbnail;
@property(getter=isStillImageStabilizationSupported,readonly) BOOL stillImageStabilizationSupported;
@property(getter=isHDRSupported,readonly) BOOL hdrSupported;
@property(getter=isHighProfileH264Supported,readonly) BOOL highProfileH264Supported;
@property(readonly) NSArray * AVCaptureSessionPresets;


- (id)AVCaptureSessionPresets;
- (BOOL)isHighProfileH264Supported;
- (BOOL)usesPreviewSizedThumbnail;
- (BOOL)needsPreviewDPCC;
- (BOOL)isHighResPhotoFormat;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })maxExposureDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })minExposureDuration;
- (float)maxISO;
- (int)videoRawBitDepth;
- (BOOL)isVideoZoomDynamicSensorCropSupported;
- (float)videoZoomFactorVISUpscaleThreshold;
- (float)videoZoomFactorUpscaleThreshold;
- (float)videoMaxZoomFactor;
- (BOOL)isVideoStabilizationSupported;
- (float)videoFieldOfView;
- (float)videoDefaultMinFrameRate;
- (int)videoFormatIndexForVideoStabilization;
- (BOOL)isDefaultActiveFormat;
- (BOOL)isExperimental;
- (id)initWithFigCaptureStreamFormatDictionary:(id)arg1;
- (float)videoMinSupportedFrameRate;
- (float)minISO;
- (struct CGSize { float x1; float x2; })_maxVideoDimensions;
- (BOOL)isVideoBinned;
- (float)videoScaleFactor;
- (float)videoDefaultMaxFrameRate;
- (struct { int x1; int x2; })_outputDimensions;
- (BOOL)isVideoLowLightBinningSwitchSupported;
- (int)temporalNoiseReductionMode;
- (int)videoFormatIndex;
- (float)videoMaxSupportedFrameRate;
- (BOOL)isStillImageStabilizationSupported;
- (BOOL)isHDRSupported;
- (struct { int x1; int x2; })sensorDimensions;
- (struct { int x1; int x2; })videoDimensions;
- (BOOL)isVideoZoomSupported;
- (BOOL)isPhotoFormat;
- (struct opaqueCMFormatDescription { }*)formatDescription;
- (unsigned long)videoFormat;
- (unsigned long)mediaType;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (void)dealloc;

@end
